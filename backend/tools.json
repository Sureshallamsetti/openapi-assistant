[
  {
    "name": "connectivity_check",
    "description": "POST /connectivity/check",
    "method": "post",
    "path": "/connectivity/check",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": "The ID of the engine to check."
        },
        "use_engine_public_key": {
          "type": "boolean",
          "description": "Whether to use public key authentication."
        },
        "os_name": {
          "type": "string",
          "description": "Operating system type of the environment."
        },
        "staging_environment": {
          "type": "string",
          "description": "Id of the connector environment which is used to connect to this source environment."
        },
        "host": {
          "type": "string",
          "description": "The hostname of the remote host machine to check."
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote host machine to check. For Windows, port on which Delphix connector is running."
        },
        "username": {
          "type": "string",
          "description": "The username of the remote host machine to check. Username is mandatory input with password/use_engine_public_key/kerberos_authentication."
        },
        "password": {
          "type": "string",
          "description": "The password of the remote host machine to check."
        },
        "vault_id": {
          "type": "string",
          "description": "The DCT id or name of the vault from which to read the host credentials."
        },
        "hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "hashicorp_vault_username_key": {
          "type": "string",
          "description": "Key for the username in the key-value store."
        },
        "hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Key for the password in the key-value store."
        },
        "azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "use_kerberos_authentication": {
          "type": "boolean",
          "description": "Whether to use kerberos authentication."
        }
      },
      "required": [
        "engine_id",
        "host",
        "port"
      ]
    }
  },
  {
    "name": "database_connectivity_check",
    "description": "POST /database/connectivity/check",
    "method": "post",
    "path": "/database/connectivity/check",
    "parameters": {
      "type": "object",
      "properties": {
        "credentials_type": {
          "type": "string",
          "description": "The type of credentials."
        },
        "source_id": {
          "type": "string",
          "description": "Source database config Id."
        },
        "username": {
          "type": "string",
          "description": "Database username (Not applicable for MSSQL_ENVIRONMENT_USER)."
        },
        "password": {
          "type": "string",
          "description": "Database password (Not applicable for MSSQL_ENVIRONMENT_USER and mutually exclusive with vault attributes)."
        },
        "vault": {
          "type": "string",
          "description": "The name or reference of the vault from which to read the database credentials (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "hashicorp_vault_username_key": {
          "type": "string",
          "description": "Hashicorp vault key for the username in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Hashicorp vault key for the password in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "environment_id": {
          "type": "string",
          "description": "Id of the environment to which environment user belongs (MSSQL_ENVIRONMENT_USER only)."
        },
        "environment_user": {
          "type": "string",
          "description": "Reference to the environment user (MSSQL_ENVIRONMENT_USER only)."
        }
      },
      "required": [
        "source_id",
        "credentials_type"
      ]
    }
  },
  {
    "name": "netbackup_connectivity_check",
    "description": "POST /netbackup/connectivity/check",
    "method": "post",
    "path": "/netbackup/connectivity/check",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "Id of the target environment to test NetBackup connectivity from."
        },
        "environment_user_id": {
          "type": "string",
          "description": "Id of the environment user."
        },
        "master_server_name": {
          "type": "string",
          "description": "The name of the NetBackup master server to attempt to connect to."
        },
        "source_client_name": {
          "type": "string",
          "description": "The name of the NetBackup client to attempt to connect with."
        }
      },
      "required": [
        "environment_id",
        "source_client_name",
        "master_server_name",
        "environment_user_id"
      ]
    }
  },
  {
    "name": "commvault_connectivity_check",
    "description": "POST /commvault/connectivity/check",
    "method": "post",
    "path": "/commvault/connectivity/check",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "Id of the target environment to test Commvault connectivity from."
        },
        "environment_user_id": {
          "type": "string",
          "description": "Id of the environment user."
        },
        "commserve_host_name": {
          "type": "string",
          "description": "The hostname of the CommServe server to connect to."
        },
        "source_client_name": {
          "type": "string",
          "description": "The name of the Source Client in CommServe."
        },
        "staging_client_name": {
          "type": "string",
          "description": "The name of the Staging Client in CommServe."
        }
      },
      "required": [
        "source_client_name",
        "staging_client_name",
        "environment_id",
        "commserve_host_name",
        "environment_user_id"
      ]
    }
  },
  {
    "name": "get_data_layouts",
    "description": "GET /data-layouts",
    "method": "get",
    "path": "/data-layouts",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_data_layouts",
    "description": "POST /data-layouts/search",
    "method": "post",
    "path": "/data-layouts/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_data_layout_by_id",
    "description": "GET /data-layouts/{dataLayoutId}",
    "method": "get",
    "path": "/data-layouts/{dataLayoutId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_data_layout_tags",
    "description": "GET /data-layouts/{dataLayoutId}/tags",
    "method": "get",
    "path": "/data-layouts/{dataLayoutId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_data_layout_tags",
    "description": "POST /data-layouts/{dataLayoutId}/tags",
    "method": "post",
    "path": "/data-layouts/{dataLayoutId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_data_layout_tags",
    "description": "POST /data-layouts/{dataLayoutId}/tags/delete",
    "method": "post",
    "path": "/data-layouts/{dataLayoutId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "convert_and_drop_bookmarks",
    "description": "POST /data-layouts/{dataLayoutId}/convert-and-drop",
    "method": "post",
    "path": "/data-layouts/{dataLayoutId}/convert-and-drop",
    "parameters": {
      "type": "object",
      "properties": {
        "skip_account_import": {
          "type": "boolean",
          "description": "Skip running the account import process. If this flag is not set, then accounts from self-service will overwrite existing accounts if any."
        }
      },
      "required": []
    }
  },
  {
    "name": "import_engine_accounts",
    "description": "POST /data-layouts/import-engine-accounts",
    "method": "post",
    "path": "/data-layouts/import-engine-accounts",
    "parameters": {
      "type": "object",
      "properties": {
        "data_layout_ids": {
          "type": "array",
          "description": "List of data-layout ids for which accounts should be imported to DCT. This is mutually exclusive with `engine_ids` and `import_all`."
        },
        "engine_ids": {
          "type": "array",
          "description": "List of engine ids for which accounts should be imported to DCT. This is mutually exclusive with `data_layout_ids` and `import_all`."
        },
        "import_all": {
          "type": "boolean",
          "description": "All self-service accounts across engines should imported to DCT. This is mutually exclusive with `data_layout_ids` and `engine_ids`."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_bookmarks",
    "description": "GET /bookmarks",
    "method": "get",
    "path": "/bookmarks",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_bookmark",
    "description": "POST /bookmarks",
    "method": "post",
    "path": "/bookmarks",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The user-defined name of this bookmark."
        },
        "vdb_ids": {
          "type": "array",
          "description": "The IDs of the VDBs to create the Bookmark on. This parameter is mutually exclusive with snapshot_ids and timeflow_ids."
        },
        "vdb_group_id": {
          "type": "string",
          "description": "The ID of the VDB group to create the Bookmark on. This parameter is mutually exclusive with vdb_ids."
        },
        "snapshot_ids": {
          "type": "array",
          "description": "The IDs of the snapshots that will be part of the Bookmark. This parameter is mutually exclusive with vdb_ids, timestamp, timestamp_in_database_timezone, location and timeflow_ids.\n"
        },
        "timeflow_ids": {
          "type": "array",
          "description": "The array of timeflow Id. Only allowed to set when timestamp, timestamp_in_database_timezone or location is provided."
        },
        "timestamp": {
          "type": "string",
          "description": "The point in time from which to execute the operation. Mutually exclusive with snapshot_ids, timestamp_in_database_timezone and location."
        },
        "timestamp_in_database_timezone": {
          "type": "string",
          "description": "The point in time from which to execute the operation, expressed as a date-time in the timezone of the source database. Mutually exclusive with snapshot_ids, timestamp and location."
        },
        "location": {
          "type": "string",
          "description": "The location to create bookmark from. Mutually exclusive with snapshot_ids, timestamp, and timestamp_in_database_timezone."
        },
        "retention": {
          "type": "integer",
          "description": "The retention policy for this bookmark, in days. A value of -1 indicates the bookmark should be kept forever. Deprecated in favor of expiration and retain_forever."
        },
        "expiration": {
          "type": "string",
          "description": "The expiration for this bookmark. Mutually exclusive with retention and retain_forever."
        },
        "retain_forever": {
          "type": "boolean",
          "description": "Indicates that the bookmark should be retained forever."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for this Bookmark."
        },
        "bookmark_type": {
          "type": "string",
          "description": "Type of the bookmark, either PUBLIC or PRIVATE."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this bookmark must be configured as owner of the bookmark."
        },
        "inherit_parent_vdb_tags": {
          "type": "boolean",
          "description": "This field has been deprecated in favour of new field 'inherit_parent_tags'."
        },
        "inherit_parent_tags": {
          "type": "boolean",
          "description": "Whether this bookmark should inherit tags from the parent dataset."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "search_bookmarks",
    "description": "POST /bookmarks/search",
    "method": "post",
    "path": "/bookmarks/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_bookmark_by_id",
    "description": "GET /bookmarks/{bookmarkId}",
    "method": "get",
    "path": "/bookmarks/{bookmarkId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_bookmark",
    "description": "DELETE /bookmarks/{bookmarkId}",
    "method": "delete",
    "path": "/bookmarks/{bookmarkId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_bookmark",
    "description": "PATCH /bookmarks/{bookmarkId}",
    "method": "patch",
    "path": "/bookmarks/{bookmarkId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The user-defined name of this bookmark."
        },
        "expiration": {
          "type": "string",
          "description": "The expiration for this Bookmark. Mutually exclusive with retain_forever."
        },
        "retain_forever": {
          "type": "boolean",
          "description": "Indicates that the Bookmark should be retained forever."
        },
        "bookmark_type": {
          "type": "string",
          "description": "Type of the bookmark, either PUBLIC or PRIVATE."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vdb_groups_by_bookmark",
    "description": "GET /bookmarks/{bookmarkId}/vdb-groups",
    "method": "get",
    "path": "/bookmarks/{bookmarkId}/vdb-groups",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_vdb_groups_by_bookmark",
    "description": "POST /bookmarks/{bookmarkId}/vdb-groups/search",
    "method": "post",
    "path": "/bookmarks/{bookmarkId}/vdb-groups/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_bookmark_tags",
    "description": "GET /bookmarks/{bookmarkId}/tags",
    "method": "get",
    "path": "/bookmarks/{bookmarkId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_bookmark_tags",
    "description": "POST /bookmarks/{bookmarkId}/tags",
    "method": "post",
    "path": "/bookmarks/{bookmarkId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_bookmark_tags",
    "description": "POST /bookmarks/{bookmarkId}/tags/delete",
    "method": "post",
    "path": "/bookmarks/{bookmarkId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "import_engine_bookmarks",
    "description": "POST /bookmarks/import-engine-bookmarks/{engineId}",
    "method": "post",
    "path": "/bookmarks/import-engine-bookmarks/{engineId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_sources",
    "description": "GET /sources",
    "method": "get",
    "path": "/sources",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_oracle_source",
    "description": "POST /sources/oracle",
    "method": "post",
    "path": "/sources/oracle",
    "parameters": {
      "type": "object",
      "properties": {
        "oracle_config_type": {
          "type": "string",
          "description": ""
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the engine to create the source on."
        },
        "environment_id": {
          "type": "string",
          "description": "The ID of the environment to create the source on."
        },
        "database_name": {
          "type": "string",
          "description": "The name of the database."
        },
        "repository_id": {
          "type": "string",
          "description": "The id of the containing repository where this database is created."
        },
        "instances": {
          "type": "array",
          "description": "The instances of this RAC database."
        },
        "unique_name": {
          "type": "string",
          "description": "The unique name of this database."
        },
        "instance_name": {
          "type": "string",
          "description": "The instance name of this single instance database."
        }
      },
      "required": [
        "oracle_config_type",
        "repository_id"
      ]
    }
  },
  {
    "name": "update_oracle_source_by_id",
    "description": "PATCH /sources/oracle/{sourceId}",
    "method": "patch",
    "path": "/sources/oracle/{sourceId}",
    "parameters": {
      "type": "object",
      "properties": {
        "oracle_services": {
          "type": "array",
          "description": "List of jdbc connection strings which are used to connect with the database."
        },
        "user": {
          "type": "string",
          "description": "Database user for accessing this source."
        },
        "password": {
          "type": "string",
          "description": "Password for the database user."
        },
        "linking_enabled": {
          "type": "boolean",
          "description": "Whether this source should be used for linking."
        }
      },
      "required": []
    }
  },
  {
    "name": "verify_source_jdbc_connection_string",
    "description": "POST /sources/{sourceId}/jdbc-check",
    "method": "post",
    "path": "/sources/{sourceId}/jdbc-check",
    "parameters": {
      "type": "object",
      "properties": {
        "database_username": {
          "type": "string",
          "description": "oracle database username."
        },
        "database_password": {
          "type": "string",
          "description": "oracle database password."
        },
        "jdbc_connection_string": {
          "type": "string",
          "description": "Oracle jdbc connection string to validate."
        }
      },
      "required": [
        "jdbc_connection_string",
        "database_username",
        "database_password"
      ]
    }
  },
  {
    "name": "create_postgres_source",
    "description": "POST /sources/postgres",
    "method": "post",
    "path": "/sources/postgres",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the source."
        },
        "repository_id": {
          "type": "string",
          "description": "The ID of the Repository onto which the source will be created."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the engine to create the source on."
        },
        "environment_id": {
          "type": "string",
          "description": "The ID of the environment to create the source on."
        }
      },
      "required": [
        "name",
        "repository"
      ]
    }
  },
  {
    "name": "create_app_data_source",
    "description": "POST /sources/appdata",
    "method": "post",
    "path": "/sources/appdata",
    "parameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of source to create. Default is DIRECT."
        },
        "name": {
          "type": "string",
          "description": "The name of the source."
        },
        "repository_id": {
          "type": "string",
          "description": "The ID of the Repository onto which the source will be created."
        },
        "linking_enabled": {
          "type": "boolean",
          "description": "Whether this source should be used for linking."
        },
        "environment_user": {
          "type": "string",
          "description": "The environment user reference."
        },
        "parameters": {
          "type": "object",
          "description": "The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated."
        },
        "path": {
          "type": "string",
          "description": "The path to the data to be synced. This should only be passed for type=DIRECT."
        },
        "environment_id": {
          "type": "string",
          "description": "The ID of the environment to create the source on."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the engine to create the source on."
        }
      },
      "required": [
        "name",
        "repository_id",
        "type"
      ]
    }
  },
  {
    "name": "update_postgres_source_by_id",
    "description": "PATCH /sources/postgres/{sourceId}",
    "method": "patch",
    "path": "/sources/postgres/{sourceId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the source."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_sources",
    "description": "POST /sources/search",
    "method": "post",
    "path": "/sources/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_source_by_id",
    "description": "GET /sources/{sourceId}",
    "method": "get",
    "path": "/sources/{sourceId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_source",
    "description": "DELETE /sources/{sourceId}",
    "method": "delete",
    "path": "/sources/{sourceId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_source_by_id",
    "description": "PATCH /sources/{sourceId}/update",
    "method": "patch",
    "path": "/sources/{sourceId}/update",
    "parameters": {
      "type": "object",
      "properties": {
        "oracle_services": {
          "type": "array",
          "description": "List of jdbc connection strings which are used to connect with the database."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_source_tags",
    "description": "GET /sources/{sourceId}/tags",
    "method": "get",
    "path": "/sources/{sourceId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_source_tags",
    "description": "POST /sources/{sourceId}/tags",
    "method": "post",
    "path": "/sources/{sourceId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "get_source_compatible_repo",
    "description": "GET /sources/{sourceId}/staging_compatible_repositories",
    "method": "get",
    "path": "/sources/{sourceId}/staging_compatible_repositories",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_source_tags",
    "description": "POST /sources/{sourceId}/tags/delete",
    "method": "post",
    "path": "/sources/{sourceId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_staging_sources",
    "description": "GET /staging-sources",
    "method": "get",
    "path": "/staging-sources",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_staging_sources",
    "description": "POST /staging-sources/search",
    "method": "post",
    "path": "/staging-sources/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_staging_source_by_id",
    "description": "GET /staging-sources/{stagingSourceId}",
    "method": "get",
    "path": "/staging-sources/{stagingSourceId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_staging_source_by_id",
    "description": "PATCH /staging-sources/{stagingSourceId}/update",
    "method": "patch",
    "path": "/staging-sources/{stagingSourceId}/update",
    "parameters": {
      "type": "object",
      "properties": {
        "oracle_services": {
          "type": "array",
          "description": "List of jdbc connection strings which are used to connect with the database."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_staging_source_tags",
    "description": "GET /staging-sources/{stagingSourceId}/tags",
    "method": "get",
    "path": "/staging-sources/{stagingSourceId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_staging_source_tags",
    "description": "POST /staging-sources/{stagingSourceId}/tags",
    "method": "post",
    "path": "/staging-sources/{stagingSourceId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_staging_source_tags",
    "description": "POST /staging-sources/{stagingSourceId}/tags/delete",
    "method": "post",
    "path": "/staging-sources/{stagingSourceId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_dsources",
    "description": "GET /dsources",
    "method": "get",
    "path": "/dsources",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "permission": {
          "type": "string",
          "description": "Restrict the objects, which are allowed."
        }
      },
      "required": []
    }
  },
  {
    "name": "link_oracle_database",
    "description": "POST /dsources/oracle",
    "method": "post",
    "path": "/dsources/oracle",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": [
        "source_id"
      ]
    }
  },
  {
    "name": "get_oracle_dsource_linking_defaults",
    "description": "POST /dsources/oracle/defaults",
    "method": "post",
    "path": "/dsources/oracle/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "source_id": {
          "type": "string",
          "description": "The ID of the source to be linked."
        }
      },
      "required": [
        "source_id"
      ]
    }
  },
  {
    "name": "detach_oracle_dsource",
    "description": "POST /dsources/oracle/{dsourceId}/detachSource",
    "method": "post",
    "path": "/dsources/oracle/{dsourceId}/detachSource",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "attach_oracle_dsource",
    "description": "POST /dsources/oracle/{dsourceId}/attachSource",
    "method": "post",
    "path": "/dsources/oracle/{dsourceId}/attachSource",
    "parameters": {
      "type": "object",
      "properties": {
        "source_id": {
          "type": "string",
          "description": "Id of the source to attach."
        }
      },
      "required": [
        "source_id"
      ]
    }
  },
  {
    "name": "link_oracle_staging_push_database",
    "description": "POST /dsources/oracle/staging-push",
    "method": "post",
    "path": "/dsources/oracle/staging-push",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": [
        "engine_id",
        "database_name"
      ]
    }
  },
  {
    "name": "get_oracle_staging_push_dsource_linking_defaults",
    "description": "POST /dsources/oracle/staging-push/defaults",
    "method": "post",
    "path": "/dsources/oracle/staging-push/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "The ID of the environment to be linked."
        },
        "container_type": {
          "type": "string",
          "description": "The container type of this database.If not provided the request would be considered for a PDB database."
        }
      },
      "required": [
        "environment_id"
      ]
    }
  },
  {
    "name": "update_oracle_dsource_by_id",
    "description": "PATCH /dsources/oracle/{dsourceId}",
    "method": "patch",
    "path": "/dsources/oracle/{dsourceId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name of the dSource within a group."
        },
        "db_username": {
          "type": "string",
          "description": "The username of the database user."
        },
        "db_password": {
          "type": "string",
          "description": "The password of the database user."
        },
        "validate_db_credentials": {
          "type": "boolean",
          "description": "Whether db_username and db_password must be validated, if present, against the dSource. This must be set to false when credentials validation is not possible, for instance if the dSource is known to be disabled."
        },
        "environment_user_id": {
          "type": "string",
          "description": "The environment user ID to use to connect to the target environment."
        },
        "backup_level_enabled": {
          "type": "boolean",
          "description": "Boolean value indicates whether LEVEL-based incremental backups can be used on the source database."
        },
        "rman_channels": {
          "type": "integer",
          "description": "Number of parallel channels to use."
        },
        "files_per_set": {
          "type": "integer",
          "description": "Number of data files to include in each RMAN backup set."
        },
        "check_logical": {
          "type": "boolean",
          "description": "True if extended block checking should be used for this dSource."
        },
        "encrypted_linking_enabled": {
          "type": "boolean",
          "description": "True if SnapSync data from the source should be retrieved through an encrypted connection. Enabling this feature can decrease the performance of SnapSync from the source but has no impact on the performance of VDBs created from the retrieved data."
        },
        "compressed_linking_enabled": {
          "type": "boolean",
          "description": "True if SnapSync data from the source should be compressed over the network. Enabling this feature will reduce network bandwidth consumption and may significantly improve throughput, especially over slow network."
        },
        "bandwidth_limit": {
          "type": "integer",
          "description": "Bandwidth limit (MB/s) for SnapSync and LogSync network traffic. A value of 0 means no limit."
        },
        "number_of_connections": {
          "type": "integer",
          "description": "Total number of transport connections to use during SnapSync."
        },
        "validate_by_opening_db_in_read_only_mode": {
          "type": "boolean",
          "description": "Whether the snaphots of this dSource's staging database will be validated by opening it in read-only mode."
        },
        "pre_provisioning_enabled": {
          "type": "boolean",
          "description": "Boolean flag indicating whether or not pre-provisioning is turned on for this dSource."
        },
        "diagnose_no_logging_faults": {
          "type": "boolean",
          "description": "If true, NOLOGGING operations on this dSource are treated as faults and cannot be resolved manually."
        },
        "rac_max_instance_lag": {
          "type": "integer",
          "description": "Maximum number of log sequences to allow a RAC instance to lag before considering the instance offline."
        },
        "allow_auto_staging_restart_on_host_reboot": {
          "type": "boolean",
          "description": "Allow auto restart of staging source on host reboot."
        },
        "physical_standby": {
          "type": "boolean",
          "description": "If true, convert this dSource's staging database to a physical standby."
        },
        "external_file_path": {
          "type": "string",
          "description": "External file path."
        },
        "hooks": {
          "type": "object",
          "description": "DSource operation hooks."
        },
        "custom_env_variables_pairs": {
          "type": "array",
          "description": "An array of name value pair of environment variables."
        },
        "custom_env_variables_paths": {
          "type": "array",
          "description": "An array of strings of whitespace-separated parameters to be passed to the source command. The first parameter must be an absolute path to a file that exists on the target environment. Every subsequent parameter will be treated as an argument interpreted by the environment file."
        },
        "staging_database_config_params": {
          "type": "object",
          "description": "Database configuration parameter overrides."
        },
        "template_id": {
          "type": "string",
          "description": "The template ID of the target Oracle Staging Push dSource."
        },
        "logsync_enabled": {
          "type": "boolean",
          "description": "True if LogSync is enabled for this dSource."
        },
        "logsync_mode": {
          "type": "string",
          "description": "LogSync operation mode for this dSource."
        },
        "logsync_interval": {
          "type": "integer",
          "description": "Interval between LogSync requests, in seconds."
        }
      },
      "required": []
    }
  },
  {
    "name": "upgrade_oracle_dsource",
    "description": "This API is marked as deprecated in favour of generalized API '/dsources/{dsourceId}/upgrade'",
    "method": "post",
    "path": "/dsources/oracle/{dsourceId}/upgrade",
    "parameters": {
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "string",
          "description": "The id of the dSource/VDB repository to upgrade to."
        },
        "environment_user_id": {
          "type": "string",
          "description": "Reference of the environment user to use for dSource/VDB upgrade."
        }
      },
      "required": [
        "environment_user_id",
        "repository_id"
      ]
    }
  },
  {
    "name": "upgrade_dsource",
    "description": "POST /dsources/{dsourceId}/upgrade",
    "method": "post",
    "path": "/dsources/{dsourceId}/upgrade",
    "parameters": {
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "string",
          "description": "The id of the dSource/VDB repository to upgrade to."
        },
        "environment_user_id": {
          "type": "string",
          "description": "Reference of the environment user to use for dSource/VDB upgrade."
        },
        "ppt_repository": {
          "type": "string",
          "description": "The id of the SQL instance on the PPT environment that we want to use for pre-provisioning (MSSQL only)."
        }
      },
      "required": [
        "repository_id"
      ]
    }
  },
  {
    "name": "link_ase_database",
    "description": "POST /dsources/ase",
    "method": "post",
    "path": "/dsources/ase",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": [
        "source_id",
        "load_backup_path"
      ]
    }
  },
  {
    "name": "get_ase_dsource_linking_defaults",
    "description": "POST /dsources/ase/defaults",
    "method": "post",
    "path": "/dsources/ase/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "source_id": {
          "type": "string",
          "description": "The ID of the source to be linked."
        }
      },
      "required": [
        "source_id"
      ]
    }
  },
  {
    "name": "update_ase_dsource_by_id",
    "description": "PATCH /dsources/ase/{dsourceId}",
    "method": "patch",
    "path": "/dsources/ase/{dsourceId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the dSource and container to be updated."
        },
        "description": {
          "type": "string",
          "description": "The notes/description for the dSource."
        },
        "sync_policy_id": {
          "type": "string",
          "description": "The ID of the SnapSync policy for the dSource."
        },
        "retention_policy_id": {
          "type": "string",
          "description": "The ID of the Retention policy for the dSource."
        }
      },
      "required": []
    }
  },
  {
    "name": "link_appdata_database",
    "description": "POST /dsources/appdata",
    "method": "post",
    "path": "/dsources/appdata",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": [
        "parameters",
        "environment_user",
        "sync_parameters"
      ]
    }
  },
  {
    "name": "get_appdata_dsource_linking_defaults",
    "description": "POST /dsources/appdata/defaults",
    "method": "post",
    "path": "/dsources/appdata/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "source_id": {
          "type": "string",
          "description": "The ID of the source to be linked."
        }
      },
      "required": [
        "source_id"
      ]
    }
  },
  {
    "name": "update_appdata_dsource_by_id",
    "description": "PATCH /dsources/appdata/{dsourceId}",
    "method": "patch",
    "path": "/dsources/appdata/{dsourceId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the dSource and container to be updated."
        },
        "description": {
          "type": "string",
          "description": "The notes/description for the dSource."
        },
        "staging_environment": {
          "type": "string",
          "description": "The environment used as an intermediate stage to pull data into Delphix [AppDataStaged only]."
        },
        "staging_environment_user": {
          "type": "string",
          "description": "The environment user used to access the staging environment [AppDataStaged only]."
        },
        "environment_user": {
          "type": "string",
          "description": "The OS user to use for linking."
        },
        "parameters": {
          "type": "object",
          "description": "The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated."
        },
        "sync_policy_id": {
          "type": "string",
          "description": "The ID of the SnapSync policy for the dSource."
        },
        "retention_policy_id": {
          "type": "string",
          "description": "The ID of the Retention policy for the dSource."
        },
        "ops_pre_sync": {
          "type": "array",
          "description": "Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing."
        },
        "ops_post_sync": {
          "type": "array",
          "description": "Operations to perform after syncing a created dSource."
        }
      },
      "required": []
    }
  },
  {
    "name": "link_mssql_database",
    "description": "POST /dsources/mssql",
    "method": "post",
    "path": "/dsources/mssql",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": [
        "source_id"
      ]
    }
  },
  {
    "name": "detach_mssql_database",
    "description": "POST /dsources/mssql/{dsourceId}/detachSource",
    "method": "post",
    "path": "/dsources/mssql/{dsourceId}/detachSource",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "attach_mssql_database",
    "description": "POST /dsources/mssql/{dsourceId}/attachSource",
    "method": "post",
    "path": "/dsources/mssql/{dsourceId}/attachSource",
    "parameters": {
      "type": "object",
      "properties": {
        "source_id": {
          "type": "string",
          "description": "Id of the source to link."
        },
        "ppt_repository": {
          "type": "string",
          "description": "Id of the SQL instance on the PPT environment that we want to use for pre-provisioning."
        },
        "sync_strategy_managed_type": {
          "type": "string",
          "description": "MSSQL specific parameters for source based sync strategy.:\n* `external` - MSSQL specific parameters for externally managed source based sync strategy.\n* `delphix` - MSSQL specific parameters for delphix managed source based sync strategy.\n"
        },
        "mssql_user_environment_reference": {
          "type": "string",
          "description": "Reference to the source environment user to use for linking."
        },
        "mssql_user_domain_username": {
          "type": "string",
          "description": "The username for the source DB user."
        },
        "mssql_user_domain_password": {
          "type": "string",
          "description": "Password for the database user."
        },
        "mssql_user_domain_vault_username": {
          "type": "string",
          "description": "Delphix display name for the vault user."
        },
        "mssql_user_domain_vault": {
          "type": "string",
          "description": "The name or reference of the vault from which to read the database credentials."
        },
        "mssql_user_domain_hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "mssql_user_domain_hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "mssql_user_domain_hashicorp_vault_username_key": {
          "type": "string",
          "description": "Hashicorp vault key for the username in the key-value store."
        },
        "mssql_user_domain_hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Hashicorp vault key for the password in the key-value store."
        },
        "mssql_user_domain_azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name."
        },
        "mssql_user_domain_azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store."
        },
        "mssql_user_domain_azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store."
        },
        "mssql_user_domain_cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "mssql_database_username": {
          "type": "string",
          "description": "The username for the source DB user."
        },
        "mssql_database_password": {
          "type": "string",
          "description": "Password for the database user."
        },
        "delphix_managed_backup_compression_enabled": {
          "type": "boolean",
          "description": "Specify whether the backups taken should be compressed or uncompressed when Delphix managed option is selected."
        },
        "delphix_managed_backup_policy": {
          "type": "string",
          "description": "Specify which node of an availability group to run the copy-only full backup on:\n* `primary` - Backups only go to the primary node.\n* `secondary_only` - Backups only go to secondary nodes. If secondary nodes are down, backups will fail.\n* `prefer_secondary` - Backups go to secondary nodes, but if secondary nodes are down, backups will go to the primary node.\n"
        },
        "external_managed_validate_sync_mode": {
          "type": "string",
          "description": "Specifies the backup types ValidatedSync will use to synchronize the dSource with the source database"
        },
        "external_managed_shared_backup_locations": {
          "type": "array",
          "description": "Shared source database backup locations."
        },
        "external_netbackup_config_master_name": {
          "type": "string",
          "description": "The master server name of this NetBackup configuration."
        },
        "external_netbackup_config_source_client_name": {
          "type": "string",
          "description": "The source's client server name of this NetBackup configuration."
        },
        "external_netbackup_config_params": {
          "type": "object",
          "description": "NetBackup configuration parameter overrides."
        },
        "external_netbackup_config_templates": {
          "type": "string",
          "description": "Optional config template selection for NetBackup configurations. If set, external_netbackup_config_params will be ignored."
        },
        "external_commserve_host_name": {
          "type": "string",
          "description": "The commserve host name of this Commvault configuration."
        },
        "external_commvault_config_source_client_name": {
          "type": "string",
          "description": "The source client name of this Commvault configuration."
        },
        "external_commvault_config_staging_client_name": {
          "type": "string",
          "description": "The staging client name of this Commvault configuration."
        },
        "external_commvault_config_params": {
          "type": "object",
          "description": "Commvault configuration parameter overrides."
        },
        "external_commvault_config_templates": {
          "type": "string",
          "description": "Optional config template selection for Commvault configurations. If set, configParams will be ignored."
        },
        "encryption_key": {
          "type": "string",
          "description": "The encryption key to use when restoring encrypted backups."
        },
        "source_host_user": {
          "type": "string",
          "description": "ID or user reference of the host OS user to use for linking."
        },
        "ppt_host_user": {
          "type": "string",
          "description": "Reference of the host OS user on the PPT host to use for linking."
        },
        "staging_pre_script": {
          "type": "string",
          "description": "A user-provided PowerShell script or executable to run prior to restoring from a backup during pre-provisioning."
        },
        "staging_post_script": {
          "type": "string",
          "description": "A user-provided PowerShell script or executable to run after restoring from a backup during pre-provisioning."
        },
        "ops_pre_sync": {
          "type": "array",
          "description": "Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing."
        },
        "ops_post_sync": {
          "type": "array",
          "description": "Operations to perform after syncing a created dSource."
        }
      },
      "required": [
        "source_id",
        "ppt_repository"
      ]
    }
  },
  {
    "name": "attach_mssql_staging_push_database",
    "description": "POST /dsources/mssql/staging-push/{dsourceId}/attachSource",
    "method": "post",
    "path": "/dsources/mssql/staging-push/{dsourceId}/attachSource",
    "parameters": {
      "type": "object",
      "properties": {
        "encryption_key": {
          "type": "string",
          "description": "The encryption key to use when restoring encrypted backups."
        },
        "ppt_repository": {
          "type": "string",
          "description": "Reference of the SQL instance on the PPT environment that we want to use for pre-provisioning."
        },
        "ppt_host_user": {
          "type": "string",
          "description": "Reference of the host OS user on the PPT host to use for linking."
        },
        "staging_pre_script": {
          "type": "string",
          "description": "A user-provided PowerShell script or executable to run prior to restoring from a backup during pre-provisioning."
        },
        "staging_post_script": {
          "type": "string",
          "description": "A user-provided PowerShell script or executable to run after restoring from a backup during pre-provisioning."
        },
        "staging_database_name": {
          "type": "string",
          "description": "The name of the database to create on the staging environment. This property is mutually exclusive to sync_strategy_managed_type"
        },
        "db_state": {
          "type": "string",
          "description": "User provided db state that will be used to create staging push db. Default is RESTORING"
        },
        "ops_pre_sync": {
          "type": "array",
          "description": "Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing."
        },
        "ops_post_sync": {
          "type": "array",
          "description": "Operations to perform after syncing a created dSource."
        }
      },
      "required": [
        "staging_database_name",
        "ppt_repository"
      ]
    }
  },
  {
    "name": "get_mssql_dsource_linking_defaults",
    "description": "POST /dsources/mssql/defaults",
    "method": "post",
    "path": "/dsources/mssql/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "source_id": {
          "type": "string",
          "description": "The ID of the source to be linked."
        }
      },
      "required": [
        "source_id"
      ]
    }
  },
  {
    "name": "link_mssql_staging_push_database",
    "description": "POST /dsources/mssql/staging-push",
    "method": "post",
    "path": "/dsources/mssql/staging-push",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": [
        "ppt_host_user",
        "staging_database_name",
        "ppt_repository",
        "engine_id",
        "name"
      ]
    }
  },
  {
    "name": "get_mssql_staging_push_dsource_linking_defaults",
    "description": "POST /dsources/mssql/staging-push/defaults",
    "method": "post",
    "path": "/dsources/mssql/staging-push/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "The ID of the environment to be linked."
        }
      },
      "required": [
        "environment_id"
      ]
    }
  },
  {
    "name": "delete_dsource",
    "description": "POST /dsources/delete",
    "method": "post",
    "path": "/dsources/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "dsource_id": {
          "type": "string",
          "description": "Id of the dSource to delete."
        },
        "force": {
          "type": "boolean",
          "description": "Flag indicating whether to continue the operation upon failures."
        },
        "oracle_username": {
          "type": "string",
          "description": "The name of the privileged user to run the delete operation as (Oracle only)."
        },
        "oracle_password": {
          "type": "string",
          "description": "Password for privileged user (Oracle only)."
        },
        "delete_all_dependent_vdbs": {
          "type": "boolean",
          "description": "Flag indicating whether to delete all dependent VDBs before deleting the dSource."
        }
      },
      "required": [
        "dsource_id"
      ]
    }
  },
  {
    "name": "search_dsources",
    "description": "POST /dsources/search",
    "method": "post",
    "path": "/dsources/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "permission": {
          "type": "string",
          "description": "Restrict the objects, which are allowed."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_dsource_by_id",
    "description": "GET /dsources/{dsourceId}",
    "method": "get",
    "path": "/dsources/{dsourceId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "enable_dsource",
    "description": "POST /dsources/{dsourceId}/enable",
    "method": "post",
    "path": "/dsources/{dsourceId}/enable",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_start": {
          "type": "boolean",
          "description": "Whether to attempt a startup of the source after the enable."
        }
      },
      "required": []
    }
  },
  {
    "name": "disable_dsource",
    "description": "POST /dsources/{dsourceId}/disable",
    "method": "post",
    "path": "/dsources/{dsourceId}/disable",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_cleanup": {
          "type": "boolean",
          "description": "Whether to attempt a cleanup of the database from the environment before the disable."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_upgrade_compatible_repo_for_dsource",
    "description": "GET /dsources/{dsourceId}/upgrade_compatible_repositories",
    "method": "get",
    "path": "/dsources/{dsourceId}/upgrade_compatible_repositories",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_mssql_dsource_by_id",
    "description": "PATCH /dsources/mssql/{dsourceId}",
    "method": "patch",
    "path": "/dsources/mssql/{dsourceId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name of the dSource within a group."
        },
        "logsync_enabled": {
          "type": "boolean",
          "description": "Enabled LogSync for this dSource."
        },
        "encryption_key": {
          "type": "string",
          "description": "The encryption key to use when restoring encrypted backups."
        },
        "ppt_repository": {
          "type": "string",
          "description": "Reference of the SQL instance on the PPT environment that we want to use for pre-provisioning."
        },
        "ppt_host_user": {
          "type": "string",
          "description": "Reference of the host OS user on the PPT host to use for linking."
        },
        "sync_strategy_managed_type": {
          "type": "string",
          "description": "MSSQL specific parameters for source based sync strategy.:\n* `external` - MSSQL specific parameters for externally managed source based sync strategy.\n* `delphix` - MSSQL specific parameters for delphix managed source based sync strategy.\n* `staging_push` - MSSQL specific parameters for staging push based sync strategy.\n"
        },
        "source_host_user": {
          "type": "string",
          "description": "ID or user reference of the host OS user to use for linking."
        },
        "mssql_user_environment_reference": {
          "type": "string",
          "description": "Reference to the source environment user to use for linking."
        },
        "mssql_user_domain_username": {
          "type": "string",
          "description": "The username for the source DB user."
        },
        "mssql_user_domain_password": {
          "type": "string",
          "description": "Password for the database user."
        },
        "mssql_user_domain_vault_username": {
          "type": "string",
          "description": "Delphix display name for the vault user."
        },
        "mssql_user_domain_vault": {
          "type": "string",
          "description": "The name or reference of the vault from which to read the database credentials."
        },
        "mssql_user_domain_hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "mssql_user_domain_hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "mssql_user_domain_hashicorp_vault_username_key": {
          "type": "string",
          "description": "Hashicorp vault key for the username in the key-value store."
        },
        "mssql_user_domain_hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Hashicorp vault key for the password in the key-value store."
        },
        "mssql_user_domain_azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name."
        },
        "mssql_user_domain_azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store."
        },
        "mssql_user_domain_azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store."
        },
        "mssql_user_domain_cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "mssql_database_username": {
          "type": "string",
          "description": "The username for the source DB user."
        },
        "mssql_database_password": {
          "type": "string",
          "description": "Password for the database user."
        },
        "delphix_managed_backup_compression_enabled": {
          "type": "boolean",
          "description": "Specify whether the backups taken should be compressed or uncompressed when Delphix managed option is selected."
        },
        "delphix_managed_backup_policy": {
          "type": "string",
          "description": "Specify which node of an availability group to run the copy-only full backup on:\n* `primary` - Backups only go to the primary node.\n* `secondary_only` - Backups only go to secondary nodes. If secondary nodes are down, backups will fail.\n* `prefer_secondary` - Backups go to secondary nodes, but if secondary nodes are down, backups will go to the primary node.\n"
        },
        "external_managed_validate_sync_mode": {
          "type": "string",
          "description": "Specifies the backup types ValidatedSync will use to synchronize the dSource with the source database"
        },
        "external_managed_shared_backup_locations": {
          "type": "array",
          "description": "Shared source database backup locations."
        },
        "disable_netbackup_config": {
          "type": "boolean",
          "description": "Disable NetBackup configuration."
        },
        "external_netbackup_config_master_name": {
          "type": "string",
          "description": "The master server name of this NetBackup configuration."
        },
        "external_netbackup_config_source_client_name": {
          "type": "string",
          "description": "The source's client server name of this NetBackup configuration."
        },
        "external_netbackup_config_params": {
          "type": "object",
          "description": "NetBackup configuration parameter overrides."
        },
        "external_netbackup_config_templates": {
          "type": "string",
          "description": "Optional config template selection for NetBackup configurations. If set, external_netbackup_config_params will be ignored."
        },
        "disable_commvault_config": {
          "type": "boolean",
          "description": "Disable Commvault configuration."
        },
        "external_commserve_host_name": {
          "type": "string",
          "description": "The commserve host name of this Commvault configuration."
        },
        "external_commvault_config_source_client_name": {
          "type": "string",
          "description": "The source client name of this Commvault configuration."
        },
        "external_commvault_config_staging_client_name": {
          "type": "string",
          "description": "The staging client name of this Commvault configuration."
        },
        "external_commvault_config_params": {
          "type": "object",
          "description": "Commvault configuration parameter overrides."
        },
        "external_commvault_config_templates": {
          "type": "string",
          "description": "Optional config template selection for Commvault configurations. If set, configParams will be ignored."
        },
        "hooks": {
          "type": "object",
          "description": "DSource operation hooks."
        },
        "sync_policy_id": {
          "type": "string",
          "description": "The ID of the SnapSync policy for the dSource."
        },
        "retention_policy_id": {
          "type": "string",
          "description": "The ID of the Retention policy for the dSource."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_dsource_snapshots",
    "description": "GET /dsources/{dsourceId}/snapshots",
    "method": "get",
    "path": "/dsources/{dsourceId}/snapshots",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        }
      },
      "required": []
    }
  },
  {
    "name": "snapshot_dsource",
    "description": "POST /dsources/{dsourceId}/snapshots",
    "method": "post",
    "path": "/dsources/{dsourceId}/snapshots",
    "parameters": {
      "type": "object",
      "properties": {
        "drop_and_recreate_devices": {
          "type": "boolean",
          "description": "If this parameter is set to true, older devices will be dropped and new\ndevices created instead of trying to remap the devices. This might increase\nthe space utilization on Delphix Engine. (ASE only)\n"
        },
        "sync_strategy": {
          "type": "string",
          "description": "Determines how the Delphix Engine will take a backup:\n* `latest_backup` - Use the most recent backup.\n* `new_backup` - Delphix will take a new backup of your source database.\n* `specific_backup` - Use a specific backup. Using this option requires setting\n  `ase_backup_files` for ASE dSources or `mssql_backup_uuid` for MSSql dSources.\nDefault is `new_backup`.\n(ASE, MSSql only)\n"
        },
        "ase_backup_files": {
          "type": "array",
          "description": "When using the `specific_backup` sync_strategy, determines the backup files. (ASE Only)"
        },
        "mssql_backup_uuid": {
          "type": "string",
          "description": "When using the `specific_backup` sync_strategy, determines the Backup Set UUID. (MSSql only)"
        },
        "compression_enabled": {
          "type": "boolean",
          "description": "When using the `new_backup` sync_strategy, determines if compression must be enabled. Defaults to the configuration of the ingestion strategy configured on the Delphix Engine for this dSource. (MSSql only)"
        },
        "availability_group_backup_policy": {
          "type": "string",
          "description": "When using the `new_backup` sync_strategy for an MSSql Availability Group, determines the backup policy:\n* `primary` - Backups only go to the primary node.\n* `secondary_only` - Backups only go to secondary nodes. If secondary nodes are down, backups will fail.\n* `prefer_secondary` - Backups go to secondary nodes, but if secondary nodes are down, backups will go to the primary node.\n(MSSql only)\n"
        },
        "do_not_resume": {
          "type": "boolean",
          "description": "Indicates whether a fresh SnapSync must be started regardless if it was possible to\nresume the current SnapSync. If true, we will not resume but instead ignore previous progress\nand backup all datafiles even if already completed from previous failed SnapSync. This does not\nforce a full backup, if an incremental was in progress this will start a new incremental snapshot.\n(Oracle only)\n"
        },
        "double_sync": {
          "type": "boolean",
          "description": "Indicates whether two SnapSyncs should be performed in immediate succession to reduce the number\nof logs required to provision the snapshot. This may significantly reduce the time necessary to\nprovision from a snapshot.\n(Oracle only).\n"
        },
        "force_full_backup": {
          "type": "boolean",
          "description": "Whether or not to take another full backup of the source database. (Oracle only)"
        },
        "skip_space_check": {
          "type": "boolean",
          "description": "Skip check that tests if there is enough space available to store the database in\nthe Delphix Engine. The Delphix Engine estimates how much space a database will occupy after\ncompression and prevents SnapSync if insufficient space is available. This safeguard can be\noverridden using this option. This may be useful when linking highly compressible databases.\n(Oracle only)\n"
        },
        "files_for_partial_full_backup": {
          "type": "array",
          "description": "List of datafiles to take a full backup of. This would be useful in situations\nwhere certain datafiles could not be backed up during previous SnapSync due to corruption\nor because they went offline.\n(Oracle only)\n"
        },
        "appdata_parameters": {
          "type": "object",
          "description": "The list of parameters specified by the snapshotParametersDefinition schema in the toolkit (AppData only)."
        },
        "rman_rate_in_MB": {
          "type": "integer",
          "description": "RMAN rate in megabytes to be used. This is the upper limit for bytes read so that \nRMAN does not consume excessive disk bandwidth and degrade online performance. (Oracle only)\n"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_dsource_deletion_dependencies",
    "description": "GET /dsources/{dsourceId}/deletion-dependencies",
    "method": "get",
    "path": "/dsources/{dsourceId}/deletion-dependencies",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_tags_dsource",
    "description": "GET /dsources/{dsourceId}/tags",
    "method": "get",
    "path": "/dsources/{dsourceId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_tags_dsource",
    "description": "POST /dsources/{dsourceId}/tags",
    "method": "post",
    "path": "/dsources/{dsourceId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_tags_dsource",
    "description": "POST /dsources/{dsourceId}/tags/delete",
    "method": "post",
    "path": "/dsources/{dsourceId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "export_dsource_to_asm_by_snapshot",
    "description": "POST /dsources/{dsourceId}/asm-export-by-snapshot",
    "method": "post",
    "path": "/dsources/{dsourceId}/asm-export-by-snapshot",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_dsource_by_snapshot",
    "description": "POST /dsources/{dsourceId}/export-by-snapshot",
    "method": "post",
    "path": "/dsources/{dsourceId}/export-by-snapshot",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_dsource_to_asm_by_location",
    "description": "POST /dsources/{dsourceId}/asm-export-by-location",
    "method": "post",
    "path": "/dsources/{dsourceId}/asm-export-by-location",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_dsource_to_asm_by_bookmark",
    "description": "POST /dsources/{dsourceId}/asm-export-from-bookmark",
    "method": "post",
    "path": "/dsources/{dsourceId}/asm-export-from-bookmark",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_dsource_from_bookmark",
    "description": "POST /dsources/{dsourceId}/export-from-bookmark",
    "method": "post",
    "path": "/dsources/{dsourceId}/export-from-bookmark",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_dsource_to_asm_by_timestamp",
    "description": "POST /dsources/{dsourceId}/asm-export-by-timestamp",
    "method": "post",
    "path": "/dsources/{dsourceId}/asm-export-by-timestamp",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_dsource_by_timestamp",
    "description": "POST /dsources/{dsourceId}/export-by-timestamp",
    "method": "post",
    "path": "/dsources/{dsourceId}/export-by-timestamp",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_dsource_by_location",
    "description": "POST /dsources/{dsourceId}/export-by-location",
    "method": "post",
    "path": "/dsources/{dsourceId}/export-by-location",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_kerberos_config_by_id",
    "description": "GET /kerberos-configs/{kerberosConfigId}",
    "method": "get",
    "path": "/kerberos-configs/{kerberosConfigId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "list_kerberos_configs",
    "description": "GET /kerberos-configs",
    "method": "get",
    "path": "/kerberos-configs",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_kerberos_configs",
    "description": "POST /kerberos-configs/search",
    "method": "post",
    "path": "/kerberos-configs/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_password_vaults",
    "description": "GET /password_vaults",
    "method": "get",
    "path": "/password_vaults",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_password_vaults",
    "description": "POST /password_vaults/search",
    "method": "post",
    "path": "/password_vaults/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_password_vault_by_id",
    "description": "GET /password_vaults/{passwordVaultId}",
    "method": "get",
    "path": "/password_vaults/{passwordVaultId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_dataset_groups",
    "description": "GET /groups",
    "method": "get",
    "path": "/groups",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_dataset_groups",
    "description": "POST /groups/search",
    "method": "post",
    "path": "/groups/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_dataset_group_by_id",
    "description": "GET /groups/{groupId}",
    "method": "get",
    "path": "/groups/{groupId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_toolkits",
    "description": "GET /toolkits",
    "method": "get",
    "path": "/toolkits",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_toolkits",
    "description": "POST /toolkits/search",
    "method": "post",
    "path": "/toolkits/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_toolkit_by_id",
    "description": "GET /toolkits/{toolkitId}",
    "method": "get",
    "path": "/toolkits/{toolkitId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_toolkit_tags",
    "description": "GET /toolkits/{toolkitId}/tags",
    "method": "get",
    "path": "/toolkits/{toolkitId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_toolkit_tags",
    "description": "POST /toolkits/{toolkitId}/tags",
    "method": "post",
    "path": "/toolkits/{toolkitId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_toolkit_tags",
    "description": "POST /toolkits/{toolkitId}/tags/delete",
    "method": "post",
    "path": "/toolkits/{toolkitId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vdbs",
    "description": "GET /vdbs",
    "method": "get",
    "path": "/vdbs",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "permission": {
          "type": "string",
          "description": "Restrict the objects, which are allowed."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_vdbs",
    "description": "POST /vdbs/search",
    "method": "post",
    "path": "/vdbs/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "permission": {
          "type": "string",
          "description": "Restrict the objects, which are allowed."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vdb_by_id",
    "description": "GET /vdbs/{vdbId}",
    "method": "get",
    "path": "/vdbs/{vdbId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_vdb_by_id",
    "description": "PATCH /vdbs/{vdbId}",
    "method": "patch",
    "path": "/vdbs/{vdbId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name of the VDB within a group."
        },
        "db_username": {
          "type": "string",
          "description": "The username of the database user (Oracle, ASE Only)."
        },
        "db_password": {
          "type": "string",
          "description": "The password of the database user (Oracle, ASE Only)."
        },
        "validate_db_credentials": {
          "type": "boolean",
          "description": "Whether db_username and db_password must be validated, if present, against the VDB. This must be set to false when credentials validation is not possible, for instance if the VDB is known to be disabled."
        },
        "auto_restart": {
          "type": "boolean",
          "description": "Whether to enable VDB restart."
        },
        "environment_user_id": {
          "type": "string",
          "description": "The environment user ID to use to connect to the target environment."
        },
        "template_id": {
          "type": "string",
          "description": "The ID of the target VDB Template (Oracle and MSSql Only)."
        },
        "listener_ids": {
          "type": "array",
          "description": "The listener IDs for this provision operation (Oracle Only)."
        },
        "new_dbid": {
          "type": "boolean",
          "description": "Whether to enable new DBID for Oracle"
        },
        "cdc_on_provision": {
          "type": "boolean",
          "description": "Whether to enable CDC on provision for MSSql"
        },
        "pre_script": {
          "type": "string",
          "description": "Pre script for MSSql."
        },
        "post_script": {
          "type": "string",
          "description": "Post script for MSSql."
        },
        "hooks": {
          "type": "object",
          "description": "VDB operation hooks."
        },
        "custom_env_vars": {
          "type": "object",
          "description": "Environment variable to be set when the engine administers a VDB. See the Engine documentation for the list of allowed/denied environment variables and rules about substitution. Custom environment variables can only be updated while the VDB is disabled."
        },
        "custom_env_files": {
          "type": "array",
          "description": "Environment files to be sourced when the Engine administers a VDB. This path can be followed by parameters. Paths and parameters are separated by spaces. Custom environment variables can only be updated while the VDB is disabled."
        },
        "oracle_rac_custom_env_files": {
          "type": "array",
          "description": "Environment files to be sourced when the Engine administers an Oracle RAC VDB. This path can be followed by parameters. Paths and parameters are separated by spaces. Custom environment variables can only be updated while the VDB is disabled."
        },
        "oracle_rac_custom_env_vars": {
          "type": "array",
          "description": "Environment variable to be set when the engine administers an Oracle RAC VDB. See the Engine documentation for the list of allowed/denied environment variables and rules about substitution. Custom environment variables can only be updated while the VDB is disabled."
        },
        "parent_tde_keystore_path": {
          "type": "string",
          "description": "Path to a copy of the parent's Oracle transparent data encryption keystore on the target host. Required to provision from snapshots containing encrypted database files. (Oracle Multitenant Only)"
        },
        "parent_tde_keystore_password": {
          "type": "string",
          "description": "The password of the keystore specified in parentTdeKeystorePath. (Oracle Multitenant Only)"
        },
        "tde_key_identifier": {
          "type": "string",
          "description": "ID of the key created by Delphix. (Oracle Multitenant Only)"
        },
        "target_vcdb_tde_keystore_path": {
          "type": "string",
          "description": "Path to the keystore of the target vCDB. (Oracle Multitenant Only)"
        },
        "cdb_tde_keystore_password": {
          "type": "string",
          "description": "The password for the Transparent Data Encryption keystore associated with the CDB. (Oracle Multitenant Only)"
        },
        "appdata_source_params": {
          "type": "object",
          "description": "The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated."
        },
        "additional_mount_points": {
          "type": "array",
          "description": "Specifies additional locations on which to mount a subdirectory of an AppData container. Can only be updated while the VDB is disabled."
        },
        "appdata_config_params": {
          "type": "object",
          "description": "The parameters specified by the source config schema in the toolkit"
        },
        "config_params": {
          "type": "object",
          "description": "Database configuration parameter overrides."
        },
        "mount_point": {
          "type": "string",
          "description": "Mount point for the VDB (AppData only), can only be updated while the VDB is disabled."
        },
        "oracle_services": {
          "type": "array",
          "description": "List of jdbc connection strings which are used to connect with the database."
        },
        "instances": {
          "type": "array",
          "description": "The instances of this RAC database."
        },
        "invoke_datapatch": {
          "type": "boolean",
          "description": "Indicates whether datapatch should be invoked."
        },
        "mssql_ag_backup_location": {
          "type": "string",
          "description": "Shared backup location to be used for VDB provision on AG Cluster."
        },
        "mssql_ag_backup_based": {
          "type": "boolean",
          "description": "Indicates whether to do fast operations for VDB on AG which will use a healthy secondary replica to recreate the AG or backup based operations which will use the primary replica to recreate the AG using backup and restore process."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vdb_snapshots",
    "description": "GET /vdbs/{vdbId}/snapshots",
    "method": "get",
    "path": "/vdbs/{vdbId}/snapshots",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        }
      },
      "required": []
    }
  },
  {
    "name": "snapshot_vdb",
    "description": "POST /vdbs/{vdbId}/snapshots",
    "method": "post",
    "path": "/vdbs/{vdbId}/snapshots",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_bookmarks_by_vdb",
    "description": "GET /vdbs/{vdbId}/bookmarks",
    "method": "get",
    "path": "/vdbs/{vdbId}/bookmarks",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_bookmarks_by_vdb",
    "description": "POST /vdbs/{vdbId}/bookmarks/search",
    "method": "post",
    "path": "/vdbs/{vdbId}/bookmarks/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vdb_deletion_dependencies",
    "description": "GET /vdbs/{vdbId}/deletion-dependencies",
    "method": "get",
    "path": "/vdbs/{vdbId}/deletion-dependencies",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_tags_vdb",
    "description": "GET /vdbs/{vdbId}/tags",
    "method": "get",
    "path": "/vdbs/{vdbId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_vdb_tags",
    "description": "POST /vdbs/{vdbId}/tags",
    "method": "post",
    "path": "/vdbs/{vdbId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_vdb_tags",
    "description": "POST /vdbs/{vdbId}/tags/delete",
    "method": "post",
    "path": "/vdbs/{vdbId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "start_vdb",
    "description": "POST /vdbs/{vdbId}/start",
    "method": "post",
    "path": "/vdbs/{vdbId}/start",
    "parameters": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "description": "List of specific Oracle Virtual Database Instances to start."
        }
      },
      "required": []
    }
  },
  {
    "name": "stop_vdb",
    "description": "POST /vdbs/{vdbId}/stop",
    "method": "post",
    "path": "/vdbs/{vdbId}/stop",
    "parameters": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "description": "List of specific Oracle Virtual Database Instances to stop."
        },
        "abort": {
          "type": "boolean",
          "description": "Whether to issue 'shutdown abort' to shutdown Oracle Virtual DB instances."
        }
      },
      "required": []
    }
  },
  {
    "name": "enable_vdb",
    "description": "POST /vdbs/{vdbId}/enable",
    "method": "post",
    "path": "/vdbs/{vdbId}/enable",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_start": {
          "type": "boolean",
          "description": "Whether to attempt a startup of the VDB after the enable."
        },
        "container_mode": {
          "type": "boolean",
          "description": "Whether the database is running inside a container."
        },
        "ownership_spec": {
          "type": "string",
          "description": "The uid:gid string that NFS mounts should belong to."
        }
      },
      "required": []
    }
  },
  {
    "name": "disable_vdb",
    "description": "POST /vdbs/{vdbId}/disable",
    "method": "post",
    "path": "/vdbs/{vdbId}/disable",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_cleanup": {
          "type": "boolean",
          "description": "Whether to attempt a cleanup of the VDB before the disable."
        },
        "container_mode": {
          "type": "boolean",
          "description": "Whether the database is running inside a container."
        }
      },
      "required": []
    }
  },
  {
    "name": "migrate_vdb",
    "description": "POST /vdbs/{vdbId}/migrate",
    "method": "post",
    "path": "/vdbs/{vdbId}/migrate",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "Id of the environment."
        },
        "environment_user_ref": {
          "type": "string",
          "description": "Reference of the environment user."
        },
        "repository_id": {
          "type": "string",
          "description": "Id of the environment repository."
        },
        "cdb_id": {
          "type": "string",
          "description": "Id of the container database."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_migrate_compatible_repo",
    "description": "GET /vdbs/{vdbId}/migrate_compatible_repositories",
    "method": "get",
    "path": "/vdbs/{vdbId}/migrate_compatible_repositories",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "lock_vdb",
    "description": "POST /vdbs/{vdbId}/lock",
    "method": "post",
    "path": "/vdbs/{vdbId}/lock",
    "parameters": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "integer",
          "description": "Id of the account on whose behalf this request is being made. Only accounts having LOCK_FOR_OTHER_ACCOUNT permission can lock VDBs on behalf of other accounts. If this property is not specified then the account id of the authenticated user making the request is used."
        }
      },
      "required": []
    }
  },
  {
    "name": "unlock_vdb",
    "description": "POST /vdbs/{vdbId}/unlock",
    "method": "post",
    "path": "/vdbs/{vdbId}/unlock",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_vdb",
    "description": "POST /vdbs/{vdbId}/delete",
    "method": "post",
    "path": "/vdbs/{vdbId}/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "force": {
          "type": "boolean",
          "description": "Whether to continue the operation upon failures."
        },
        "delete_all_dependent_vdbs": {
          "type": "boolean",
          "description": "Flag indicating whether to delete all dependent VDBs before deleting the VDB."
        }
      },
      "required": []
    }
  },
  {
    "name": "rollback_vdb_by_timestamp",
    "description": "POST /vdbs/{vdbId}/rollback_by_timestamp",
    "method": "post",
    "path": "/vdbs/{vdbId}/rollback_by_timestamp",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "rollback_vdb_by_snapshot",
    "description": "POST /vdbs/{vdbId}/rollback_by_snapshot",
    "method": "post",
    "path": "/vdbs/{vdbId}/rollback_by_snapshot",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "rollback_vdb_from_bookmark",
    "description": "POST /vdbs/{vdbId}/rollback_from_bookmark",
    "method": "post",
    "path": "/vdbs/{vdbId}/rollback_from_bookmark",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "refresh_vdb_by_timestamp",
    "description": "POST /vdbs/{vdbId}/refresh_by_timestamp",
    "method": "post",
    "path": "/vdbs/{vdbId}/refresh_by_timestamp",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "refresh_vdb_by_snapshot",
    "description": "POST /vdbs/{vdbId}/refresh_by_snapshot",
    "method": "post",
    "path": "/vdbs/{vdbId}/refresh_by_snapshot",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "refresh_vdb_from_bookmark",
    "description": "POST /vdbs/{vdbId}/refresh_from_bookmark",
    "method": "post",
    "path": "/vdbs/{vdbId}/refresh_from_bookmark",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "refresh_vdb_by_location",
    "description": "POST /vdbs/{vdbId}/refresh_by_location",
    "method": "post",
    "path": "/vdbs/{vdbId}/refresh_by_location",
    "parameters": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "The database specific identifier for tracking transactions (SCN, LSN, etc)."
        },
        "dataset_id": {
          "type": "string",
          "description": "ID of the dataset to refresh to, mutually exclusive with timeflow_id."
        },
        "timeflow_id": {
          "type": "string",
          "description": "ID of the timeflow to refresh to, mutually exclusive with dataset_id."
        }
      },
      "required": []
    }
  },
  {
    "name": "undo_refresh",
    "description": "POST /vdbs/{vdbId}/undo_refresh",
    "method": "post",
    "path": "/vdbs/{vdbId}/undo_refresh",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "switch_timeflow",
    "description": "POST /vdbs/{vdbId}/switch_timeflow",
    "method": "post",
    "path": "/vdbs/{vdbId}/switch_timeflow",
    "parameters": {
      "type": "object",
      "properties": {
        "timeflow_id": {
          "type": "string",
          "description": "The ID of the timeflow to switch to."
        }
      },
      "required": []
    }
  },
  {
    "name": "upgrade_oracle_vdb",
    "description": "This API is marked as deprecated in favour of generalized API '/vdbs/{vdbId}/upgrade'",
    "method": "post",
    "path": "/vdbs/oracle/{vdbId}/upgrade",
    "parameters": {
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "string",
          "description": "The id of the dSource/VDB repository to upgrade to."
        },
        "environment_user_id": {
          "type": "string",
          "description": "Reference of the environment user to use for dSource/VDB upgrade."
        }
      },
      "required": [
        "environment_user_id",
        "repository_id"
      ]
    }
  },
  {
    "name": "upgrade_vdb",
    "description": "POST /vdbs/{vdbId}/upgrade",
    "method": "post",
    "path": "/vdbs/{vdbId}/upgrade",
    "parameters": {
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "string",
          "description": "The id of the dSource/VDB repository to upgrade to."
        },
        "environment_user_id": {
          "type": "string",
          "description": "Reference of the environment user to use for dSource/VDB upgrade."
        },
        "ppt_repository": {
          "type": "string",
          "description": "The id of the SQL instance on the PPT environment that we want to use for pre-provisioning (MSSQL only)."
        }
      },
      "required": [
        "repository_id"
      ]
    }
  },
  {
    "name": "get_upgrade_compatible_repo_for_vdb",
    "description": "GET /vdbs/{vdbId}/upgrade_compatible_repositories",
    "method": "get",
    "path": "/vdbs/{vdbId}/upgrade_compatible_repositories",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "verify_vdb_jdbc_connection_string",
    "description": "POST /vdbs/{vdbId}/jdbc-check",
    "method": "post",
    "path": "/vdbs/{vdbId}/jdbc-check",
    "parameters": {
      "type": "object",
      "properties": {
        "database_username": {
          "type": "string",
          "description": "oracle database username."
        },
        "database_password": {
          "type": "string",
          "description": "oracle database password."
        },
        "jdbc_connection_string": {
          "type": "string",
          "description": "Oracle jdbc connection string to validate."
        }
      },
      "required": [
        "jdbc_connection_string",
        "database_username",
        "database_password"
      ]
    }
  },
  {
    "name": "provision_vdb_by_timestamp",
    "description": "POST /vdbs/provision_by_timestamp",
    "method": "post",
    "path": "/vdbs/provision_by_timestamp",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "provision_vdb_by_timestamp_defaults",
    "description": "POST /vdbs/provision_by_timestamp/defaults",
    "method": "post",
    "path": "/vdbs/provision_by_timestamp/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "The point in time from which to execute the operation. Mutually exclusive with timestamp_in_database_timezone. If the timestamp is not set, selects the latest point."
        },
        "timestamp_in_database_timezone": {
          "type": "string",
          "description": "The point in time from which to execute the operation, expressed as a date-time in the timezone of the source database. Mutually exclusive with timestamp."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the Engine onto which to provision. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored."
        },
        "source_data_id": {
          "type": "string",
          "description": "The ID of the source object (dSource or VDB) to provision from. All other objects referenced by the parameters must live on the same engine as the source."
        },
        "timeflow_id": {
          "type": "string",
          "description": "The Timeflow ID."
        }
      },
      "required": [
        "source_data_id"
      ]
    }
  },
  {
    "name": "provision_vdb_by_location",
    "description": "POST /vdbs/provision_by_location",
    "method": "post",
    "path": "/vdbs/provision_by_location",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "provision_vdb_by_location_defaults",
    "description": "POST /vdbs/provision_by_location/defaults",
    "method": "post",
    "path": "/vdbs/provision_by_location/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "source_data_id": {
          "type": "string",
          "description": "The ID of the source object (dSource or VDB) to provision from. All other objects referenced by the parameters must live on the same engine as the source."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the Engine onto which to provision. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored."
        },
        "location": {
          "type": "string",
          "description": "The location to get the defaults from."
        },
        "timeflow_id": {
          "type": "string",
          "description": "ID of the timeflow to provision from."
        }
      },
      "required": []
    }
  },
  {
    "name": "provision_vdb_by_snapshot",
    "description": "POST /vdbs/provision_by_snapshot",
    "method": "post",
    "path": "/vdbs/provision_by_snapshot",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "provision_vdb_by_snapshot_defaults",
    "description": "POST /vdbs/provision_by_snapshot/defaults",
    "method": "post",
    "path": "/vdbs/provision_by_snapshot/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "snapshot_id": {
          "type": "string",
          "description": "The ID of the snapshot from which to execute the operation."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the Engine onto which to provision. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored."
        },
        "source_data_id": {
          "type": "string",
          "description": "The ID of the source object (dSource or VDB) to provision from. If this property is not set, the data_source of the snapshot_id will be used."
        }
      },
      "required": []
    }
  },
  {
    "name": "provision_vdb_from_bookmark",
    "description": "POST /vdbs/provision_from_bookmark",
    "method": "post",
    "path": "/vdbs/provision_from_bookmark",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "provision_vdb_from_bookmark_defaults",
    "description": "POST /vdbs/provision_from_bookmark/defaults",
    "method": "post",
    "path": "/vdbs/provision_from_bookmark/defaults",
    "parameters": {
      "type": "object",
      "properties": {
        "bookmark_id": {
          "type": "string",
          "description": "The ID of the bookmark from which to execute the operation. The bookmark must contain only one VDB."
        }
      },
      "required": [
        "bookmark_id"
      ]
    }
  },
  {
    "name": "oracle_asm_in_place_vdb_export",
    "description": "POST /vdbs/{vdbId}/asm-in-place-export",
    "method": "post",
    "path": "/vdbs/{vdbId}/asm-in-place-export",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_vdb_in_place",
    "description": "POST /vdbs/{vdbId}/in-place-export",
    "method": "post",
    "path": "/vdbs/{vdbId}/in-place-export",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_vdb_to_asm_by_snapshot",
    "description": "POST /vdbs/{vdbId}/asm-export-by-snapshot",
    "method": "post",
    "path": "/vdbs/{vdbId}/asm-export-by-snapshot",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_vdb_to_asm_by_location",
    "description": "POST /vdbs/{vdbId}/asm-export-by-location",
    "method": "post",
    "path": "/vdbs/{vdbId}/asm-export-by-location",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_vdb_to_asm_by_timestamp",
    "description": "POST /vdbs/{vdbId}/asm-export-by-timestamp",
    "method": "post",
    "path": "/vdbs/{vdbId}/asm-export-by-timestamp",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_vdb_from_bookmark",
    "description": "POST /vdbs/{vdbId}/export-from-bookmark",
    "method": "post",
    "path": "/vdbs/{vdbId}/export-from-bookmark",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_vdb_to_asm_by_bookmark",
    "description": "POST /vdbs/{vdbId}/asm-export-from-bookmark",
    "method": "post",
    "path": "/vdbs/{vdbId}/asm-export-from-bookmark",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_vdb_by_timestamp",
    "description": "POST /vdbs/{vdbId}/export-by-timestamp",
    "method": "post",
    "path": "/vdbs/{vdbId}/export-by-timestamp",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_vdb_by_snapshot",
    "description": "POST /vdbs/{vdbId}/export-by-snapshot",
    "method": "post",
    "path": "/vdbs/{vdbId}/export-by-snapshot",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "export_vdb_by_location",
    "description": "POST /vdbs/{vdbId}/export-by-location",
    "method": "post",
    "path": "/vdbs/{vdbId}/export-by-location",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_vdb_groups",
    "description": "GET /vdb-groups",
    "method": "get",
    "path": "/vdb-groups",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_vdb_group",
    "description": "POST /vdb-groups",
    "method": "post",
    "path": "/vdb-groups",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": ""
        },
        "vdb_ids": {
          "type": "array",
          "description": ""
        },
        "vdbs": {
          "type": "array",
          "description": "Dictates order of operations on VDBs. Operations can be performed in parallel <br> for all VDBs or sequentially. Below are possible valid and invalid orderings given an example <br> VDB group with 3 vdbs (A, B, and C).<br> Valid:<br> {\"vdb_id\":\"vdb-1\", \"order\":\"1\"} {\"vdb_id\":\"vdb-2\", order:\"1\"} {vdb_id:\"vdb-3\", order:\"1\"} (parallel)<br> {vdb_id:\"vdb-1\", order:\"1\"} {vdb_id:\"vdb-2\", order:\"2\"} {vdb_id:\"vdb-3\", order:\"3\"} (sequential)<br> Invalid:<br> {vdb_id:\"vdb-1\", order:\"A\"} {vdb_id:\"vdb-2\", order:\"B\"} {vdb_id:\"vdb-3\", order:\"C\"} (sequential)<br><br> In the sequential case the vdbs with priority 1 is the first to be started and the last to<br> be stopped. This value is set on creation of VDB groups."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for VDB Group."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this VDB group must be configured as owner of the VDB group."
        },
        "refresh_immediately": {
          "type": "boolean",
          "description": "If true, VDB Group will be refreshed immediately after creation."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "provision_vdb_group_from_bookmark",
    "description": "POST /vdb-groups/provision_from_bookmark",
    "method": "post",
    "path": "/vdb-groups/provision_from_bookmark",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the created VDB group name."
        },
        "bookmark_id": {
          "type": "string",
          "description": "ID of a bookmark to provision this VDB Group from."
        },
        "provision_parameters": {
          "type": "object",
          "description": "Provision parameters for each of the VDBs which will need to be provisioned. The key must be the vdb_id of the corresponding entry from the bookmark, and the value the provision parameters for the VDB which will be cloned from the bookmark."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for VDB Group."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account provisioning this VDB group must be configured as owner of the VDB group."
        }
      },
      "required": [
        "provision_parameters",
        "name",
        "bookmark_id"
      ]
    }
  },
  {
    "name": "search_vdb_groups",
    "description": "POST /vdb-groups/search",
    "method": "post",
    "path": "/vdb-groups/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vdb_group",
    "description": "GET /vdb-groups/{vdbGroupId}",
    "method": "get",
    "path": "/vdb-groups/{vdbGroupId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_vdb_group",
    "description": "DELETE /vdb-groups/{vdbGroupId}",
    "method": "delete",
    "path": "/vdb-groups/{vdbGroupId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_vdb_group_by_id",
    "description": "PATCH /vdb-groups/{vdbGroupId}",
    "method": "patch",
    "path": "/vdb-groups/{vdbGroupId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the VDB group."
        },
        "vdb_ids": {
          "type": "array",
          "description": ""
        },
        "vdbs": {
          "type": "array",
          "description": "Dictates order of operations on VDBs. Operations can be performed in parallel <br> for all VDBs or sequentially. Below are possible valid and invalid orderings given an example <br> VDB group with 3 vdbs (A, B, and C).<br> Valid:<br> {\"vdb_id\":\"vdb-1\", \"order\":\"1\"} {\"vdb_id\":\"vdb-2\", order:\"1\"} {vdb_id:\"vdb-3\", order:\"1\"} (parallel)<br> {vdb_id:\"vdb-1\", order:\"1\"} {vdb_id:\"vdb-2\", order:\"2\"} {vdb_id:\"vdb-3\", order:\"3\"} (sequential)<br> Invalid:<br> {vdb_id:\"vdb-1\", order:\"A\"} {vdb_id:\"vdb-2\", order:\"B\"} {vdb_id:\"vdb-3\", order:\"C\"} (sequential)<br><br> In the sequential case the vdbs with priority 1 is the first to be started and the last to<br> be stopped. This value is set on creation of VDB groups."
        },
        "refresh_immediately": {
          "type": "boolean",
          "description": "If true, the VDB Group will be refreshed immediately after the update."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vdb_group_vdbs_latest_snapshots",
    "description": "GET /vdb-groups/{vdbGroupId}/latest-snapshots",
    "method": "get",
    "path": "/vdb-groups/{vdbGroupId}/latest-snapshots",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_vdb_group_timestamp_summary",
    "description": "POST /vdb-groups/{vdbGroupId}/timestamp-summary",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/timestamp-summary",
    "parameters": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "description": "The timestamp to get the summary for."
        },
        "vdb_ids": {
          "type": "array",
          "description": "vdb ids for which summary is needed."
        },
        "mode": {
          "type": "string",
          "description": "Refresh Mode either self or parent, if PARENT then VDB Group is refreshed from parent of each VDB, else refreshed from self."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vdb_group_tags",
    "description": "GET /vdb-groups/{vdbGroupId}/tags",
    "method": "get",
    "path": "/vdb-groups/{vdbGroupId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_vdb_groups_tags",
    "description": "POST /vdb-groups/{vdbGroupId}/tags",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_vdb_group_tags",
    "description": "POST /vdb-groups/{vdbGroupId}/tags/delete",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "refresh_vdb_group",
    "description": "This API is marked as deprecated in favour of renamed API '/vdb-groups/{vdbGroupId}/refresh_from_bookmark'",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/refresh",
    "parameters": {
      "type": "object",
      "properties": {
        "bookmark_id": {
          "type": "string",
          "description": "ID of a bookmark to refresh this VDB Group to."
        }
      },
      "required": [
        "bookmark_id"
      ]
    }
  },
  {
    "name": "refresh_vdb_group_from_bookmark",
    "description": "POST /vdb-groups/{vdbGroupId}/refresh_from_bookmark",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/refresh_from_bookmark",
    "parameters": {
      "type": "object",
      "properties": {
        "bookmark_id": {
          "type": "string",
          "description": "ID of a bookmark to refresh this VDB Group to."
        }
      },
      "required": [
        "bookmark_id"
      ]
    }
  },
  {
    "name": "refresh_vdb_group_by_snapshot",
    "description": "POST /vdb-groups/{vdbGroupId}/refresh_by_snapshot",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/refresh_by_snapshot",
    "parameters": {
      "type": "object",
      "properties": {
        "vdb_snapshot_mappings": {
          "type": "array",
          "description": "List of the pair of VDB and snapshot to refresh from. If this is not set, all VDBs will be refreshed from latest snapshot of their parent."
        }
      },
      "required": []
    }
  },
  {
    "name": "refresh_vdb_group_by_timestamp",
    "description": "POST /vdb-groups/{vdbGroupId}/refresh_by_timestamp",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/refresh_by_timestamp",
    "parameters": {
      "type": "object",
      "properties": {
        "vdb_timestamp_mappings": {
          "type": "array",
          "description": "List of the pair of VDB and timestamp to refresh from. If this is not set, all VDBs will be refreshed from latest timestamp of their parent."
        },
        "is_refresh_to_nearest": {
          "type": "boolean",
          "description": "If true, and the provided timestamp is not found for the VDB mapping, the system will attempt to find the nearest previous refresh point."
        }
      },
      "required": []
    }
  },
  {
    "name": "rollback_vdb_group",
    "description": "This API is marked as deprecated in favour of API '/vdb-groups/{vdbGroupId}/refresh_from_bookmark'",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/rollback",
    "parameters": {
      "type": "object",
      "properties": {
        "bookmark_id": {
          "type": "string",
          "description": "ID of a bookmark to rollback this VDB Group to."
        }
      },
      "required": [
        "bookmark_id"
      ]
    }
  },
  {
    "name": "get_bookmarks_by_vdb_group",
    "description": "GET /vdb-groups/{vdbGroupId}/bookmarks",
    "method": "get",
    "path": "/vdb-groups/{vdbGroupId}/bookmarks",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_bookmarks_by_vdb_group",
    "description": "POST /vdb-groups/{vdbGroupId}/bookmarks/search",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/bookmarks/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "lock_vdb_group",
    "description": "POST /vdb-groups/{vdbGroupId}/lock",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/lock",
    "parameters": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "integer",
          "description": "Id of the account on whose behalf this request is being made. Only accounts having LOCK_FOR_OTHER_ACCOUNT permission can lock VDB Groups on behalf of other accounts. If this property is not specified then the account id of the authenticated user making the request is used."
        }
      },
      "required": []
    }
  },
  {
    "name": "unlock_vdb_group",
    "description": "POST /vdb-groups/{vdbGroupId}/unlock",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/unlock",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "start_vdb_group",
    "description": "POST /vdb-groups/{vdbGroupId}/start",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/start",
    "parameters": {
      "type": "object",
      "properties": {
        "vdb_start_param_mappings": {
          "type": "array",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "stop_vdb_group",
    "description": "POST /vdb-groups/{vdbGroupId}/stop",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/stop",
    "parameters": {
      "type": "object",
      "properties": {
        "vdb_stop_param_mappings": {
          "type": "array",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "enable_vdb_group",
    "description": "POST /vdb-groups/{vdbGroupId}/enable",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/enable",
    "parameters": {
      "type": "object",
      "properties": {
        "vdb_enable_param_mappings": {
          "type": "array",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "disable_vdb_group",
    "description": "POST /vdb-groups/{vdbGroupId}/disable",
    "method": "post",
    "path": "/vdb-groups/{vdbGroupId}/disable",
    "parameters": {
      "type": "object",
      "properties": {
        "vdb_disable_param_mappings": {
          "type": "array",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_snapshots",
    "description": "GET /snapshots",
    "method": "get",
    "path": "/snapshots",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_snapshot_by_id",
    "description": "GET /snapshots/{snapshotId}",
    "method": "get",
    "path": "/snapshots/{snapshotId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_snapshot",
    "description": "DELETE /snapshots/{snapshotId}",
    "method": "delete",
    "path": "/snapshots/{snapshotId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_snapshot",
    "description": "PATCH /snapshots/{snapshotId}",
    "method": "patch",
    "path": "/snapshots/{snapshotId}",
    "parameters": {
      "type": "object",
      "properties": {
        "expiration": {
          "type": "string",
          "description": "The expiration for this snapshot. Mutually exclusive with retain_forever."
        },
        "retain_forever": {
          "type": "boolean",
          "description": "Indicates that the snapshot should be retained forever."
        }
      },
      "required": []
    }
  },
  {
    "name": "delete_snapshot_by_id",
    "description": "POST /snapshots/{snapshotId}/delete",
    "method": "post",
    "path": "/snapshots/{snapshotId}/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "delete_all_dependencies": {
          "type": "boolean",
          "description": "Whether to delete the snapshot along with all of its dependencies."
        }
      },
      "required": []
    }
  },
  {
    "name": "unset_snapshot_retention",
    "description": "POST /snapshots/{snapshotId}/unset_expiration",
    "method": "post",
    "path": "/snapshots/{snapshotId}/unset_expiration",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_snapshot_tags",
    "description": "GET /snapshots/{snapshotId}/tags",
    "method": "get",
    "path": "/snapshots/{snapshotId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_snapshot_tags",
    "description": "POST /snapshots/{snapshotId}/tags",
    "method": "post",
    "path": "/snapshots/{snapshotId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_snapshot_tags",
    "description": "POST /snapshots/{snapshotId}/tags/delete",
    "method": "post",
    "path": "/snapshots/{snapshotId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "search_snapshots",
    "description": "POST /snapshots/search",
    "method": "post",
    "path": "/snapshots/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "find_by_location",
    "description": "GET /snapshots/find_by_location",
    "method": "get",
    "path": "/snapshots/find_by_location",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "find_by_timestamp",
    "description": "GET /snapshots/find_by_timestamp",
    "method": "get",
    "path": "/snapshots/find_by_timestamp",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_snapshot_timeflow_range",
    "description": "GET /snapshots/{snapshotId}/timeflow_range",
    "method": "get",
    "path": "/snapshots/{snapshotId}/timeflow_range",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_snapshot_runtime_by_id",
    "description": "GET /snapshots/{snapshotId}/runtime",
    "method": "get",
    "path": "/snapshots/{snapshotId}/runtime",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_snapshots_capacity_data",
    "description": "GET /snapshots/capacity",
    "method": "get",
    "path": "/snapshots/capacity",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_shared_snapshot_space",
    "description": "GET /snapshots/shared-space",
    "method": "get",
    "path": "/snapshots/shared-space",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_snapshot_deletion_dependencies",
    "description": "GET /snapshots/{snapshotId}/deletion-dependencies",
    "method": "get",
    "path": "/snapshots/{snapshotId}/deletion-dependencies",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_timeflows",
    "description": "GET /timeflows",
    "method": "get",
    "path": "/timeflows",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_timeflow_by_id",
    "description": "GET /timeflows/{timeflowId}",
    "method": "get",
    "path": "/timeflows/{timeflowId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_timeflow",
    "description": "DELETE /timeflows/{timeflowId}",
    "method": "delete",
    "path": "/timeflows/{timeflowId}",
    "parameters": {
      "type": "object",
      "properties": {
        "force_delete": {
          "type": "boolean",
          "description": "Whether to delete all the dependent Bookmarks."
        }
      },
      "required": []
    }
  },
  {
    "name": "update_timeflow",
    "description": "PATCH /timeflows/{timeflowId}",
    "method": "patch",
    "path": "/timeflows/{timeflowId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the timeflow."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_timeflow_snapshot_day_range",
    "description": "GET /timeflows/{timeflowId}/timeflowSnapshotDayRange",
    "method": "get",
    "path": "/timeflows/{timeflowId}/timeflowSnapshotDayRange",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_timeflow_tags",
    "description": "GET /timeflows/{timeflowId}/tags",
    "method": "get",
    "path": "/timeflows/{timeflowId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_timeflow_tags",
    "description": "POST /timeflows/{timeflowId}/tags",
    "method": "post",
    "path": "/timeflows/{timeflowId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_timeflow_tags",
    "description": "POST /timeflows/{timeflowId}/tags/delete",
    "method": "post",
    "path": "/timeflows/{timeflowId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "search_timeflows",
    "description": "POST /timeflows/search",
    "method": "post",
    "path": "/timeflows/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "timeflow_repair",
    "description": "POST /timeflows/{timeflowId}/repair",
    "method": "post",
    "path": "/timeflows/{timeflowId}/repair",
    "parameters": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string",
          "description": "Hostname of the remote host."
        },
        "port": {
          "type": "integer",
          "description": "Port to connect to remote host."
        },
        "username": {
          "type": "string",
          "description": "Username to connect to remote host."
        },
        "directory": {
          "type": "string",
          "description": "Location of the missing logs on the host."
        },
        "start_location": {
          "type": "string",
          "description": "The database specific identifier specifying the start location of the missing log."
        },
        "end_location": {
          "type": "string",
          "description": "The database specific identifier specifying the end location of the missing log."
        },
        "use_engine_public_key": {
          "type": "boolean",
          "description": "Whether to use public key authentication."
        },
        "password": {
          "type": "string",
          "description": "The password of the user to connect to remote host machine."
        },
        "key_pair_private_key": {
          "type": "string",
          "description": "The private key of the key pair credentials."
        },
        "key_pair_public_key": {
          "type": "string",
          "description": "The public key of the key pair credentials."
        },
        "vault_id": {
          "type": "string",
          "description": "The DCT id or name of the vault from which to read the host credentials."
        },
        "hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "hashicorp_vault_username_key": {
          "type": "string",
          "description": "Key for the username in the key-value store."
        },
        "hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Key for the password in the key-value store."
        },
        "azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "use_kerberos_authentication": {
          "type": "boolean",
          "description": "Whether to use kerberos authentication."
        },
        "sshVerificationStrategy": {
          "type": "string",
          "description": "Mechanism to use for ssh host verification."
        }
      },
      "required": [
        "username",
        "host",
        "start_location",
        "end_location",
        "directory"
      ]
    }
  },
  {
    "name": "get_environments",
    "description": "GET /environments",
    "method": "get",
    "path": "/environments",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_environment",
    "description": "POST /environments",
    "method": "post",
    "path": "/environments",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the environment."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the Engine onto which to create the environment."
        },
        "os_name": {
          "type": "string",
          "description": "Operating system type of the environment."
        },
        "is_cluster": {
          "type": "boolean",
          "description": "Whether the environment to be created is a cluster."
        },
        "cluster_home": {
          "type": "string",
          "description": "Absolute path to cluster home drectory. This parameter is mandatory for UNIX cluster environments."
        },
        "hostname": {
          "type": "string",
          "description": "host address of the machine."
        },
        "staging_environment": {
          "type": "string",
          "description": "Id of the connector environment which is used to connect to this source environment. This is mandatory parameter when creating Windows source environments."
        },
        "connector_port": {
          "type": "integer",
          "description": "Specify port on which Delphix connector will run. This is mandatory parameter when creating Windows target environments."
        },
        "connector_authentication_key": {
          "type": "string",
          "description": "Unique per Delphix key used to authenticate with the remote Delphix Connector."
        },
        "is_target": {
          "type": "boolean",
          "description": "Whether the environment to be created is a target cluster environment. This property is used only when creating Windows cluster environments."
        },
        "ssh_port": {
          "type": "integer",
          "description": "ssh port of the host."
        },
        "toolkit_path": {
          "type": "string",
          "description": "The path for the toolkit that resides on the host."
        },
        "username": {
          "type": "string",
          "description": "Username of the OS."
        },
        "password": {
          "type": "string",
          "description": "Password of the OS."
        },
        "vault": {
          "type": "string",
          "description": "The name or reference of the vault from which to read the host credentials."
        },
        "vault_username": {
          "type": "string",
          "description": "Delphix display name for the vault user"
        },
        "hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "hashicorp_vault_username_key": {
          "type": "string",
          "description": "Key for the username in the key-value store."
        },
        "hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Key for the password in the key-value store."
        },
        "cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name."
        },
        "azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store."
        },
        "azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store."
        },
        "use_kerberos_authentication": {
          "type": "boolean",
          "description": "Whether to use kerberos authentication."
        },
        "use_engine_public_key": {
          "type": "boolean",
          "description": "Whether to use public key authentication."
        },
        "nfs_addresses": {
          "type": "array",
          "description": "array of ip address or hostnames"
        },
        "ase_db_vault_username": {
          "type": "string",
          "description": "Delphix display name for the vault user"
        },
        "ase_db_username": {
          "type": "string",
          "description": "username of the SAP ASE database."
        },
        "ase_db_password": {
          "type": "string",
          "description": "password of the SAP ASE database."
        },
        "ase_db_vault": {
          "type": "string",
          "description": "The name or reference of the vault from which to read the ASE database credentials."
        },
        "ase_db_hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "ase_db_hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "ase_db_hashicorp_vault_username_key": {
          "type": "string",
          "description": "Key for the username in the key-value store."
        },
        "ase_db_hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Key for the password in the key-value store."
        },
        "ase_db_cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "ase_db_use_kerberos_authentication": {
          "type": "boolean",
          "description": "Whether to use kerberos authentication for ASE DB discovery."
        },
        "ase_db_azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name."
        },
        "ase_db_azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store."
        },
        "ase_db_azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store."
        },
        "java_home": {
          "type": "string",
          "description": "The path to the user managed Java Development Kit (JDK). If not specified, then the OpenJDK will be used."
        },
        "dsp_keystore_path": {
          "type": "string",
          "description": "DSP keystore path."
        },
        "dsp_keystore_password": {
          "type": "string",
          "description": "DSP keystore password."
        },
        "dsp_keystore_alias": {
          "type": "string",
          "description": "DSP keystore alias."
        },
        "dsp_truststore_path": {
          "type": "string",
          "description": "DSP truststore path."
        },
        "dsp_truststore_password": {
          "type": "string",
          "description": "DSP truststore password."
        },
        "description": {
          "type": "string",
          "description": "The environment description."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for this environment."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this environment must be configured as owner of the environment."
        }
      },
      "required": [
        "hostname",
        "engine_id",
        "os_name"
      ]
    }
  },
  {
    "name": "compatible_repositories_by_snapshot",
    "description": "POST /environments/compatible_repositories_by_snapshot",
    "method": "post",
    "path": "/environments/compatible_repositories_by_snapshot",
    "parameters": {
      "type": "object",
      "properties": {
        "source_data_id": {
          "type": "string",
          "description": "The ID of the source object (dSource or VDB) to get the compatible repos. All other objects referenced by the parameters must live on the same engine as the source."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the Engine from where to get the compatible repos. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored."
        },
        "snapshot_id": {
          "type": "string",
          "description": "The ID of the snapshot from which to execute the operation."
        },
        "environment_id": {
          "type": "string",
          "description": "The ID or name of the target environment."
        }
      },
      "required": []
    }
  },
  {
    "name": "compatible_repositories_by_timestamp",
    "description": "POST /environments/compatible_repositories_by_timestamp",
    "method": "post",
    "path": "/environments/compatible_repositories_by_timestamp",
    "parameters": {
      "type": "object",
      "properties": {
        "source_data_id": {
          "type": "string",
          "description": "The ID of the source object (dSource or VDB) to get the compatible repos. All other objects referenced by the parameters must live on the same engine as the source."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the Engine from where to get the compatible repos. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored."
        },
        "timestamp": {
          "type": "string",
          "description": "The point in time from which to execute the operation. If the timestamp is not set, selects the latest point."
        },
        "timeflow_id": {
          "type": "string",
          "description": "ID of the timeflow from which compatible repos need to be fetched, mutually exclusive with source_data_id."
        },
        "environment_id": {
          "type": "string",
          "description": "The ID or name of the target environment."
        }
      },
      "required": []
    }
  },
  {
    "name": "compatible_repositories_from_bookmark",
    "description": "POST /environments/compatible_repositories_from_bookmark",
    "method": "post",
    "path": "/environments/compatible_repositories_from_bookmark",
    "parameters": {
      "type": "object",
      "properties": {
        "bookmark_id": {
          "type": "string",
          "description": "The ID of the bookmark from which to execute the operation. The bookmark must contain only one VDB."
        },
        "environment_id": {
          "type": "string",
          "description": "The ID or name of the target environment."
        }
      },
      "required": [
        "bookmark_id"
      ]
    }
  },
  {
    "name": "compatible_repositories_by_location",
    "description": "POST /environments/compatible_repositories_by_location",
    "method": "post",
    "path": "/environments/compatible_repositories_by_location",
    "parameters": {
      "type": "object",
      "properties": {
        "source_data_id": {
          "type": "string",
          "description": "The ID of the source object (dSource or VDB) to get the compatible repos. All other objects referenced by the parameters must live on the same engine as the source."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the Engine from where to get the compatible repos. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored."
        },
        "location": {
          "type": "string",
          "description": "location from where compatible repo to be fetched."
        },
        "timeflow_id": {
          "type": "string",
          "description": "ID of the timeflow from which compatible repos need to be fetched."
        },
        "environment_id": {
          "type": "string",
          "description": "The ID or name of the target environment."
        }
      },
      "required": []
    }
  },
  {
    "name": "delete_repository",
    "description": "DELETE /environments/{environmentId}/repository/{repositoryId}",
    "method": "delete",
    "path": "/environments/{environmentId}/repository/{repositoryId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_repository",
    "description": "PATCH /environments/{environmentId}/repository/{repositoryId}",
    "method": "patch",
    "path": "/environments/{environmentId}/repository/{repositoryId}",
    "parameters": {
      "type": "object",
      "properties": {
        "allow_provisioning": {
          "type": "boolean",
          "description": "Flag indicating whether the repository should be used for provisioning."
        },
        "is_staging": {
          "type": "boolean",
          "description": "Flag indicating whether this repository can be used by the Delphix Engine for internal processing."
        },
        "version": {
          "type": "string",
          "description": "Version of the repository."
        },
        "oracle_base": {
          "type": "string",
          "description": "The Oracle base where database binaries are located."
        },
        "bits": {
          "type": "integer",
          "description": "32 or 64 bits."
        }
      },
      "required": [
        "database_type"
      ]
    }
  },
  {
    "name": "create_repository",
    "description": "POST /environments/{environmentId}/repository",
    "method": "post",
    "path": "/environments/{environmentId}/repository",
    "parameters": {
      "type": "object",
      "properties": {
        "database_type": {
          "type": "string",
          "description": "The database type of this repository."
        },
        "bits": {
          "type": "integer",
          "description": "32 or 64 bits."
        },
        "installation_home": {
          "type": "string",
          "description": "The Oracle install or SQL Server instance home."
        },
        "version": {
          "type": "string",
          "description": "Version of the oracle repository or SQL Server instance."
        },
        "oracle_base": {
          "type": "string",
          "description": "The Oracle base where database binaries are located."
        },
        "allow_provisioning": {
          "type": "boolean",
          "description": "Flag indicating whether the repository should be used for provisioning."
        },
        "is_staging": {
          "type": "boolean",
          "description": "Flag indicating whether this repository can be used by the Delphix Engine for internal processing."
        },
        "applied_patches": {
          "type": "array",
          "description": "List of Oracle patches that have been applied to this Oracle Home."
        },
        "full_text_installed": {
          "type": "boolean",
          "description": "This property determines if the full-text search and semantic search is installed or not (MSSql only)."
        },
        "server_name": {
          "type": "string",
          "description": "The Server Name of the SQL Server instance."
        },
        "port": {
          "type": "integer",
          "description": "The network port for connecting to the SQL Server instance."
        },
        "instance_owner": {
          "type": "string",
          "description": "Account the SQL Server instance is running as."
        },
        "instance_name": {
          "type": "string",
          "description": "The name of the SQL Server instance."
        }
      },
      "required": [
        "database_type"
      ]
    }
  },
  {
    "name": "create_host",
    "description": "POST /environments/{environmentId}/hosts",
    "method": "post",
    "path": "/environments/{environmentId}/hosts",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name to associate with the host."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname or IP address of this host."
        },
        "nfs_addresses": {
          "type": "array",
          "description": "The list of host/IP addresses to use for NFS export."
        },
        "ssh_port": {
          "type": "integer",
          "description": "The port number used to connect to the host via SSH."
        },
        "privilege_elevation_profile_reference": {
          "type": "string",
          "description": "Reference to a profile for escalating user privileges."
        },
        "dsp_keystore_alias": {
          "type": "string",
          "description": "The lowercase alias to use inside the user managed DSP keystore."
        },
        "dsp_keystore_password": {
          "type": "string",
          "description": "The password for the user managed DSP keystore."
        },
        "dsp_keystore_path": {
          "type": "string",
          "description": "The path to the user managed DSP keystore."
        },
        "dsp_truststore_password": {
          "type": "string",
          "description": "The password for the user managed DSP truststore."
        },
        "dsp_truststore_path": {
          "type": "string",
          "description": "The path to the user managed DSP truststore."
        },
        "java_home": {
          "type": "string",
          "description": "The path to the user managed Java Development Kit (JDK). If not specified, then the OpenJDK will be used."
        },
        "toolkit_path": {
          "type": "string",
          "description": "The path for the toolkit that resides on the host."
        },
        "oracle_jdbc_keystore_password": {
          "type": "string",
          "description": "The password for the user managed Oracle JDBC keystore."
        },
        "oracle_tde_keystores_root_path": {
          "type": "string",
          "description": "The path to the root of the Oracle TDE keystores artifact directories."
        },
        "ssh_verification_strategy": {
          "type": "string",
          "description": "Mechanism to use for ssh host verification."
        },
        "oracle_cluster_node_virtual_ips": {
          "type": "array",
          "description": "The Virtual IP addresses associated with the OracleClusterNode."
        }
      },
      "required": [
        "address"
      ]
    }
  },
  {
    "name": "delete_host",
    "description": "DELETE /environments/{environmentId}/hosts/{hostId}",
    "method": "delete",
    "path": "/environments/{environmentId}/hosts/{hostId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_host",
    "description": "PATCH /environments/{environmentId}/hosts/{hostId}",
    "method": "patch",
    "path": "/environments/{environmentId}/hosts/{hostId}",
    "parameters": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "host address of the machine."
        },
        "oracle_cluster_node_name": {
          "type": "string",
          "description": "The name of the associated OracleClusterNode."
        },
        "oracle_cluster_node_enabled": {
          "type": "boolean",
          "description": "Whether the associated OracleClusterNode is enabled."
        },
        "oracle_cluster_node_virtual_ips": {
          "type": "array",
          "description": "The Virtual IP addresses associated with the OracleClusterNode."
        },
        "nfs_addresses": {
          "type": "array",
          "description": "array of ip addresses or hostnames"
        },
        "ssh_port": {
          "type": "integer",
          "description": "ssh port of the host."
        },
        "toolkit_path": {
          "type": "string",
          "description": "The path for the toolkit that resides on the host."
        },
        "java_home": {
          "type": "string",
          "description": "The path to the user managed Java Development Kit (JDK). If not specified, then the OpenJDK will be used."
        },
        "dsp_keystore_path": {
          "type": "string",
          "description": "DSP keystore path."
        },
        "dsp_keystore_password": {
          "type": "string",
          "description": "DSP keystore password."
        },
        "dsp_keystore_alias": {
          "type": "string",
          "description": "DSP keystore alias."
        },
        "dsp_truststore_path": {
          "type": "string",
          "description": "DSP truststore path."
        },
        "dsp_truststore_password": {
          "type": "string",
          "description": "DSP truststore password."
        },
        "connector_port": {
          "type": "integer",
          "description": "Specify port on which Delphix connector will run."
        },
        "oracle_jdbc_keystore_password": {
          "type": "string",
          "description": "The password for the user managed Oracle JDBC keystore."
        },
        "oracle_tde_keystores_root_path": {
          "type": "string",
          "description": "The path to the root of the Oracle TDE keystores artifact directories."
        },
        "ssh_verification_strategy": {
          "type": "string",
          "description": "Mechanism to use for ssh host verification."
        },
        "connector_authentication_key": {
          "type": "string",
          "description": "Unique per Delphix key used to authenticate with the remote Delphix Connector."
        },
        "oracle_tde_okv_home_path": {
          "type": "string",
          "description": "The path to the Oracle Key Vault library installation on the database node."
        },
        "oracle_tde_external_key_manager_credential": {
          "type": "string",
          "description": "The credential of the tde keystore external keys management system like Oracle Key Vault or Hardware Security Module."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_tags_environment",
    "description": "GET /environments/{environmentId}/tags",
    "method": "get",
    "path": "/environments/{environmentId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_environment_tags",
    "description": "POST /environments/{environmentId}/tags",
    "method": "post",
    "path": "/environments/{environmentId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_environment_tags",
    "description": "POST /environments/{environmentId}/tags/delete",
    "method": "post",
    "path": "/environments/{environmentId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_environment_by_id",
    "description": "GET /environments/{environmentId}",
    "method": "get",
    "path": "/environments/{environmentId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_environment",
    "description": "DELETE /environments/{environmentId}",
    "method": "delete",
    "path": "/environments/{environmentId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_environment",
    "description": "PATCH /environments/{environmentId}",
    "method": "patch",
    "path": "/environments/{environmentId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the environment."
        },
        "staging_environment": {
          "type": "string",
          "description": "Id of the connector environment which is used to connect to this source environment."
        },
        "cluster_address": {
          "type": "string",
          "description": "Address of the cluster. This property can be modified for Windows cluster only."
        },
        "cluster_home": {
          "type": "string",
          "description": "Absolute path to cluster home directory. This parameter is for UNIX cluster environments."
        },
        "ase_db_username": {
          "type": "string",
          "description": "username of the SAP ASE database."
        },
        "ase_db_password": {
          "type": "string",
          "description": "password of the SAP ASE database."
        },
        "ase_db_vault": {
          "type": "string",
          "description": "The name or reference of the vault from which to read the ASE database credentials."
        },
        "ase_db_vault_username": {
          "type": "string",
          "description": "Delphix display name for the vault user"
        },
        "ase_db_hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "ase_db_hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "ase_db_hashicorp_vault_username_key": {
          "type": "string",
          "description": "Key for the username in the key-value store."
        },
        "ase_db_hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Key for the password in the key-value store."
        },
        "ase_db_cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "ase_db_azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name."
        },
        "ase_db_azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store."
        },
        "ase_db_azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store."
        },
        "ase_db_use_kerberos_authentication": {
          "type": "boolean",
          "description": "Whether to use kerberos authentication for ASE DB discovery."
        },
        "encryption_enabled": {
          "type": "boolean",
          "description": "Flag indicating whether the data transfer is encrypted or not."
        },
        "description": {
          "type": "string",
          "description": "The environment description."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_environments",
    "description": "POST /environments/search",
    "method": "post",
    "path": "/environments/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "enable_environment",
    "description": "POST /environments/{environmentId}/enable",
    "method": "post",
    "path": "/environments/{environmentId}/enable",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "disable_environment",
    "description": "POST /environments/{environmentId}/disable",
    "method": "post",
    "path": "/environments/{environmentId}/disable",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "refresh_environment",
    "description": "POST /environments/{environmentId}/refresh",
    "method": "post",
    "path": "/environments/{environmentId}/refresh",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "list_environment_users",
    "description": "GET /environments/{environmentId}/users",
    "method": "get",
    "path": "/environments/{environmentId}/users",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_environment_user",
    "description": "POST /environments/{environmentId}/users",
    "method": "post",
    "path": "/environments/{environmentId}/users",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the OS."
        },
        "password": {
          "type": "string",
          "description": "Password of the OS."
        },
        "vault": {
          "type": "string",
          "description": "The name or reference of the vault from which to read the host credentials."
        },
        "vault_username": {
          "type": "string",
          "description": "Delphix display name for the vault user"
        },
        "hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "hashicorp_vault_username_key": {
          "type": "string",
          "description": "Key for the username in the key-value store."
        },
        "hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Key for the password in the key-value store."
        },
        "cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name."
        },
        "azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store."
        },
        "azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store."
        },
        "use_kerberos_authentication": {
          "type": "boolean",
          "description": "Whether to use kerberos authentication."
        },
        "use_engine_public_key": {
          "type": "boolean",
          "description": "Whether to use public key authentication."
        }
      },
      "required": []
    }
  },
  {
    "name": "update_environment_user",
    "description": "PUT /environments/{environmentId}/users/{userRef}",
    "method": "put",
    "path": "/environments/{environmentId}/users/{userRef}",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the OS."
        },
        "password": {
          "type": "string",
          "description": "Password of the OS."
        },
        "vault": {
          "type": "string",
          "description": "The name or reference of the vault from which to read the host credentials."
        },
        "vault_username": {
          "type": "string",
          "description": "Delphix display name for the vault user"
        },
        "hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "hashicorp_vault_username_key": {
          "type": "string",
          "description": "Key for the username in the key-value store."
        },
        "hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Key for the password in the key-value store."
        },
        "cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name."
        },
        "azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store."
        },
        "azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store."
        },
        "use_kerberos_authentication": {
          "type": "boolean",
          "description": "Whether to use kerberos authentication."
        },
        "use_engine_public_key": {
          "type": "boolean",
          "description": "Whether to use public key authentication."
        }
      },
      "required": []
    }
  },
  {
    "name": "delete_environment_user",
    "description": "DELETE /environments/{environmentId}/users/{userRef}",
    "method": "delete",
    "path": "/environments/{environmentId}/users/{userRef}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "primary_environment_user",
    "description": "POST /environments/{environmentId}/users/{userRef}/primary",
    "method": "post",
    "path": "/environments/{environmentId}/users/{userRef}/primary",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_oracle_listener",
    "description": "POST /environments/{environmentId}/listeners",
    "method": "post",
    "path": "/environments/{environmentId}/listeners",
    "parameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the Oracle listener."
        },
        "protocol_addresses": {
          "type": "array",
          "description": "The protocol addresses of the Oracle listener."
        },
        "host_id": {
          "type": "string",
          "description": "The id of the host on which the Oracle listener runs."
        }
      },
      "required": [
        "type"
      ]
    }
  },
  {
    "name": "delete_oracle_listener",
    "description": "DELETE /environments/{environmentId}/listeners/{listenerId}",
    "method": "delete",
    "path": "/environments/{environmentId}/listeners/{listenerId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_oracle_listener",
    "description": "PATCH /environments/{environmentId}/listeners/{listenerId}",
    "method": "patch",
    "path": "/environments/{environmentId}/listeners/{listenerId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the Oracle listener."
        },
        "protocol_addresses": {
          "type": "array",
          "description": "The protocol addresses of the Oracle listener."
        }
      },
      "required": []
    }
  },
  {
    "name": "validate_java_path",
    "description": "POST /management/engines/{engineId}/validate/java-path",
    "method": "post",
    "path": "/management/engines/{engineId}/validate/java-path",
    "parameters": {
      "type": "object",
      "properties": {
        "java_home": {
          "type": "string",
          "description": "Path pointing to java home on the remote machine."
        },
        "port": {
          "type": "integer",
          "description": "SSH port of the remote host machine that will be used to establish SSH connection."
        },
        "username": {
          "type": "string",
          "description": "The username of the user that will be used to connect to the remote host machine."
        },
        "password": {
          "type": "string",
          "description": "The password of the user that will be used to connect to the remote host machine."
        },
        "host_name": {
          "type": "string",
          "description": "Hostname of the remote host machine that will be used to establish connection."
        },
        "use_engine_public_key": {
          "type": "boolean",
          "description": "Whether to use public key authentication."
        },
        "vault_id": {
          "type": "string",
          "description": "The DCT id or name of the vault from which to read the host credentials."
        },
        "hashicorp_vault_engine": {
          "type": "string",
          "description": "Vault engine name where the credential is stored."
        },
        "hashicorp_vault_secret_path": {
          "type": "string",
          "description": "Path in the vault engine where the credential is stored."
        },
        "hashicorp_vault_username_key": {
          "type": "string",
          "description": "Key for the username in the key-value store."
        },
        "hashicorp_vault_secret_key": {
          "type": "string",
          "description": "Key for the password in the key-value store."
        },
        "azure_vault_name": {
          "type": "string",
          "description": "Azure key vault name (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "azure_vault_username_key": {
          "type": "string",
          "description": "Azure vault key for the username in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "azure_vault_secret_key": {
          "type": "string",
          "description": "Azure vault key for the password in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only)."
        },
        "cyberark_vault_query_string": {
          "type": "string",
          "description": "Query to find a credential in the CyberArk vault."
        },
        "use_kerberos_authentication": {
          "type": "boolean",
          "description": "Whether to use kerberos authentication."
        }
      },
      "required": [
        "port",
        "java_home",
        "host_name"
      ]
    }
  },
  {
    "name": "get_historical_storage_summary_aggregate",
    "description": "GET /historical-storage-summary-aggregate",
    "method": "get",
    "path": "/historical-storage-summary-aggregate",
    "parameters": {
      "type": "object",
      "properties": {
        "start_date": {
          "type": "string",
          "description": "Report start date/time. Defaults to first API request."
        },
        "end_date": {
          "type": "string",
          "description": "Report end date/time. Defaults to current time."
        },
        "include_projection": {
          "type": "boolean",
          "description": "Whether to compute a projection of future storage usage."
        },
        "engine_ids": {
          "type": "array",
          "description": "The list of engine ids to aggregate data for. By default aggregating data for all engines."
        },
        "dsource_ids": {
          "type": "array",
          "description": "The list of dSource ids to aggregate data for. By default aggregating data for all dSources."
        },
        "vdb_ids": {
          "type": "array",
          "description": "The list of VDB ids to aggregate data for. By default aggregating data for all VDBs."
        },
        "cdb_ids": {
          "type": "array",
          "description": "The list of CDB ids to aggregate data for. By default aggregating data for all CDBs."
        },
        "vcdb_ids": {
          "type": "array",
          "description": "The list of VCDB ids to aggregate data for. By default aggregating data for all VCDBs."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_historical_storage_summary_by_engine",
    "description": "GET /historical-storage-summary-by-engine",
    "method": "get",
    "path": "/historical-storage-summary-by-engine",
    "parameters": {
      "type": "object",
      "properties": {
        "start_date": {
          "type": "string",
          "description": "Report start date/time. Defaults to first API request."
        },
        "end_date": {
          "type": "string",
          "description": "Report end date/time. Defaults to current time."
        },
        "include_projection": {
          "type": "boolean",
          "description": "Whether to compute a projection of future storage usage."
        },
        "engine_ids": {
          "type": "array",
          "description": "The list of engine ids to include in the response. By default returning data for all engines."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_storage_savings_summary_report",
    "description": "POST /reporting/storage-savings-report/search",
    "method": "post",
    "path": "/reporting/storage-savings-report/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vdb_inventory_report",
    "description": "GET /reporting/vdb-inventory-report",
    "method": "get",
    "path": "/reporting/vdb-inventory-report",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_vdb_inventory_report",
    "description": "POST /reporting/vdb-inventory-report/search",
    "method": "post",
    "path": "/reporting/vdb-inventory-report/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_dsource_usage_report",
    "description": "GET /reporting/dsource-usage-report",
    "method": "get",
    "path": "/reporting/dsource-usage-report",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_dsource_usage_report",
    "description": "POST /reporting/dsource-usage-report/search",
    "method": "post",
    "path": "/reporting/dsource-usage-report/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_dsource_consumption_report",
    "description": "GET /reporting/dsource-consumption-report",
    "method": "get",
    "path": "/reporting/dsource-consumption-report",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_dsource_consumption_report",
    "description": "POST /reporting/dsource-consumption-report/search",
    "method": "post",
    "path": "/reporting/dsource-consumption-report/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_storage_capacity_data",
    "description": "GET /reporting/storage-capacity-data-report",
    "method": "get",
    "path": "/reporting/storage-capacity-data-report",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": "ID of a registered engine."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_storage_capacity_data",
    "description": "POST /reporting/storage-capacity-data-report/search",
    "method": "post",
    "path": "/reporting/storage-capacity-data-report/search",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": "ID of a registered engine."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "search_dataset_performance_analytics_summary",
    "description": "POST /reporting/dataset-performance-analytics-summary/search",
    "method": "post",
    "path": "/reporting/dataset-performance-analytics-summary/search",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": "ID of a registered engine."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "engine_id"
      ]
    }
  },
  {
    "name": "get_dataset_performance_analytics",
    "description": "POST /reporting/dataset-performance-analytics",
    "method": "post",
    "path": "/reporting/dataset-performance-analytics",
    "parameters": {
      "type": "object",
      "properties": {
        "dataset_ids": {
          "type": "array",
          "description": "List of dataset ids for which dataset performance analytics should be fetched."
        },
        "start": {
          "type": "string",
          "description": "Start time in UTC from which to fetch analytics data."
        },
        "end": {
          "type": "string",
          "description": "End time in UTC up to which analytics data will be fetched."
        },
        "interval": {
          "type": "integer",
          "description": "Desired time interval in timestamp format."
        }
      },
      "required": [
        "interval",
        "dataset_ids",
        "end",
        "start"
      ]
    }
  },
  {
    "name": "get_database_templates",
    "description": "GET /database-templates",
    "method": "get",
    "path": "/database-templates",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_database_template",
    "description": "POST /database-templates",
    "method": "post",
    "path": "/database-templates",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The DatabaseTemplate name."
        },
        "description": {
          "type": "string",
          "description": "User provided description for this template."
        },
        "source_type": {
          "type": "string",
          "description": "The type of the source associated with the template."
        },
        "parameters": {
          "type": "object",
          "description": "A name/value map of string configuration parameters."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this database template must be configured as owner of the database template."
        },
        "tags": {
          "type": "array",
          "description": ""
        }
      },
      "required": [
        "source_type",
        "name"
      ]
    }
  },
  {
    "name": "get_database_template_by_id",
    "description": "GET /database-templates/{databaseTemplateId}",
    "method": "get",
    "path": "/database-templates/{databaseTemplateId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_database_template",
    "description": "DELETE /database-templates/{databaseTemplateId}",
    "method": "delete",
    "path": "/database-templates/{databaseTemplateId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_database_template",
    "description": "PATCH /database-templates/{databaseTemplateId}",
    "method": "patch",
    "path": "/database-templates/{databaseTemplateId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The DatabaseTemplate name."
        },
        "description": {
          "type": "string",
          "description": "User provided description for this template."
        },
        "source_type": {
          "type": "string",
          "description": "The type of the source associated with the template."
        },
        "parameters": {
          "type": "object",
          "description": "A name/value map of string configuration parameters."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_database_template_tags",
    "description": "GET /database-templates/{databaseTemplateId}/tags",
    "method": "get",
    "path": "/database-templates/{databaseTemplateId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_database_template_tags",
    "description": "POST /database-templates/{databaseTemplateId}/tags",
    "method": "post",
    "path": "/database-templates/{databaseTemplateId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_database_template_tag",
    "description": "POST /database-templates/{databaseTemplateId}/tags/delete",
    "method": "post",
    "path": "/database-templates/{databaseTemplateId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "search_database_templates",
    "description": "POST /database-templates/search",
    "method": "post",
    "path": "/database-templates/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "import_database_templates",
    "description": "POST /database-templates/import",
    "method": "post",
    "path": "/database-templates/import",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "undo_import_database_templates",
    "description": "POST /database-templates/undo-import",
    "method": "post",
    "path": "/database-templates/undo-import",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_cdbs",
    "description": "GET /cdbs",
    "method": "get",
    "path": "/cdbs",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_cdbs",
    "description": "POST /cdbs/search",
    "method": "post",
    "path": "/cdbs/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_cdb_by_id",
    "description": "GET /cdbs/{cdbId}",
    "method": "get",
    "path": "/cdbs/{cdbId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_cdb",
    "description": "PATCH /cdbs/{cdbId}",
    "method": "patch",
    "path": "/cdbs/{cdbId}",
    "parameters": {
      "type": "object",
      "properties": {
        "oracle_services": {
          "type": "array",
          "description": "List of jdbc connection strings which are used to connect with the database."
        },
        "logsync_enabled": {
          "type": "boolean",
          "description": "True if LogSync is enabled for this CDB."
        },
        "logsync_mode": {
          "type": "string",
          "description": "LogSync operation mode for this dSource."
        },
        "logsync_interval": {
          "type": "integer",
          "description": "Interval between LogSync requests, in seconds."
        },
        "tde_keystore_password": {
          "type": "string",
          "description": "For a CDB using software keystore, this is the password of the software keystore used by this database. For a CDB using OKV, this is the password for the endpoint provided during the installation of the Oracle Key Vault client library (i.e., okvclient.jar) on the host where this database runs. For a CDB using HSM, this is the credential of the external key manager which is managing master encryption keys of this database."
        },
        "tde_keystore_config_type": {
          "type": "string",
          "description": "Oracle TDE keystore configuration type."
        }
      },
      "required": []
    }
  },
  {
    "name": "update_cdb_by_id",
    "description": "PATCH /cdbs/{cdbId}/update",
    "method": "patch",
    "path": "/cdbs/{cdbId}/update",
    "parameters": {
      "type": "object",
      "properties": {
        "oracle_services": {
          "type": "array",
          "description": "List of jdbc connection strings which are used to connect with the database."
        },
        "logsync_enabled": {
          "type": "boolean",
          "description": "True if LogSync is enabled for this CDB."
        },
        "logsync_mode": {
          "type": "string",
          "description": "LogSync operation mode for this dSource."
        },
        "logsync_interval": {
          "type": "integer",
          "description": "Interval between LogSync requests, in seconds."
        },
        "tde_keystore_password": {
          "type": "string",
          "description": "For a CDB using software keystore, this is the password of the software keystore used by this database. For a CDB using OKV, this is the password for the endpoint provided during the installation of the Oracle Key Vault client library (i.e., okvclient.jar) on the host where this database runs. For a CDB using HSM, this is the credential of the external key manager which is managing master encryption keys of this database."
        },
        "tde_keystore_config_type": {
          "type": "string",
          "description": "Oracle TDE keystore configuration type."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_tags_cdb",
    "description": "GET /cdbs/{cdbId}/tags",
    "method": "get",
    "path": "/cdbs/{cdbId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_cdb_tags",
    "description": "POST /cdbs/{cdbId}/tags",
    "method": "post",
    "path": "/cdbs/{cdbId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_cdb_tags",
    "description": "POST /cdbs/{cdbId}/tags/delete",
    "method": "post",
    "path": "/cdbs/{cdbId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "enable_cdb",
    "description": "POST /cdbs/{cdbId}/enable",
    "method": "post",
    "path": "/cdbs/{cdbId}/enable",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_start": {
          "type": "boolean",
          "description": "Whether to attempt a startup of the CDB after the enable."
        }
      },
      "required": []
    }
  },
  {
    "name": "disable_cdb",
    "description": "POST /cdbs/{cdbId}/disable",
    "method": "post",
    "path": "/cdbs/{cdbId}/disable",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_cleanup": {
          "type": "boolean",
          "description": "Whether to attempt a cleanup of the CDB before the disable."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_cdb_deletion_dependencies",
    "description": "GET /cdbs/{cdbId}/deletion-dependencies",
    "method": "get",
    "path": "/cdbs/{cdbId}/deletion-dependencies",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_cdb",
    "description": "POST /cdbs/{cdbId}/delete",
    "method": "post",
    "path": "/cdbs/{cdbId}/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "force": {
          "type": "boolean",
          "description": "Whether to continue the operation upon failures."
        },
        "delete_all_dependent_datasets": {
          "type": "boolean",
          "description": "Whether to delete all dependent datasets of the CDB."
        }
      },
      "required": []
    }
  },
  {
    "name": "upgrade_cdb",
    "description": "POST /cdbs/{cdbId}/upgrade",
    "method": "post",
    "path": "/cdbs/{cdbId}/upgrade",
    "parameters": {
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "string",
          "description": "The id of the CDB/vCDB repository to upgrade to."
        },
        "environment_user_id": {
          "type": "string",
          "description": "Reference of the environment user to use for CDB/vCDB upgrade."
        }
      },
      "required": [
        "environment_user_id",
        "repository_id"
      ]
    }
  },
  {
    "name": "detach_cdb",
    "description": "POST /cdbs/{cdbId}/detachSource",
    "method": "post",
    "path": "/cdbs/{cdbId}/detachSource",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "attach_cdb",
    "description": "POST /cdbs/{cdbId}/attachSource",
    "method": "post",
    "path": "/cdbs/{cdbId}/attachSource",
    "parameters": {
      "type": "object",
      "properties": {
        "dsource_id": {
          "type": "string",
          "description": "Id of the dsource to attach."
        }
      },
      "required": [
        "dsource_id"
      ]
    }
  },
  {
    "name": "verify_cdb_jdbc_connection_string",
    "description": "POST /cdbs/{cdbId}/jdbc-check",
    "method": "post",
    "path": "/cdbs/{cdbId}/jdbc-check",
    "parameters": {
      "type": "object",
      "properties": {
        "database_username": {
          "type": "string",
          "description": "oracle database username."
        },
        "database_password": {
          "type": "string",
          "description": "oracle database password."
        },
        "jdbc_connection_string": {
          "type": "string",
          "description": "Oracle jdbc connection string to validate."
        }
      },
      "required": [
        "jdbc_connection_string",
        "database_username",
        "database_password"
      ]
    }
  },
  {
    "name": "get_vcdbs",
    "description": "GET /vcdbs",
    "method": "get",
    "path": "/vcdbs",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_vcdbs",
    "description": "POST /vcdbs/search",
    "method": "post",
    "path": "/vcdbs/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vcdb_by_id",
    "description": "GET /vcdbs/{vcdbId}",
    "method": "get",
    "path": "/vcdbs/{vcdbId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_vcdb",
    "description": "PATCH /vcdbs/{vcdbId}",
    "method": "patch",
    "path": "/vcdbs/{vcdbId}",
    "parameters": {
      "type": "object",
      "properties": {
        "oracle_services": {
          "type": "array",
          "description": "List of jdbc connection strings which are used to connect with the database."
        },
        "instances": {
          "type": "array",
          "description": "The instances of this RAC database."
        },
        "node_listeners": {
          "type": "array",
          "description": "The list of node listener ids for this VCDB."
        },
        "invoke_datapatch": {
          "type": "boolean",
          "description": "Indicates whether datapatch should be invoked."
        },
        "tde_keystore_password": {
          "type": "string",
          "description": "For a vCDB using software keystore, this is the password of the software keystore used by this database. For a vCDB using OKV, this is the password for the endpoint provided during the installation of the Oracle Key Vault client library (i.e., okvclient.jar) on the host where this database runs. For a vCDB using HSM, this is the credential of the external key manager which is managing master encryption keys of this database."
        },
        "tde_keystore_config_type": {
          "type": "string",
          "description": "Oracle TDE keystore configuration type."
        },
        "tde_key_identifier": {
          "type": "string",
          "description": "The master encryption key id of this database."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_tags_vcdb",
    "description": "GET /vcdbs/{vcdbId}/tags",
    "method": "get",
    "path": "/vcdbs/{vcdbId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_vcdb_tags",
    "description": "POST /vcdbs/{vcdbId}/tags",
    "method": "post",
    "path": "/vcdbs/{vcdbId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_vcdb_tags",
    "description": "POST /vcdbs/{vcdbId}/tags/delete",
    "method": "post",
    "path": "/vcdbs/{vcdbId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "enable_vcdb",
    "description": "POST /vcdbs/{vcdbId}/enable",
    "method": "post",
    "path": "/vcdbs/{vcdbId}/enable",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_start": {
          "type": "boolean",
          "description": "Whether to attempt a startup of the vCDB after the enable."
        }
      },
      "required": []
    }
  },
  {
    "name": "disable_vcdb",
    "description": "POST /vcdbs/{vcdbId}/disable",
    "method": "post",
    "path": "/vcdbs/{vcdbId}/disable",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_cleanup": {
          "type": "boolean",
          "description": "Whether to attempt a cleanup of the vCDB before the disable."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_vcdb_deletion_dependencies",
    "description": "GET /vcdbs/{vcdbId}/deletion-dependencies",
    "method": "get",
    "path": "/vcdbs/{vcdbId}/deletion-dependencies",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_vcdb",
    "description": "POST /vcdbs/{vcdbId}/delete",
    "method": "post",
    "path": "/vcdbs/{vcdbId}/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "force": {
          "type": "boolean",
          "description": "Whether to continue the operation upon failures."
        },
        "delete_all_dependent_datasets": {
          "type": "boolean",
          "description": "Whether to delete all dependent datasets of the CDB."
        }
      },
      "required": []
    }
  },
  {
    "name": "update_vcdb_by_id",
    "description": "PATCH /vcdbs/{vcdbId}/update",
    "method": "patch",
    "path": "/vcdbs/{vcdbId}/update",
    "parameters": {
      "type": "object",
      "properties": {
        "oracle_services": {
          "type": "array",
          "description": "List of jdbc connection strings which are used to connect with the database."
        },
        "instances": {
          "type": "array",
          "description": "The instances of this RAC database."
        },
        "node_listeners": {
          "type": "array",
          "description": "The list of node listener ids for this VCDB."
        },
        "invoke_datapatch": {
          "type": "boolean",
          "description": "Indicates whether datapatch should be invoked."
        },
        "tde_keystore_password": {
          "type": "string",
          "description": "For a vCDB using software keystore, this is the password of the software keystore used by this database. For a vCDB using OKV, this is the password for the endpoint provided during the installation of the Oracle Key Vault client library (i.e., okvclient.jar) on the host where this database runs. For a vCDB using HSM, this is the credential of the external key manager which is managing master encryption keys of this database."
        },
        "tde_keystore_config_type": {
          "type": "string",
          "description": "Oracle TDE keystore configuration type."
        },
        "tde_key_identifier": {
          "type": "string",
          "description": "The master encryption key id of this database."
        }
      },
      "required": []
    }
  },
  {
    "name": "start_vcdb",
    "description": "POST /vcdbs/{vcdbId}/start",
    "method": "post",
    "path": "/vcdbs/{vcdbId}/start",
    "parameters": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "description": "List of specific Virtual Container Database Instances to start."
        }
      },
      "required": []
    }
  },
  {
    "name": "stop_vcdb",
    "description": "POST /vcdbs/{vcdbId}/stop",
    "method": "post",
    "path": "/vcdbs/{vcdbId}/stop",
    "parameters": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "description": "List of specific Virtual Container Database Instances to stop."
        },
        "abort": {
          "type": "boolean",
          "description": "Whether to issue 'shutdown abort' to shutdown Virtual Container DB instances."
        }
      },
      "required": []
    }
  },
  {
    "name": "upgrade_vcdb",
    "description": "POST /vcdbs/{vcdbId}/upgrade",
    "method": "post",
    "path": "/vcdbs/{vcdbId}/upgrade",
    "parameters": {
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "string",
          "description": "The id of the CDB/vCDB repository to upgrade to."
        },
        "environment_user_id": {
          "type": "string",
          "description": "Reference of the environment user to use for CDB/vCDB upgrade."
        }
      },
      "required": [
        "environment_user_id",
        "repository_id"
      ]
    }
  },
  {
    "name": "verify_vcdb_jdbc_connection_string",
    "description": "POST /vcdbs/{vcdbId}/jdbc-check",
    "method": "post",
    "path": "/vcdbs/{vcdbId}/jdbc-check",
    "parameters": {
      "type": "object",
      "properties": {
        "database_username": {
          "type": "string",
          "description": "oracle database username."
        },
        "database_password": {
          "type": "string",
          "description": "oracle database password."
        },
        "jdbc_connection_string": {
          "type": "string",
          "description": "Oracle jdbc connection string to validate."
        }
      },
      "required": [
        "jdbc_connection_string",
        "database_username",
        "database_password"
      ]
    }
  },
  {
    "name": "list_virtualization_policies",
    "description": "GET /virtualization-policies",
    "method": "get",
    "path": "/virtualization-policies",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_virtualization_policy",
    "description": "POST /virtualization-policies",
    "method": "post",
    "path": "/virtualization-policies",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the virtualization policy."
        },
        "policy_type": {
          "type": "string",
          "description": "The type of a virtualization policy."
        },
        "policy_targets": {
          "type": "array",
          "description": "The target objects that will have this policy applied to them upon creation of the policy."
        },
        "provision_source": {
          "type": "string",
          "description": "The source of the data to provision from [Refresh Policy]."
        },
        "timezone_id": {
          "type": "string",
          "description": "The timezone to use for scheduling."
        },
        "data_duration": {
          "type": "integer",
          "description": "Amount of time to keep source data [Retention Policy]."
        },
        "data_unit": {
          "type": "string",
          "description": "Time unit for data_duration [Retention Policy]."
        },
        "log_duration": {
          "type": "integer",
          "description": "Amount of time to keep log data [Retention Policy]."
        },
        "log_unit": {
          "type": "string",
          "description": "Time unit for log_duration [Retention Policy]."
        },
        "num_of_daily": {
          "type": "integer",
          "description": "Number of daily snapshots to keep [Retention Policy]."
        },
        "num_of_weekly": {
          "type": "integer",
          "description": "Number of weekly snapshots to keep [Retention Policy]."
        },
        "day_of_week": {
          "type": "string",
          "description": "Day of week upon which to enforce weekly snapshot retention [Retention Policy]."
        },
        "num_of_monthly": {
          "type": "integer",
          "description": "Number of monthly snapshots to keep [Retention Policy]."
        },
        "day_of_month": {
          "type": "integer",
          "description": "Day of month upon which to enforce monthly snapshot retention [Retention Policy]."
        },
        "num_of_yearly": {
          "type": "integer",
          "description": "Number of yearly snapshots to keep [Retention Policy]."
        },
        "day_of_year": {
          "type": "string",
          "description": "Day of year upon which to enforce yearly snapshot retention, expressed a month / day string (e.g., \"Jan 1\") [Retention Policy]."
        },
        "schedules": {
          "type": "array",
          "description": "The schedules for this policy."
        },
        "size": {
          "type": "integer",
          "description": "Size of the quota, in bytes. [Quota Policy]."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for the policy."
        }
      },
      "required": [
        "name",
        "policy_type"
      ]
    }
  },
  {
    "name": "search_virtualization_policies",
    "description": "POST /virtualization-policies/search",
    "method": "post",
    "path": "/virtualization-policies/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "search_virtualization_policy_targets",
    "description": "POST /virtualization-policies/targets/search",
    "method": "post",
    "path": "/virtualization-policies/targets/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_virtualization_policy_by_id",
    "description": "GET /virtualization-policies/{policyId}",
    "method": "get",
    "path": "/virtualization-policies/{policyId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_virtualization_policy",
    "description": "DELETE /virtualization-policies/{policyId}",
    "method": "delete",
    "path": "/virtualization-policies/{policyId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_virtualization_policy",
    "description": "PATCH /virtualization-policies/{policyId}",
    "method": "patch",
    "path": "/virtualization-policies/{policyId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the virtualization policy."
        },
        "timezone_id": {
          "type": "string",
          "description": "The timezone to use for scheduling."
        },
        "data_duration": {
          "type": "integer",
          "description": "Amount of time to keep source data [Retention Policy]."
        },
        "data_unit": {
          "type": "string",
          "description": "Time unit for data_duration [Retention Policy]."
        },
        "log_duration": {
          "type": "integer",
          "description": "Amount of time to keep log data [Retention Policy]."
        },
        "log_unit": {
          "type": "string",
          "description": "Time unit for log_duration [Retention Policy]."
        },
        "num_of_daily": {
          "type": "integer",
          "description": "Number of daily snapshots to keep [Retention Policy]."
        },
        "num_of_weekly": {
          "type": "integer",
          "description": "Number of weekly snapshots to keep [Retention Policy]."
        },
        "day_of_week": {
          "type": "string",
          "description": "Day of week upon which to enforce weekly snapshot retention [Retention Policy]."
        },
        "num_of_monthly": {
          "type": "integer",
          "description": "Number of monthly snapshots to keep [Retention Policy]."
        },
        "day_of_month": {
          "type": "integer",
          "description": "Day of month upon which to enforce monthly snapshot retention [Retention Policy]."
        },
        "num_of_yearly": {
          "type": "integer",
          "description": "Number of yearly snapshots to keep [Retention Policy]."
        },
        "day_of_year": {
          "type": "string",
          "description": "Day of year upon which to enforce yearly snapshot retention, expressed a month / day string (e.g., \"Jan 1\") [Retention Policy]."
        },
        "schedules": {
          "type": "array",
          "description": "The schedules for this policy."
        },
        "size": {
          "type": "integer",
          "description": "Size of the quota, in bytes. (QUOTA_POLICY only)."
        }
      },
      "required": []
    }
  },
  {
    "name": "convert_virtualization_policy",
    "description": "POST /virtualization-policies/{policyId}/convert",
    "method": "post",
    "path": "/virtualization-policies/{policyId}/convert",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_virtualization_policy_tags",
    "description": "GET /virtualization-policies/{policyId}/tags",
    "method": "get",
    "path": "/virtualization-policies/{policyId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_virtualization_policy_tags",
    "description": "POST /virtualization-policies/{policyId}/tags",
    "method": "post",
    "path": "/virtualization-policies/{policyId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_virtualization_policy_tags",
    "description": "POST /virtualization-policies/{policyId}/tags/delete",
    "method": "post",
    "path": "/virtualization-policies/{policyId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "apply_virtualization_policy_by_id_or_name",
    "description": "POST /virtualization-policies/{policyId}/apply",
    "method": "post",
    "path": "/virtualization-policies/{policyId}/apply",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "unapply_virtualization_policy_by_id_or_name",
    "description": "POST /virtualization-policies/{policyId}/unapply",
    "method": "post",
    "path": "/virtualization-policies/{policyId}/unapply",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_replication_profiles",
    "description": "GET /replication-profiles",
    "method": "get",
    "path": "/replication-profiles",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_replication_profile",
    "description": "POST /replication-profiles",
    "method": "post",
    "path": "/replication-profiles",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The ReplicationProfile name."
        },
        "replication_mode": {
          "type": "string",
          "description": "The ReplicationProfile mode."
        },
        "engine_id": {
          "type": "string",
          "description": "The ID of the engine that the ReplicationProfile belongs to."
        },
        "target_engine_id": {
          "type": "string",
          "description": "The ID of the replication target engine."
        },
        "target_host": {
          "type": "string",
          "description": "Hostname of the replication target engine. If none is provided, the hostname for the engine referenced by target_engine_id will be used."
        },
        "target_port": {
          "type": "integer",
          "description": "Target TCP port number for the Delphix Session Protocol."
        },
        "description": {
          "type": "string",
          "description": "The ReplicationProfile description."
        },
        "schedule": {
          "type": "string",
          "description": "Replication schedule in the form of a quartz-formatted string."
        },
        "tags": {
          "type": "array",
          "description": "The tags that are applied to this ReplicationProfile."
        },
        "enable_tag_replication": {
          "type": "boolean",
          "description": "Indicates whether tag replication from primary object to replica object is enabled or disabled for this ReplicationProfile."
        },
        "bandwidth_limit": {
          "type": "integer",
          "description": "Bandwidth limit (MB/s) for replication network traffic. A value of 0 means no limit."
        },
        "number_of_connections": {
          "type": "integer",
          "description": "Total number of transport connections to use."
        },
        "encrypted": {
          "type": "boolean",
          "description": "Encrypt replication network traffic."
        },
        "automatic_replication": {
          "type": "boolean",
          "description": "Indication whether the replication spec schedule is enabled or not."
        },
        "use_system_socks_setting": {
          "type": "boolean",
          "description": "Connect to the replication target host via the system-wide SOCKS proxy."
        },
        "vdb_ids": {
          "type": "array",
          "description": "The VDBs that are replicated by this ReplicationProfile."
        },
        "dsource_ids": {
          "type": "array",
          "description": "The dSources that are replicated by this ReplicationProfile."
        },
        "cdb_ids": {
          "type": "array",
          "description": "The CDBs that are replicated by this ReplicationProfile."
        },
        "vcdb_ids": {
          "type": "array",
          "description": "The vCDBs that are replicated by this ReplicationProfile."
        },
        "group_ids": {
          "type": "array",
          "description": "The groups that are replicated by this ReplicationProfile."
        },
        "replicate_entire_engine": {
          "type": "boolean",
          "description": "Whether to replicate the entire engine. This is mutually exclusive with the vdb_ids, dsource_ids, cdb_ids, vcdb_ids, and group_ids properties."
        }
      },
      "required": [
        "engine_id",
        "replication_mode",
        "target_engine_id"
      ]
    }
  },
  {
    "name": "search_replication_profiles",
    "description": "POST /replication-profiles/search",
    "method": "post",
    "path": "/replication-profiles/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "migrate_rerun",
    "description": "POST /migrate-job/re-run",
    "method": "post",
    "path": "/migrate-job/re-run",
    "parameters": {
      "type": "object",
      "properties": {
        "job_type": {
          "type": "string",
          "description": "Job name to rerun."
        }
      },
      "required": [
        "job_type"
      ]
    }
  },
  {
    "name": "get_virtualization_job_history",
    "description": "GET /virtualization-jobs/history",
    "method": "get",
    "path": "/virtualization-jobs/history",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "object_id": {
          "type": "string",
          "description": "The object id to filter by."
        },
        "object_type": {
          "type": "string",
          "description": "The object type to filter by."
        },
        "job_type": {
          "type": "string",
          "description": "The job type to filter by."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_virtualization_job_history",
    "description": "POST /virtualization-jobs/history/search",
    "method": "post",
    "path": "/virtualization-jobs/history/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_virtualization_action_history",
    "description": "GET /virtualization-actions/history",
    "method": "get",
    "path": "/virtualization-actions/history",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_virtualization_action_history",
    "description": "POST /virtualization-actions/history/search",
    "method": "post",
    "path": "/virtualization-actions/history/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "execute_replication_profile",
    "description": "POST /replication-profiles/{replicationProfileId}/execute",
    "method": "post",
    "path": "/replication-profiles/{replicationProfileId}/execute",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_replication_profile_by_id",
    "description": "GET /replication-profiles/{replicationProfileId}",
    "method": "get",
    "path": "/replication-profiles/{replicationProfileId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_replication_profile",
    "description": "DELETE /replication-profiles/{replicationProfileId}",
    "method": "delete",
    "path": "/replication-profiles/{replicationProfileId}",
    "parameters": {
      "type": "object",
      "properties": {
        "replicationProfileId": {
          "type": "string",
          "description": "The ID of the ReplicationProfile."
        }
      },
      "required": [
        "replicationProfileId"
      ]
    }
  },
  {
    "name": "update_replication_profile",
    "description": "PATCH /replication-profiles/{replicationProfileId}",
    "method": "patch",
    "path": "/replication-profiles/{replicationProfileId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The ReplicationProfile name."
        },
        "description": {
          "type": "string",
          "description": "The ReplicationProfile description."
        },
        "target_engine_id": {
          "type": "string",
          "description": "The ID of the replication target engine."
        },
        "target_host": {
          "type": "string",
          "description": "Hostname of the replication target engine. If none is provided and the target_engine_id is set, the hostname for the engine referenced by target_engine_id will be used."
        },
        "target_port": {
          "type": "integer",
          "description": "Target TCP port number for the Delphix Session Protocol."
        },
        "replication_mode": {
          "type": "string",
          "description": "The ReplicationProfile mode."
        },
        "schedule": {
          "type": "string",
          "description": "Replication schedule in the form of a quartz-formatted string."
        },
        "vdb_ids": {
          "type": "array",
          "description": "The VDBs that are replicated by this ReplicationProfile."
        },
        "dsource_ids": {
          "type": "array",
          "description": "The dSources that are replicated by this ReplicationProfile."
        },
        "cdb_ids": {
          "type": "array",
          "description": "The CDBs that are replicated by this ReplicationProfile."
        },
        "vcdb_ids": {
          "type": "array",
          "description": "The vCDBs that are replicated by this ReplicationProfile."
        },
        "group_ids": {
          "type": "array",
          "description": "The groups that are replicated by this ReplicationProfile."
        },
        "enable_tag_replication": {
          "type": "boolean",
          "description": "Indicates whether tag replication from primary object to replica object is enabled or disabled for this ReplicationProfile."
        },
        "replicate_entire_engine": {
          "type": "boolean",
          "description": "Whether to replicate the entire engine. This is mutually exclusive with the vdb_ids, dsource_ids, cdb_ids, vcdb_ids, and group_ids properties."
        },
        "bandwidth_limit": {
          "type": "integer",
          "description": "Bandwidth limit (MB/s) for replication network traffic. A value of 0 means no limit."
        },
        "number_of_connections": {
          "type": "integer",
          "description": "Total number of transport connections to use."
        },
        "encrypted": {
          "type": "boolean",
          "description": "Encrypt replication network traffic."
        },
        "automatic_replication": {
          "type": "boolean",
          "description": "Indication whether the replication spec schedule is enabled or not."
        },
        "use_system_socks_setting": {
          "type": "boolean",
          "description": "Connect to the replication target host via the system-wide SOCKS proxy."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_replication_profile_tags",
    "description": "GET /replication-profiles/{replicationProfileId}/tags",
    "method": "get",
    "path": "/replication-profiles/{replicationProfileId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_replication_profile_tags",
    "description": "POST /replication-profiles/{replicationProfileId}/tags",
    "method": "post",
    "path": "/replication-profiles/{replicationProfileId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_replication_profile_tags",
    "description": "POST /replication-profiles/{replicationProfileId}/tags/delete",
    "method": "post",
    "path": "/replication-profiles/{replicationProfileId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "enable_tag_replication",
    "description": "POST /replication-profiles/{replicationProfileId}/enable-tag-replication",
    "method": "post",
    "path": "/replication-profiles/{replicationProfileId}/enable-tag-replication",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "disable_tag_replication",
    "description": "POST /replication-profiles/{replicationProfileId}/disable-tag-replication",
    "method": "post",
    "path": "/replication-profiles/{replicationProfileId}/disable-tag-replication",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "list_namespaces",
    "description": "GET /namespaces",
    "method": "get",
    "path": "/namespaces",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_namespaces",
    "description": "POST /namespaces/search",
    "method": "post",
    "path": "/namespaces/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_namespace_by_id",
    "description": "GET /namespace/{namespaceId}",
    "method": "get",
    "path": "/namespace/{namespaceId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_namespace",
    "description": "DELETE /namespace/{namespaceId}",
    "method": "delete",
    "path": "/namespace/{namespaceId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_namespace",
    "description": "PATCH /namespace/{namespaceId}",
    "method": "patch",
    "path": "/namespace/{namespaceId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The Namespace name."
        },
        "description": {
          "type": "string",
          "description": "The description of the namespace."
        }
      },
      "required": []
    }
  },
  {
    "name": "failover_namespace",
    "description": "POST /namespace/{namespaceId}/failover",
    "method": "post",
    "path": "/namespace/{namespaceId}/failover",
    "parameters": {
      "type": "object",
      "properties": {
        "enable_failback": {
          "type": "boolean",
          "description": "Whether to enable failback for the datasets being failed over."
        }
      },
      "required": []
    }
  },
  {
    "name": "commit_failover_namespace",
    "description": "POST /namespace/{namespaceId}/commitFailover",
    "method": "post",
    "path": "/namespace/{namespaceId}/commitFailover",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "failback_namespace",
    "description": "POST /namespace/{namespaceId}/failback",
    "method": "post",
    "path": "/namespace/{namespaceId}/failback",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "discard_namespace",
    "description": "POST /namespace/{namespaceId}/discard",
    "method": "post",
    "path": "/namespace/{namespaceId}/discard",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_virtualization_alerts_history",
    "description": "GET /virtualization-alerts/history",
    "method": "get",
    "path": "/virtualization-alerts/history",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_virtualization_alerts_history",
    "description": "POST /virtualization-alerts/history/search",
    "method": "post",
    "path": "/virtualization-alerts/history/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_virtualization_faults_history",
    "description": "GET /virtualization-faults/history",
    "method": "get",
    "path": "/virtualization-faults/history",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_virtualization_faults_history",
    "description": "POST /virtualization-faults/history/search",
    "method": "post",
    "path": "/virtualization-faults/history/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "resolve_or_ignore_virtualization_faults",
    "description": "POST /virtualization-faults/resolveOrIgnore",
    "method": "post",
    "path": "/virtualization-faults/resolveOrIgnore",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": "The ID of the engine that the faults belong to."
        },
        "ignore": {
          "type": "boolean",
          "description": "Flag indicating whether to ignore the selected faults if they are detected on the same objects in the future."
        },
        "fault_ids": {
          "type": "array",
          "description": "The IDs of the faults to resolve or ignore."
        }
      },
      "required": []
    }
  },
  {
    "name": "resolve_all_virtualization_faults",
    "description": "POST /virtualization-faults/{engineId}/resolveAll",
    "method": "post",
    "path": "/virtualization-faults/{engineId}/resolveAll",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "resolve_virtualization_fault",
    "description": "POST /virtualization-fault/{faultId}/resolve",
    "method": "post",
    "path": "/virtualization-fault/{faultId}/resolve",
    "parameters": {
      "type": "object",
      "properties": {
        "ignore": {
          "type": "boolean",
          "description": "Flag indicating whether to ignore this fault if it is detected on the same object in the future."
        },
        "resolution_comments": {
          "type": "string",
          "description": "The comments describing the steps taken to resolve a fault."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_heldspace_deletion_dependencies",
    "description": "GET /heldspace/{heldspaceId}/deletion-dependencies",
    "method": "get",
    "path": "/heldspace/{heldspaceId}/deletion-dependencies",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_heldspace_by_id",
    "description": "POST /heldspace/{heldspaceId}/delete",
    "method": "post",
    "path": "/heldspace/{heldspaceId}/delete",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "list_hook_templates",
    "description": "GET /hook-templates",
    "method": "get",
    "path": "/hook-templates",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_hook_template",
    "description": "POST /hook-templates",
    "method": "post",
    "path": "/hook-templates",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the hook template."
        },
        "description": {
          "type": "string",
          "description": "Description of the hook template."
        },
        "shell": {
          "type": "string",
          "description": ""
        },
        "command": {
          "type": "string",
          "description": ""
        },
        "credentials_env_vars": {
          "type": "array",
          "description": "List of environment variables that will contain credentials for this operation."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for the hook template."
        }
      },
      "required": [
        "name",
        "command"
      ]
    }
  },
  {
    "name": "get_hook_template_by_id",
    "description": "GET /hook-templates/{hookTemplateId}",
    "method": "get",
    "path": "/hook-templates/{hookTemplateId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_hook_template",
    "description": "DELETE /hook-templates/{hookTemplateId}",
    "method": "delete",
    "path": "/hook-templates/{hookTemplateId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_hook_template",
    "description": "PATCH /hook-templates/{hookTemplateId}",
    "method": "patch",
    "path": "/hook-templates/{hookTemplateId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the hook template."
        },
        "description": {
          "type": "string",
          "description": "Description of the hook template."
        },
        "shell": {
          "type": "string",
          "description": ""
        },
        "command": {
          "type": "string",
          "description": ""
        },
        "credentials_env_vars": {
          "type": "array",
          "description": "List of environment variables that will contain credentials for this operation."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_hook_templates",
    "description": "POST /hook-templates/search",
    "method": "post",
    "path": "/hook-templates/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hook_template_tags",
    "description": "GET /hook-templates/{hookTemplateId}/tags",
    "method": "get",
    "path": "/hook-templates/{hookTemplateId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_hook_template_tags",
    "description": "POST /hook-templates/{hookTemplateId}/tags",
    "method": "post",
    "path": "/hook-templates/{hookTemplateId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_hook_template_tags",
    "description": "POST /hook-templates/{hookTemplateId}/tags/delete",
    "method": "post",
    "path": "/hook-templates/{hookTemplateId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_registered_engines",
    "description": "GET /management/engines",
    "method": "get",
    "path": "/management/engines",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "register_engine",
    "description": "POST /management/engines",
    "method": "post",
    "path": "/management/engines",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": ""
        },
        "hostname": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The virtualization domain admin username."
        },
        "password": {
          "type": "string",
          "description": "The virtualization domain admin password."
        },
        "masking_username": {
          "type": "string",
          "description": "The masking admin username."
        },
        "masking_password": {
          "type": "string",
          "description": "The masking admin password."
        },
        "hashicorp_vault_username_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the virtualzation username for the engine."
        },
        "hashicorp_vault_masking_username_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the masking username for the engine."
        },
        "hashicorp_vault_password_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the virtualization password for the engine."
        },
        "hashicorp_vault_masking_password_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the masking password for the engine."
        },
        "hashicorp_vault_id": {
          "type": "integer",
          "description": "Reference to the Hashicorp vault to use to retrieve virtualization engine credentials."
        },
        "masking_hashicorp_vault_id": {
          "type": "integer",
          "description": "Reference to the Hashicorp vault to use to retrieve masking engine credentials."
        },
        "insecure_ssl": {
          "type": "boolean",
          "description": "Allow connections to the engine over HTTPs without validating the TLS certificate. Even though\nthe connection to the engine might be performed over HTTPs, setting this property eliminates\nthe protection against a man-in-the-middle attach for connections to this engine. Instead,\nconsider configuring DCT with Certificate Authority certificates..\n"
        },
        "unsafe_ssl_hostname_check": {
          "type": "boolean",
          "description": "Ignore validation of the name associated to the TLS certificate when connecting to the engine over HTTPs.\nSetting this value must only be done if the TLS certificate of the engine does not match the hostname,\nand the TLS configuration of the engine cannot be fixed. Setting this property reduces the protection\nagainst a man-in-the-middle attack for connections to this engine.\nThis is ignored if insecure_ssl is set.\n"
        },
        "auto_tagging_config": {
          "type": "object",
          "description": "Configuration settings for auto tagging."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for this engine."
        }
      },
      "required": [
        "hostname",
        "name"
      ]
    }
  },
  {
    "name": "get_jobs",
    "description": "GET /jobs",
    "method": "get",
    "path": "/jobs",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_jobs",
    "description": "POST /jobs/search",
    "method": "post",
    "path": "/jobs/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_job_by_id",
    "description": "GET /jobs/{jobId}",
    "method": "get",
    "path": "/jobs/{jobId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "abandon_job",
    "description": "Abandoning a job means that the system will no longer track ongoing progress. The system will not attempt to stop the process in any way. The job will be moved to the ABANDONED terminal state.\n",
    "method": "post",
    "path": "/jobs/{jobId}/abandon",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_job_result",
    "description": "Get job result.",
    "method": "get",
    "path": "/jobs/{jobId}/result",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_job_tags",
    "description": "GET /jobs/{jobId}/tags",
    "method": "get",
    "path": "/jobs/{jobId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_job_tags",
    "description": "POST /jobs/{jobId}/tags",
    "method": "post",
    "path": "/jobs/{jobId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_job_tag",
    "description": "POST /jobs/{jobId}/tags/delete",
    "method": "post",
    "path": "/jobs/{jobId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_registered_engine",
    "description": "GET /management/engines/{engineId}",
    "method": "get",
    "path": "/management/engines/{engineId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_registered_engine",
    "description": "PUT /management/engines/{engineId}",
    "method": "put",
    "path": "/management/engines/{engineId}",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Engine object entity ID."
        },
        "uuid": {
          "type": "string",
          "description": "The unique identifier generated by this engine."
        },
        "type": {
          "type": "string",
          "description": "The type of this engine."
        },
        "version": {
          "type": "string",
          "description": "The engine version."
        },
        "name": {
          "type": "string",
          "description": "The name of this engine."
        },
        "ssh_public_key": {
          "type": "string",
          "description": "The ssh public key of this engine."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of this engine."
        },
        "cpu_core_count": {
          "type": "integer",
          "description": "The total number of CPU cores on this engine."
        },
        "memory_size": {
          "type": "integer",
          "description": "The total amount of memory on this engine, in bytes."
        },
        "data_storage_capacity": {
          "type": "integer",
          "description": "The total amount of storage allocated for engine objects and system metadata, in bytes."
        },
        "data_storage_used": {
          "type": "integer",
          "description": "The amount of storage used by engine objects and system metadata, in bytes."
        },
        "insecure_ssl": {
          "type": "boolean",
          "description": "Allow connections to the engine over HTTPs without validating the TLS certificate. Even though\nthe connection to the engine might be performed over HTTPs, setting this property eliminates\nthe protection against a man-in-the-middle attach for connections to this engine. Instead,\nconsider configuring DCT with Certificate Authority certificates.\n"
        },
        "unsafe_ssl_hostname_check": {
          "type": "boolean",
          "description": "Ignore validation of the name associated to the TLS certificate when connecting to the engine over HTTPs.\nSetting this value must only be done if the TLS certificate of the engine does not match the hostname,\nand the TLS configuration of the engine cannot be fixed. Setting this property reduces the protection\nagainst a man-in-the-middle attack for connections to this engine.\nThis is ignored if insecure_ssl is set.\n"
        },
        "status": {
          "type": "string",
          "description": "the status of the engine\n"
        },
        "connection_status": {
          "type": "string",
          "description": "The status of the connection to the engine. Deprecated; use \"engine_connection_status\" instead."
        },
        "engine_connection_status": {
          "type": "string",
          "description": "The state of the connection to the engine."
        },
        "connection_status_details": {
          "type": "string",
          "description": "If set, details about the status of the connection to the engine. Deprecated; use \"engine_connection_status_details\" instead."
        },
        "engine_connection_status_details": {
          "type": "string",
          "description": "If set, details about the state of the connection to the engine."
        },
        "username": {
          "type": "string",
          "description": "The virtualization domain admin username."
        },
        "password": {
          "type": "string",
          "description": "The virtualization domain admin password."
        },
        "masking_username": {
          "type": "string",
          "description": "The masking admin username."
        },
        "masking_password": {
          "type": "string",
          "description": "The masking admin password."
        },
        "hashicorp_vault_username_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the virtualization username for the engine."
        },
        "hashicorp_vault_masking_username_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the masking username for the engine."
        },
        "hashicorp_vault_password_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the virtualization password for the engine."
        },
        "hashicorp_vault_masking_password_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the masking password for the engine."
        },
        "masking_hashicorp_vault_id": {
          "type": "integer",
          "description": "Reference to the Hashicorp vault to use to retrieve masking engine credentials."
        },
        "hashicorp_vault_id": {
          "type": "integer",
          "description": "Reference to the Hashicorp vault to use to retrieve virtualization engine credentials."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for this engine."
        },
        "masking_memory_used": {
          "type": "integer",
          "description": "The current amount of memory used by running masking jobs in bytes."
        },
        "masking_allocated_memory": {
          "type": "integer",
          "description": "The maximum amount of memory available for running masking jobs in bytes."
        },
        "masking_jobs_running": {
          "type": "integer",
          "description": "The number of masking jobs currently running."
        },
        "masking_max_concurrent_jobs": {
          "type": "integer",
          "description": "The maximum number of masking jobs that can be running at the same time."
        },
        "masking_available_cores": {
          "type": "integer",
          "description": "The number of CPU cores available to the masking engine."
        },
        "hyperscale_instance_ids": {
          "type": "array",
          "description": "List of Hyperscale Instances that this engine is connected to."
        },
        "hyperscale_truststore_filename": {
          "type": "string",
          "description": "File name of a truststore which can be used to validate the TLS certificate of the engine as expected by associated hyperscale instances.\n"
        },
        "hyperscale_truststore_password": {
          "type": "string",
          "description": "Password to read the truststore as expected by associated hyperscale instances.\n"
        }
      },
      "required": []
    }
  },
  {
    "name": "unregister_engine",
    "description": "DELETE /management/engines/{engineId}",
    "method": "delete",
    "path": "/management/engines/{engineId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_registered_engine_partial",
    "description": "PATCH /management/engines/{engineId}",
    "method": "patch",
    "path": "/management/engines/{engineId}",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Engine object entity ID."
        },
        "uuid": {
          "type": "string",
          "description": "The unique identifier generated by this engine."
        },
        "type": {
          "type": "string",
          "description": "The type of this engine."
        },
        "version": {
          "type": "string",
          "description": "The engine version."
        },
        "name": {
          "type": "string",
          "description": "The name of this engine."
        },
        "ssh_public_key": {
          "type": "string",
          "description": "The ssh public key of this engine."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of this engine."
        },
        "cpu_core_count": {
          "type": "integer",
          "description": "The total number of CPU cores on this engine."
        },
        "memory_size": {
          "type": "integer",
          "description": "The total amount of memory on this engine, in bytes."
        },
        "data_storage_capacity": {
          "type": "integer",
          "description": "The total amount of storage allocated for engine objects and system metadata, in bytes."
        },
        "data_storage_used": {
          "type": "integer",
          "description": "The amount of storage used by engine objects and system metadata, in bytes."
        },
        "insecure_ssl": {
          "type": "boolean",
          "description": "Allow connections to the engine over HTTPs without validating the TLS certificate. Even though\nthe connection to the engine might be performed over HTTPs, setting this property eliminates\nthe protection against a man-in-the-middle attach for connections to this engine. Instead,\nconsider configuring DCT with Certificate Authority certificates.\n"
        },
        "unsafe_ssl_hostname_check": {
          "type": "boolean",
          "description": "Ignore validation of the name associated to the TLS certificate when connecting to the engine over HTTPs.\nSetting this value must only be done if the TLS certificate of the engine does not match the hostname,\nand the TLS configuration of the engine cannot be fixed. Setting this property reduces the protection\nagainst a man-in-the-middle attack for connections to this engine.\nThis is ignored if insecure_ssl is set.\n"
        },
        "status": {
          "type": "string",
          "description": "the status of the engine\n"
        },
        "connection_status": {
          "type": "string",
          "description": "The status of the connection to the engine. Deprecated; use \"engine_connection_status\" instead."
        },
        "engine_connection_status": {
          "type": "string",
          "description": "The state of the connection to the engine."
        },
        "connection_status_details": {
          "type": "string",
          "description": "If set, details about the status of the connection to the engine. Deprecated; use \"engine_connection_status_details\" instead."
        },
        "engine_connection_status_details": {
          "type": "string",
          "description": "If set, details about the state of the connection to the engine."
        },
        "username": {
          "type": "string",
          "description": "The virtualization domain admin username."
        },
        "password": {
          "type": "string",
          "description": "The virtualization domain admin password."
        },
        "masking_username": {
          "type": "string",
          "description": "The masking admin username."
        },
        "masking_password": {
          "type": "string",
          "description": "The masking admin password."
        },
        "hashicorp_vault_username_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the virtualization username for the engine."
        },
        "hashicorp_vault_masking_username_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the masking username for the engine."
        },
        "hashicorp_vault_password_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the virtualization password for the engine."
        },
        "hashicorp_vault_masking_password_command_args": {
          "type": "array",
          "description": "Arguments to pass to the Vault CLI tool to retrieve the masking password for the engine."
        },
        "masking_hashicorp_vault_id": {
          "type": "integer",
          "description": "Reference to the Hashicorp vault to use to retrieve masking engine credentials."
        },
        "hashicorp_vault_id": {
          "type": "integer",
          "description": "Reference to the Hashicorp vault to use to retrieve virtualization engine credentials."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for this engine."
        },
        "masking_memory_used": {
          "type": "integer",
          "description": "The current amount of memory used by running masking jobs in bytes."
        },
        "masking_allocated_memory": {
          "type": "integer",
          "description": "The maximum amount of memory available for running masking jobs in bytes."
        },
        "masking_jobs_running": {
          "type": "integer",
          "description": "The number of masking jobs currently running."
        },
        "masking_max_concurrent_jobs": {
          "type": "integer",
          "description": "The maximum number of masking jobs that can be running at the same time."
        },
        "masking_available_cores": {
          "type": "integer",
          "description": "The number of CPU cores available to the masking engine."
        },
        "hyperscale_instance_ids": {
          "type": "array",
          "description": "List of Hyperscale Instances that this engine is connected to."
        },
        "hyperscale_truststore_filename": {
          "type": "string",
          "description": "File name of a truststore which can be used to validate the TLS certificate of the engine as expected by associated hyperscale instances.\n"
        },
        "hyperscale_truststore_password": {
          "type": "string",
          "description": "Password to read the truststore as expected by associated hyperscale instances.\n"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_engine_auto_tagging_config",
    "description": "GET /management/engines/{engineId}/auto-tagging",
    "method": "get",
    "path": "/management/engines/{engineId}/auto-tagging",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_engine_auto_tagging_config",
    "description": "PATCH /management/engines/{engineId}/auto-tagging",
    "method": "patch",
    "path": "/management/engines/{engineId}/auto-tagging",
    "parameters": {
      "type": "object",
      "properties": {
        "enable_virtualization_dataset_groups": {
          "type": "boolean",
          "description": "Include dataset group names as tags for dSources, VDBs, and vCDBs (key 'dlpx-dataset-group')."
        },
        "enable_masking_environments": {
          "type": "boolean",
          "description": "Include masking environment names as tags for masking Jobs and Connectors (key 'dlpx-environment')."
        },
        "enable_masking_applications": {
          "type": "boolean",
          "description": "Include masking app names as tags for masking Jobs and Connectors (key 'dlpx-application')."
        },
        "enable_engine_name": {
          "type": "boolean",
          "description": "Include the engine name as a tag on discovered objects (key 'dlpx-engine')."
        },
        "custom_tags_to_add": {
          "type": "array",
          "description": "List of new custom tags to be added to discovered objects. These are appended to the AutoTaggingConfig's custom_tags list."
        },
        "custom_tags_to_remove": {
          "type": "array",
          "description": "List of tags to remove from the AutoTaggingConfig's custom_tags list (applied AFTER custom_tags_to_add)."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_compliance_application_settings",
    "description": "GET /management/engines/{engineId}/compliance-application-settings",
    "method": "get",
    "path": "/management/engines/{engineId}/compliance-application-settings",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_compliance_application_settings",
    "description": "POST /management/engines/{engineId}/compliance-application-settings/search",
    "method": "post",
    "path": "/management/engines/{engineId}/compliance-application-settings/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "search_engines",
    "description": "POST /management/engines/search",
    "method": "post",
    "path": "/management/engines/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_engine_tags",
    "description": "GET /management/engines/{engineId}/tags",
    "method": "get",
    "path": "/management/engines/{engineId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_engine_tags",
    "description": "POST /management/engines/{engineId}/tags",
    "method": "post",
    "path": "/management/engines/{engineId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_engine_tags",
    "description": "POST /management/engines/{engineId}/tags/delete",
    "method": "post",
    "path": "/management/engines/{engineId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hashicorp_vaults",
    "description": "GET /management/vaults/hashicorp",
    "method": "get",
    "path": "/management/vaults/hashicorp",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_hashicorp_vault",
    "description": "POST /management/vaults/hashicorp",
    "method": "post",
    "path": "/management/vaults/hashicorp",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": ""
        },
        "env_variables": {
          "type": "object",
          "description": "Environment variables to set when invoking the Vault CLI tool. The environment variables will be used both\nto login to the vault (if this step is required) and to retrieve engine username and passwords.\n"
        },
        "login_command_args": {
          "type": "array",
          "description": "Arguments to the \"vault\" CLI tool to be used to fetch a client token (or \"login\").\nIf supporting files, such as TLS certificates, must be used to authenticate, they can be\nmounted to the /etc/config directory.\nThis property must not be set when using the TOKEN authentication method as login is not required.\n"
        },
        "tags": {
          "type": "array",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "search_hashicorp_vaults",
    "description": "POST /management/vaults/hashicorp/search",
    "method": "post",
    "path": "/management/vaults/hashicorp/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hashicorp_vault",
    "description": "GET /management/vaults/hashicorp/{vaultId}",
    "method": "get",
    "path": "/management/vaults/hashicorp/{vaultId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_hashicorp_vault",
    "description": "DELETE /management/vaults/hashicorp/{vaultId}",
    "method": "delete",
    "path": "/management/vaults/hashicorp/{vaultId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_hashicorp_vault_tags",
    "description": "GET /management/vaults/hashicorp/{vaultId}/tags",
    "method": "get",
    "path": "/management/vaults/hashicorp/{vaultId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_hashicorp_vault_tags",
    "description": "POST /management/vaults/hashicorp/{vaultId}/tags",
    "method": "post",
    "path": "/management/vaults/hashicorp/{vaultId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_hashicorp_vault_tag",
    "description": "POST /management/vaults/hashicorp/{vaultId}/tags/delete",
    "method": "post",
    "path": "/management/vaults/hashicorp/{vaultId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_accounts",
    "description": "GET /management/accounts",
    "method": "get",
    "path": "/management/accounts",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_account",
    "description": "POST /management/accounts",
    "method": "post",
    "path": "/management/accounts",
    "parameters": {
      "type": "object",
      "properties": {
        "is_admin": {
          "type": "boolean",
          "description": "Whether the created account must be granted to admin role."
        },
        "generate_api_key": {
          "type": "boolean",
          "description": "Whether an API key must be generated for this Account. This must be set if the Account will be used for API key based authentication, and unset otherwise."
        },
        "api_client_id": {
          "type": "string",
          "description": "The unique ID which is used to identify the identity of an API request. The web server (nginx) configuration must be configured so as to include the external ID as the value of the X_CLIENT_ID HTTP request header when requests are proxied. If this value isn't set, the application will automatically generate one. For OAuth2/JWT based authentication, this typically corresponds to a value extracted from the JWT, uniquely identifying the Account."
        },
        "first_name": {
          "type": "string",
          "description": "An optional first name for the Account."
        },
        "last_name": {
          "type": "string",
          "description": "An optional last name for the Account."
        },
        "email": {
          "type": "string",
          "description": "An optional email for the Account."
        },
        "username": {
          "type": "string",
          "description": "The username for username/password authentication. This can also be used to provide an optional logical name for the Account."
        },
        "password": {
          "type": "string",
          "description": "The password for username/password authentication."
        },
        "ldap_principal": {
          "type": "string",
          "description": "This value will be used for linking this account to an LDAP user when authenticated with the same LDAP principal. When accounts authenticate with LDAP, an LDAP principal value is calculated based on the username, msad_domain_name, search_base and username_pattern."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for this Account."
        }
      },
      "required": []
    }
  },
  {
    "name": "api_key_reset",
    "description": "POST /management/accounts/{id}/api-key-reset",
    "method": "post",
    "path": "/management/accounts/{id}/api-key-reset",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "api_key_delete",
    "description": "DELETE /management/accounts/{id}/api-key-delete",
    "method": "delete",
    "path": "/management/accounts/{id}/api-key-delete",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "api-key-regenerate",
    "description": "POST /management/accounts/api-key-regenerate",
    "method": "post",
    "path": "/management/accounts/api-key-regenerate",
    "parameters": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Current api key for the account"
        }
      },
      "required": [
        "token"
      ]
    }
  },
  {
    "name": "get_account",
    "description": "GET /management/accounts/{id}",
    "method": "get",
    "path": "/management/accounts/{id}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_account",
    "description": "PUT /management/accounts/{id}",
    "method": "put",
    "path": "/management/accounts/{id}",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Numeric ID of the Account."
        },
        "api_client_id": {
          "type": "string",
          "description": "The unique ID which is used to identify the identity of an API request. The web server (nginx) configuration must be configured so as to include the external ID as the value of the X_CLIENT_ID HTTP request header when requests are proxied. For OAuth2/JWT based authentication, this typically corresponds to a value extracted from the JWT, uniquely identifying the Account."
        },
        "first_name": {
          "type": "string",
          "description": "An optional first name for the Account."
        },
        "last_name": {
          "type": "string",
          "description": "An optional last name for the Account."
        },
        "email": {
          "type": "string",
          "description": "An optional email for the Account."
        },
        "username": {
          "type": "string",
          "description": "The username for username/password authentication. This can also be used to provide an optional logical name for the Account."
        },
        "ldap_principal": {
          "type": "string",
          "description": "This value will be used for linking this account to an LDAP user when authenticated with the same LDAP principal. When accounts authenticate with LDAP, an LDAP principal value is calculated based on the username, msad_domain_name, search_base and username_pattern."
        }
      },
      "required": []
    }
  },
  {
    "name": "delete_account",
    "description": "DELETE /management/accounts/{id}",
    "method": "delete",
    "path": "/management/accounts/{id}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "enable_account",
    "description": "POST /management/accounts/{id}/enable",
    "method": "post",
    "path": "/management/accounts/{id}/enable",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "disable",
    "description": "POST /management/accounts/{id}/disable",
    "method": "post",
    "path": "/management/accounts/{id}/disable",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "change_account_password",
    "description": "POST /management/accounts/{id}/change_password",
    "method": "post",
    "path": "/management/accounts/{id}/change_password",
    "parameters": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string",
          "description": "Old password that needs to be changed for the Account."
        },
        "new_password": {
          "type": "string",
          "description": "New password that needs to be set for the Account. Set this to null for unsetting the current password. Not including this property also results in unsetting of the current password."
        }
      },
      "required": [
        "old_password"
      ]
    }
  },
  {
    "name": "reset_account_password",
    "description": "POST /management/accounts/{id}/reset_password",
    "method": "post",
    "path": "/management/accounts/{id}/reset_password",
    "parameters": {
      "type": "object",
      "properties": {
        "new_password": {
          "type": "string",
          "description": "New password that needs to be set for the Account. Set this to null for unsetting the current password. Not including this property also results in unsetting of the current password."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_account_tags",
    "description": "GET /management/accounts/{id}/tags",
    "method": "get",
    "path": "/management/accounts/{id}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_account_tags",
    "description": "POST /management/accounts/{id}/tags",
    "method": "post",
    "path": "/management/accounts/{id}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_account_tags",
    "description": "POST /management/accounts/{id}/tags/delete",
    "method": "post",
    "path": "/management/accounts/{id}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_account_ui_profiles",
    "description": "GET /management/accounts/{id}/ui-profiles",
    "method": "get",
    "path": "/management/accounts/{id}/ui-profiles",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_password_policies",
    "description": "GET /management/accounts/password-policies",
    "method": "get",
    "path": "/management/accounts/password-policies",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_password_policies",
    "description": "PATCH /management/accounts/password-policies",
    "method": "patch",
    "path": "/management/accounts/password-policies",
    "parameters": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "True if password policies are enforced/enabled."
        },
        "min_length": {
          "type": "integer",
          "description": "Minimum length for password."
        },
        "reuse_disallow_limit": {
          "type": "integer",
          "description": "The password can not be the same as any of the previous n passwords."
        },
        "digit": {
          "type": "boolean",
          "description": "Mandate at least one digit in password."
        },
        "uppercase_letter": {
          "type": "boolean",
          "description": "Mandate at least one uppercase letter in password."
        },
        "lowercase_letter": {
          "type": "boolean",
          "description": "Mandate at least one lower letter in password."
        },
        "special_character": {
          "type": "boolean",
          "description": "Mandate at least one special character in password."
        },
        "disallow_username_as_password": {
          "type": "boolean",
          "description": "Disallows password containing case-insensitive user name or reversed user name."
        },
        "maximum_password_attempts": {
          "type": "integer",
          "description": "The number of allowed attempts for incorrect password, after which the account gets locked."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_license",
    "description": "GET /management/license",
    "method": "get",
    "path": "/management/license",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "change_license",
    "description": "POST /management/license/change-license",
    "method": "post",
    "path": "/management/license/change-license",
    "parameters": {
      "type": "object",
      "properties": {
        "tier": {
          "type": "string",
          "description": "The DCT license tiers."
        }
      },
      "required": [
        "tier"
      ]
    }
  },
  {
    "name": "list_properties",
    "description": "GET /management/properties",
    "method": "get",
    "path": "/management/properties",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_properties",
    "description": "PATCH /management/properties",
    "method": "patch",
    "path": "/management/properties",
    "parameters": {
      "type": "object",
      "properties": {
        "disable_username_password": {
          "type": "boolean",
          "description": "Property to define either username & password based authentication disabled or not."
        },
        "phonehome_upload_cadence": {
          "type": "integer",
          "description": "Property to define the phonehome bundle upload cadence, in days, if Delphix services are reachable."
        },
        "phonehome_maximum_transfer_size": {
          "type": "integer",
          "description": "Property to define the maximum uncompressed bundle transfer size, in bytes, for phonehome."
        },
        "token_expiry_time": {
          "type": "integer",
          "description": "Property to define the expiry time for login token, in seconds. Specify -1 to indicate never expiry of token."
        },
        "token_maximum_inactivity_time": {
          "type": "integer",
          "description": "Property to define the maximum user inactivity time for login token, in seconds. Specify -1 to indicate never invalidate of token due to inactivity."
        },
        "feature_flags": {
          "type": "array",
          "description": "List of enabled features."
        },
        "api_key_expiry_time": {
          "type": "integer",
          "description": "Property to define the expiry time for API key, in seconds. Specify -1 to indicate never expiry of tapi key."
        },
        "allowed_ip_ranges": {
          "type": "array",
          "description": "Restricts the IP ranges DCT will connect to when registering engines."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_api_classification",
    "description": "GET /management/api-classification",
    "method": "get",
    "path": "/management/api-classification",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_api_classification",
    "description": "PUT /management/api-classification",
    "method": "put",
    "path": "/management/api-classification",
    "parameters": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "Api Classification Config Version."
        },
        "api_classification": {
          "type": "array",
          "description": "The classification of each APIs, either it is automation or not."
        }
      },
      "required": []
    }
  },
  {
    "name": "account_login",
    "description": "POST /login",
    "method": "post",
    "path": "/login",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the account that needs to login"
        },
        "password": {
          "type": "string",
          "description": "Password of the account that needs to login."
        },
        "api_key": {
          "type": "string",
          "description": "API key (without 'apk ' prefix) of the account that needs to login. When api_key is set then username/password would be ignored if provided."
        }
      },
      "required": []
    }
  },
  {
    "name": "account_logout",
    "description": "POST /logout",
    "method": "post",
    "path": "/logout",
    "parameters": {
      "type": "object",
      "properties": {
        "Authorization": {
          "type": "string",
          "description": "Access token"
        }
      },
      "required": [
        "Authorization"
      ]
    }
  },
  {
    "name": "search_accounts",
    "description": "POST /management/accounts/search",
    "method": "post",
    "path": "/management/accounts/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_tags",
    "description": "GET /management/tags",
    "method": "get",
    "path": "/management/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_tags",
    "description": "POST /management/tags/search",
    "method": "post",
    "path": "/management/tags/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_tag",
    "description": "GET /management/tags/{tagId}",
    "method": "get",
    "path": "/management/tags/{tagId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_tag_usages",
    "description": "GET /management/tags/{tagId}/usages",
    "method": "get",
    "path": "/management/tags/{tagId}/usages",
    "parameters": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "description": "The ID of the global tag."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": [
        "tagId"
      ]
    }
  },
  {
    "name": "search_tag_usages",
    "description": "POST /management/tags/{tagId}/usages/search",
    "method": "post",
    "path": "/management/tags/{tagId}/usages/search",
    "parameters": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "description": "The ID of the global tag."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "tagId"
      ]
    }
  },
  {
    "name": "get_tag_permissions",
    "description": "GET /management/tags/{tagId}/permissions",
    "method": "get",
    "path": "/management/tags/{tagId}/permissions",
    "parameters": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "description": "The ID of the global tag."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": [
        "tagId"
      ]
    }
  },
  {
    "name": "search_tag_permissions",
    "description": "POST /management/tags/{tagId}/permissions/search",
    "method": "post",
    "path": "/management/tags/{tagId}/permissions/search",
    "parameters": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "description": "The ID of the global tag."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "tagId"
      ]
    }
  },
  {
    "name": "token_info",
    "description": "POST /token-info",
    "method": "post",
    "path": "/token-info",
    "parameters": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "API Key or JWT token for fetching information"
        }
      },
      "required": [
        "token"
      ]
    }
  },
  {
    "name": "checkSaml",
    "description": "GET /is-saml-enabled",
    "method": "get",
    "path": "/is-saml-enabled",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_smtp_config",
    "description": "GET /management/smtp",
    "method": "get",
    "path": "/management/smtp",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_smtp_config",
    "description": "PUT /management/smtp",
    "method": "put",
    "path": "/management/smtp",
    "parameters": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "True if outbound email is enabled."
        },
        "server": {
          "type": "string",
          "description": "IP address or hostname of SMTP relay server."
        },
        "port": {
          "type": "integer",
          "description": "Port number to use. A value of -1 indicates the default (25 or 587 for TLS)."
        },
        "authentication_enabled": {
          "type": "boolean",
          "description": "True if username/password authentication should be used."
        },
        "tls_enabled": {
          "type": "boolean",
          "description": "True if TLS (transport layer security) should be used."
        },
        "username": {
          "type": "string",
          "description": "If authentication is enabled, username to use when authenticating to the server."
        },
        "password": {
          "type": "string",
          "description": "If authentication is enabled, password to use when authenticating to the server."
        },
        "from_address": {
          "type": "string",
          "description": "From address to use when sending mail. If unspecified, 'noreply@delphix.com' is used."
        },
        "send_timeout": {
          "type": "integer",
          "description": "Maximum timeout to wait, in seconds, when sending mail."
        }
      },
      "required": []
    }
  },
  {
    "name": "validate_smtp_config",
    "description": "POST /management/smtp/validate",
    "method": "post",
    "path": "/management/smtp/validate",
    "parameters": {
      "type": "object",
      "properties": {
        "to_address": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "to_address"
      ]
    }
  },
  {
    "name": "get_metadata_database",
    "description": "GET /management/metadata-database",
    "method": "get",
    "path": "/management/metadata-database",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_ldap_config",
    "description": "GET /management/ldap-config",
    "method": "get",
    "path": "/management/ldap-config",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_ldap_config",
    "description": "PUT /management/ldap-config",
    "method": "put",
    "path": "/management/ldap-config",
    "parameters": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "When set, these settings are enabled. True by default."
        },
        "auto_create_users": {
          "type": "boolean",
          "description": "When set, the system will automatically create new Accounts for those who have logged in using LDAP. This must be true if LDAP user is not already registered in system. True by default."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the LDAP server."
        },
        "port": {
          "type": "integer",
          "description": "The port of the LDAP server. Default port is 389 for non-SSL and 636 for SSL."
        },
        "domains": {
          "type": "array",
          "description": "DCT will try to authenticate using each Domain given in this list."
        },
        "enable_ssl": {
          "type": "boolean",
          "description": "True if LDAP should be used over SSL."
        },
        "insecure_ssl": {
          "type": "boolean",
          "description": "Allow connections to the LDAP server over LDAPS without validating the TLS certificate. Even though\nthe connection to the server might be performed over LDAPS, setting this property eliminates\nthe protection against a man-in-the-middle attach for connections to this server. Instead,\nconsider configuring DCT with Certificate Authority certificates.\n"
        },
        "unsafe_ssl_hostname_check": {
          "type": "boolean",
          "description": "Ignore validation of the name associated to the TLS certificate when connecting to the LDAP server over LDAPS.\nSetting this value must only be done if the TLS certificate of the server does not match the hostname,\nand the TLS configuration of the server cannot be fixed. Setting this property reduces the protection\nagainst a man-in-the-middle attack for connections to this server.\nThis is ignored if insecure_ssl is set.\n"
        }
      },
      "required": []
    }
  },
  {
    "name": "validate_ldap_config",
    "description": "POST /management/ldap-config/validate",
    "method": "post",
    "path": "/management/ldap-config/validate",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the account to validate the ldap optional attributes."
        },
        "password": {
          "type": "string",
          "description": "Password of the account to validate the ldap optional attributes."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_saml_config",
    "description": "GET /management/saml-config",
    "method": "get",
    "path": "/management/saml-config",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_saml_config",
    "description": "PUT /management/saml-config",
    "method": "put",
    "path": "/management/saml-config",
    "parameters": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "When set, SAML settings are enabled. False by default."
        },
        "auto_create_users": {
          "type": "boolean",
          "description": "When set, the system will automatically create new Accounts for those who have logged in using SAML. This must be true if SAML user is not already registered in system. True by default."
        },
        "metadata": {
          "type": "string",
          "description": "IdP metadata for this service provider. This is a required property for successful SAML authentication."
        },
        "entity_id": {
          "type": "string",
          "description": "Unique identifier of this instance as a SAML/SSO service provider."
        },
        "response_skew": {
          "type": "integer",
          "description": "Maximum time difference allowed between a SAML response and the DCT's current time, in seconds. If not set, it defaults to 120 seconds."
        },
        "group_attr": {
          "type": "string",
          "description": "Group mapped attribute on SAML to create account tags in DCT."
        },
        "first_name_attr": {
          "type": "string",
          "description": "First name attribute mapped on SAML used for mapping on DCT account."
        },
        "last_name_attr": {
          "type": "string",
          "description": "Last name attribute mapped on SAML used for mapping on DCT account."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_phonehome_events",
    "description": "GET /management/phonehome/events",
    "method": "get",
    "path": "/management/phonehome/events",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "The maximum number of items to return."
        }
      },
      "required": []
    }
  },
  {
    "name": "trigger_phonehome_bundle_upload",
    "description": "POST /management/phonehome/upload",
    "method": "post",
    "path": "/management/phonehome/upload",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_proxy_configuration",
    "description": "GET /management/proxy",
    "method": "get",
    "path": "/management/proxy",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_proxy_configuration",
    "description": "PUT /management/proxy",
    "method": "put",
    "path": "/management/proxy",
    "parameters": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string",
          "description": "The host name or IP address of the proxy server."
        },
        "port": {
          "type": "integer",
          "description": "The port number of the proxy server."
        },
        "username": {
          "type": "string",
          "description": "The username to use when authenticating with the proxy server."
        },
        "password": {
          "type": "string",
          "description": "The password to use when authenticating with the proxy server."
        },
        "enabled": {
          "type": "boolean",
          "description": "When set, these settings are enabled. True by default."
        }
      },
      "required": [
        "enabled",
        "port",
        "host"
      ]
    }
  },
  {
    "name": "get_product_registration_delphix_connectivity_check",
    "description": "GET /management/product-registration-delphix-connectivity-check",
    "method": "get",
    "path": "/management/product-registration-delphix-connectivity-check",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_product_registration_status",
    "description": "GET /management/product-registration-status",
    "method": "get",
    "path": "/management/product-registration-status",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_product_registration_key",
    "description": "GET /management/product-registration-offline",
    "method": "get",
    "path": "/management/product-registration-offline",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "register_product_offline",
    "description": "POST /management/product-registration-offline",
    "method": "post",
    "path": "/management/product-registration-offline",
    "parameters": {
      "type": "object",
      "properties": {
        "data_key": {
          "type": "string",
          "description": ""
        },
        "authentication_token": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "authentication_token",
        "data_key"
      ]
    }
  },
  {
    "name": "unregister_product",
    "description": "DELETE /management/product-registration-offline",
    "method": "delete",
    "path": "/management/product-registration-offline",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "register_product_online",
    "description": "POST /management/product-registration-online",
    "method": "post",
    "path": "/management/product-registration-online",
    "parameters": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "token"
      ]
    }
  },
  {
    "name": "update_phonehome_service_url",
    "description": "PATCH /management/product-registration-online",
    "method": "patch",
    "path": "/management/product-registration-online",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_audit_logs_summary_report",
    "description": "GET /reporting/audit-logs-summary-report",
    "method": "get",
    "path": "/reporting/audit-logs-summary-report",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_virtualization_storage_summary_report",
    "description": "GET /reporting/virtualization-storage-summary-report",
    "method": "get",
    "path": "/reporting/virtualization-storage-summary-report",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_virtualization_storage_summary_report",
    "description": "POST /reporting/virtualization-storage-summary-report/search",
    "method": "post",
    "path": "/reporting/virtualization-storage-summary-report/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_api_usage_report",
    "description": "GET /reporting/api-usage-report",
    "method": "get",
    "path": "/reporting/api-usage-report",
    "parameters": {
      "type": "object",
      "properties": {
        "start_date": {
          "type": "string",
          "description": "Report start date/time. Defaults to first API request."
        },
        "end_date": {
          "type": "string",
          "description": "Report end date/time. Defaults to current time."
        },
        "api_metric_kind": {
          "type": "string",
          "description": "Restrict the list to API usage metric of the given kind"
        },
        "group_by": {
          "type": "array",
          "description": "The field to group results by."
        },
        "client_name": {
          "type": "array",
          "description": "The Client names to be included in the report."
        },
        "user_agent": {
          "type": "array",
          "description": "The UserAgent names to be included in the report."
        },
        "dct_version": {
          "type": "array",
          "description": "The DCT versions to be included in the report."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_reporting_schedules",
    "description": "GET /reporting/schedule",
    "method": "get",
    "path": "/reporting/schedule",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_reporting_schedule",
    "description": "POST /reporting/schedule",
    "method": "post",
    "path": "/reporting/schedule",
    "parameters": {
      "type": "object",
      "properties": {
        "report_type": {
          "type": "string",
          "description": ""
        },
        "cron_expression": {
          "type": "string",
          "description": "Standard cron expressions are supported e.g. 0 15 10 L * ?  - Schedule at 10:15 AM on the last day of every month, 0 0 2 ? * Mon-Fri - Schedule at 2:00 AM every Monday, Tuesday, Wednesday, Thursday and Friday. For more details kindly refer- \"http://www.quartz-scheduler.org/documentation/\""
        },
        "time_zone": {
          "type": "string",
          "description": "Timezones are specified according to the Olson tzinfo database - \"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\"."
        },
        "message": {
          "type": "string",
          "description": ""
        },
        "file_format": {
          "type": "string",
          "description": ""
        },
        "enabled": {
          "type": "boolean",
          "description": ""
        },
        "recipients": {
          "type": "array",
          "description": ""
        },
        "sort_column": {
          "type": "string",
          "description": ""
        },
        "row_count": {
          "type": "integer",
          "description": ""
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this reporting schedule must be configured as owner of the reporting schedule."
        }
      },
      "required": [
        "report_type",
        "message",
        "cron_expression",
        "enabled",
        "recipients",
        "file_format"
      ]
    }
  },
  {
    "name": "search_reporting_schedules",
    "description": "POST /reporting/schedule/search",
    "method": "post",
    "path": "/reporting/schedule/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_reporting_schedule_by_id",
    "description": "GET /reporting/schedule/{reportId}",
    "method": "get",
    "path": "/reporting/schedule/{reportId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_reporting_schedule",
    "description": "PUT /reporting/schedule/{reportId}",
    "method": "put",
    "path": "/reporting/schedule/{reportId}",
    "parameters": {
      "type": "object",
      "properties": {
        "report_id": {
          "type": "integer",
          "description": ""
        },
        "report_type": {
          "type": "string",
          "description": ""
        },
        "cron_expression": {
          "type": "string",
          "description": "Standard cron expressions are supported e.g. 0 15 10 L * ?  - Schedule at 10:15 AM on the last day of every month, 0 0 2 ? * Mon-Fri - Schedule at 2:00 AM every Monday, Tuesday, Wednesday, Thursday and Friday. For more details kindly refer- \"http://www.quartz-scheduler.org/documentation/\""
        },
        "time_zone": {
          "type": "string",
          "description": "Timezones are specified according to the Olson tzinfo database - \"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\"."
        },
        "message": {
          "type": "string",
          "description": ""
        },
        "file_format": {
          "type": "string",
          "description": ""
        },
        "enabled": {
          "type": "boolean",
          "description": ""
        },
        "recipients": {
          "type": "array",
          "description": ""
        },
        "tags": {
          "type": "array",
          "description": ""
        },
        "sort_column": {
          "type": "string",
          "description": ""
        },
        "row_count": {
          "type": "integer",
          "description": ""
        }
      },
      "required": [
        "report_type",
        "message",
        "cron_expression",
        "enabled",
        "recipients",
        "file_format"
      ]
    }
  },
  {
    "name": "delete_reporting_schedule",
    "description": "DELETE /reporting/schedule/{reportId}",
    "method": "delete",
    "path": "/reporting/schedule/{reportId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_reporting_schedule_tags",
    "description": "GET /reporting/schedule/{reportId}/tags",
    "method": "get",
    "path": "/reporting/schedule/{reportId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_reporting_schedule_tags",
    "description": "POST /reporting/schedule/{reportId}/tags",
    "method": "post",
    "path": "/reporting/schedule/{reportId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_reporting_schedule_tag",
    "description": "POST /reporting/schedule/{reportId}/tags/delete",
    "method": "post",
    "path": "/reporting/schedule/{reportId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_engine_performance_analytics_report",
    "description": "GET /reporting/engine-performance-analytic-report",
    "method": "get",
    "path": "/reporting/engine-performance-analytic-report",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_engine_performance_analytics_report",
    "description": "POST /reporting/engine-performance-analytic-report/search",
    "method": "post",
    "path": "/reporting/engine-performance-analytic-report/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "search_engine_performance_analytic_trends",
    "description": "POST /reporting/engine-performance-analytic-trends/search",
    "method": "post",
    "path": "/reporting/engine-performance-analytic-trends/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_product_info",
    "description": "GET /reporting/product_info",
    "method": "get",
    "path": "/reporting/product_info",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_data_connections",
    "description": "GET /data-connections",
    "method": "get",
    "path": "/data-connections",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_data_connections",
    "description": "POST /data-connections/search",
    "method": "post",
    "path": "/data-connections/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_data_connection_by_id",
    "description": "GET /data-connections/{dataConnectionId}",
    "method": "get",
    "path": "/data-connections/{dataConnectionId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_data_connection",
    "description": "PATCH /data-connections/{dataConnectionId}",
    "method": "patch",
    "path": "/data-connections/{dataConnectionId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The data connection name"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_data_connection_tags",
    "description": "GET /data-connections/{dataConnectionId}/tags",
    "method": "get",
    "path": "/data-connections/{dataConnectionId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_data_connection_tags",
    "description": "POST /data-connections/{dataConnectionId}/tags",
    "method": "post",
    "path": "/data-connections/{dataConnectionId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_data_connection_tags",
    "description": "POST /data-connections/{dataConnectionId}/tags/delete",
    "method": "post",
    "path": "/data-connections/{dataConnectionId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_sub_connections",
    "description": "GET /data-connections/{dataConnectionId}/sub-connections",
    "method": "get",
    "path": "/data-connections/{dataConnectionId}/sub-connections",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "reassign_sub_connection",
    "description": "POST /data-connections/{dataConnectionId}/sub-connections/{subConnectionId}/reassign",
    "method": "post",
    "path": "/data-connections/{dataConnectionId}/sub-connections/{subConnectionId}/reassign",
    "parameters": {
      "type": "object",
      "properties": {
        "new_data_connection_id": {
          "type": "string",
          "description": "The ID of the existing DataConnection to move the SubConnection to. If null, then a new DataConnection will be created."
        },
        "name": {
          "type": "string",
          "description": "The new DataConnection name. Only applicable if new_data_connection_id is null."
        },
        "tags": {
          "type": "array",
          "description": "The tags to add to the newly created DataConnection. Only applicable if new_data_connection_id is null."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the current Account must be configured as owner of the newly created DataConnection. Only applicable if new_data_connection_id is null."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_sub_connections",
    "description": "POST /data-connections/{dataConnectionId}/sub-connections/search",
    "method": "post",
    "path": "/data-connections/{dataConnectionId}/sub-connections/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_roles",
    "description": "GET /roles",
    "method": "get",
    "path": "/roles",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_role",
    "description": "POST /roles",
    "method": "post",
    "path": "/roles",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The Role name."
        },
        "description": {
          "type": "string",
          "description": "Role description."
        },
        "permission_objects": {
          "type": "array",
          "description": "The list of permissions granted by this role."
        },
        "immutable": {
          "type": "boolean",
          "description": "If set to true, adding or removing permission is not allowed."
        },
        "tags": {
          "type": "array",
          "description": ""
        },
        "ui_profiles": {
          "type": "array",
          "description": "The list of profiles that influence the navigation menus shown in the UI."
        }
      },
      "required": [
        "name",
        "permission_objects"
      ]
    }
  },
  {
    "name": "get_role_by_id",
    "description": "GET /roles/{roleId}",
    "method": "get",
    "path": "/roles/{roleId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_role",
    "description": "DELETE /roles/{roleId}",
    "method": "delete",
    "path": "/roles/{roleId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_role",
    "description": "PATCH /roles/{roleId}",
    "method": "patch",
    "path": "/roles/{roleId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The role name"
        },
        "description": {
          "type": "string",
          "description": "The role description"
        }
      },
      "required": []
    }
  },
  {
    "name": "search_roles",
    "description": "POST /roles/search",
    "method": "post",
    "path": "/roles/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "add_role_permissions",
    "description": "POST /roles/{roleId}/permissions",
    "method": "post",
    "path": "/roles/{roleId}/permissions",
    "parameters": {
      "type": "object",
      "properties": {
        "permission_objects": {
          "type": "array",
          "description": "Array of permissions with object type and their permission."
        }
      },
      "required": [
        "permission_objects"
      ]
    }
  },
  {
    "name": "remove_role_permissions",
    "description": "POST /roles/{roleId}/permissions/delete",
    "method": "post",
    "path": "/roles/{roleId}/permissions/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "permission_objects": {
          "type": "array",
          "description": "Array of permissions with object type and their permission."
        }
      },
      "required": [
        "permission_objects"
      ]
    }
  },
  {
    "name": "get_role_tags",
    "description": "GET /roles/{roleId}/tags",
    "method": "get",
    "path": "/roles/{roleId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_role_tags",
    "description": "POST /roles/{roleId}/tags",
    "method": "post",
    "path": "/roles/{roleId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_role_tag",
    "description": "POST /roles/{roleId}/tags/delete",
    "method": "post",
    "path": "/roles/{roleId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "add_role_ui_profiles",
    "description": "POST /roles/{roleId}/ui-profiles",
    "method": "post",
    "path": "/roles/{roleId}/ui-profiles",
    "parameters": {
      "type": "object",
      "properties": {
        "ui_profiles": {
          "type": "array",
          "description": "List of UI profiles"
        }
      },
      "required": [
        "ui_profiles"
      ]
    }
  },
  {
    "name": "delete_role_ui_profiles",
    "description": "POST /roles/{roleId}/ui-profiles/delete",
    "method": "post",
    "path": "/roles/{roleId}/ui-profiles/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "ui_profiles": {
          "type": "array",
          "description": "List of UI profiles"
        }
      },
      "required": [
        "ui_profiles"
      ]
    }
  },
  {
    "name": "get_object_permissions",
    "description": "GET /auth/permissions/objects/{objectType}/{objectId}",
    "method": "get",
    "path": "/auth/permissions/objects/{objectType}/{objectId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_all_object_permissions",
    "description": "GET /auth/object-permissions",
    "method": "get",
    "path": "/auth/object-permissions",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_access_groups",
    "description": "GET /access-groups",
    "method": "get",
    "path": "/access-groups",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_access_group",
    "description": "POST /access-groups",
    "method": "post",
    "path": "/access-groups",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Access group ID."
        },
        "name": {
          "type": "string",
          "description": "The Access group name"
        },
        "single_account": {
          "type": "boolean",
          "description": "Indicates that this Access group defines the permissions of a single account, and thus account and account tags cannot be modified. Instead create a new Access group to manage permissions of multiple accounts."
        },
        "account_ids": {
          "type": "array",
          "description": "List of accounts ids included individually (as opposed to added by tags) in the Access group."
        },
        "tagged_account_ids": {
          "type": "array",
          "description": "List of accounts ids included by tags in the Access group."
        },
        "account_tags": {
          "type": "array",
          "description": "List of account tags. Accounts matching any of these tags will be automatically added to the Access group."
        },
        "scopes": {
          "type": "array",
          "description": "The Access group scopes."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "search_access_groups",
    "description": "POST /access-groups/search",
    "method": "post",
    "path": "/access-groups/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_access_group_by_id",
    "description": "GET /access-groups/{accessGroupId}",
    "method": "get",
    "path": "/access-groups/{accessGroupId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_access_group",
    "description": "DELETE /access-groups/{accessGroupId}",
    "method": "delete",
    "path": "/access-groups/{accessGroupId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_access_group",
    "description": "PATCH /access-groups/{accessGroupId}",
    "method": "patch",
    "path": "/access-groups/{accessGroupId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The Access group name"
        }
      },
      "required": []
    }
  },
  {
    "name": "add_access_group_account_tags",
    "description": "POST /access-groups/{accessGroupId}/tags",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "remove_access_group_account_tags",
    "description": "POST /access-groups/{accessGroupId}/tags/delete",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "add_access_group_account_ids",
    "description": "POST /access-groups/{accessGroupId}/account-ids",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/account-ids",
    "parameters": {
      "type": "object",
      "properties": {
        "account_ids": {
          "type": "array",
          "description": ""
        }
      },
      "required": [
        "account_ids"
      ]
    }
  },
  {
    "name": "remove_access_group_account_id",
    "description": "DELETE /access-groups/{accessGroupId}/account-ids/{accountId}",
    "method": "delete",
    "path": "/access-groups/{accessGroupId}/account-ids/{accountId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "add_access_group_scopes",
    "description": "POST /access-groups/{accessGroupId}/scopes",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/scopes",
    "parameters": {
      "type": "object",
      "properties": {
        "scopes": {
          "type": "array",
          "description": ""
        }
      },
      "required": [
        "scopes"
      ]
    }
  },
  {
    "name": "get_access_group_scope",
    "description": "GET /access-groups/{accessGroupId}/scopes/{scopeId}",
    "method": "get",
    "path": "/access-groups/{accessGroupId}/scopes/{scopeId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "remove_access_group_scope",
    "description": "DELETE /access-groups/{accessGroupId}/scopes/{scopeId}",
    "method": "delete",
    "path": "/access-groups/{accessGroupId}/scopes/{scopeId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_access_group_scope",
    "description": "PATCH /access-groups/{accessGroupId}/scopes/{scopeId}",
    "method": "patch",
    "path": "/access-groups/{accessGroupId}/scopes/{scopeId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The Access group scope name."
        },
        "scope_type": {
          "type": "string",
          "description": "Specifies the type of the scope. Scope of type SIMPLE would grant access to all DCT objects. Scope of type SCOPED would grant access to all objects based on objects and object-tags and permissions defined in linked role. Scope of type ADVANCED would grant access to DCT objects based on objects and object-tags and the individual permissions."
        }
      },
      "required": []
    }
  },
  {
    "name": "add_tags_to_scope",
    "description": "POST /access-groups/{accessGroupId}/scopes/{scopeId}/object-tags",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/scopes/{scopeId}/object-tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs along with optional object_type and permissions"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_access_group_scope_object_tags",
    "description": "POST /access-groups/{accessGroupId}/scopes/{scopeId}/object-tags/delete",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/scopes/{scopeId}/object-tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "List of scope tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "add_objects_to_access_group_scope",
    "description": "POST /access-groups/{accessGroupId}/scopes/{scopeId}/objects",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/scopes/{scopeId}/objects",
    "parameters": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "description": "An array of scoped objects"
        }
      },
      "required": [
        "objects"
      ]
    }
  },
  {
    "name": "delete_access_group_scope_objects",
    "description": "POST /access-groups/{accessGroupId}/scopes/{scopeId}/objects/delete",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/scopes/{scopeId}/objects/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "description": "List of scoped objects to be deleted"
        }
      },
      "required": [
        "objects"
      ]
    }
  },
  {
    "name": "add_always_allowed_permissions",
    "description": "POST /access-groups/{accessGroupId}/scopes/{scopeId}/always_allowed_permissions",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/scopes/{scopeId}/always_allowed_permissions",
    "parameters": {
      "type": "object",
      "properties": {
        "always_allowed_permissions": {
          "type": "array",
          "description": "An array of always allowed permissions"
        }
      },
      "required": [
        "always_allowed_permissions"
      ]
    }
  },
  {
    "name": "remove_always_allowed_permissions",
    "description": "POST /access-groups/{accessGroupId}/scopes/{scopeId}/always_allowed_permissions/delete",
    "method": "post",
    "path": "/access-groups/{accessGroupId}/scopes/{scopeId}/always_allowed_permissions/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "always_allowed_permissions": {
          "type": "array",
          "description": "An array of always allowed permissions"
        }
      },
      "required": [
        "always_allowed_permissions"
      ]
    }
  },
  {
    "name": "get_enabled_features_flag",
    "description": "GET /enabled-features-flag",
    "method": "get",
    "path": "/enabled-features-flag",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "connectors_test",
    "description": "POST /connectors/{connectorId}/test",
    "method": "post",
    "path": "/connectors/{connectorId}/test",
    "parameters": {
      "type": "object",
      "properties": {
        "connectorId": {
          "type": "string",
          "description": "The ID of the Connector."
        }
      },
      "required": [
        "connectorId"
      ]
    }
  },
  {
    "name": "get_hyperscale_instances",
    "description": "GET /hyperscale-instances",
    "method": "get",
    "path": "/hyperscale-instances",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "register_hyperscale_instance",
    "description": "POST /hyperscale-instances",
    "method": "post",
    "path": "/hyperscale-instances",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name in DCT of the Hyperscale instance."
        },
        "hostname": {
          "type": "string",
          "description": "Hostname of the Hyperscale instance. If the Hyperscale instance is running on a custom port (not 443), the port can be specified using the \"hostname:port\" format, for instance \"hyperscale-1.mycompany.co:1765\""
        },
        "api_key": {
          "type": "string",
          "description": "API key to connect to the Hyperscale instance."
        },
        "data_type": {
          "type": "string",
          "description": "The data type designation for the hyperscale deployment."
        },
        "insecure_ssl": {
          "type": "boolean",
          "description": "Allow connections to the hyperscale instance over HTTPs without validating the TLS certificate. Even though\nthe connection to the hyperscale instance might be performed over HTTPs, setting this property eliminates\nthe protection against a man-in-the-middle attach for connections to this engine. Instead,\nconsider configuring DCT with Certificate Authority certificates.\n"
        },
        "unsafe_ssl_hostname_check": {
          "type": "boolean",
          "description": "Ignore validation of the name associated to the TLS certificate when connecting to the hyperscale instance over HTTPs.\nSetting this value must only be done if the TLS certificate of the hyperscale instance does not match the hostname,\nand the TLS configuration of the hyperscale instance cannot be fixed. Setting this property reduces the protection\nagainst a man-in-the-middle attack for connections to this engine.\nThis is ignored if insecure_ssl is set.\n"
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for this engine."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this Hyperscale instance must be configured as owner of it."
        }
      },
      "required": [
        "api_key",
        "hostname",
        "data_type",
        "name"
      ]
    }
  },
  {
    "name": "search_hyperscale_instances",
    "description": "POST /hyperscale-instances/search",
    "method": "post",
    "path": "/hyperscale-instances/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_instance_by_id",
    "description": "GET /hyperscale-instances/{hyperscaleInstanceId}",
    "method": "get",
    "path": "/hyperscale-instances/{hyperscaleInstanceId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "unregister_hyperscale_instance",
    "description": "DELETE /hyperscale-instances/{hyperscaleInstanceId}",
    "method": "delete",
    "path": "/hyperscale-instances/{hyperscaleInstanceId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_hyperscale_instance",
    "description": "PATCH /hyperscale-instances/{hyperscaleInstanceId}",
    "method": "patch",
    "path": "/hyperscale-instances/{hyperscaleInstanceId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name in DCT of the Hyperscale instance."
        },
        "hostname": {
          "type": "string",
          "description": "Hostname of the Hyperscale instance. If the Hyperscale instance is running on a custom port (not 443), the port can be specified using the \"hostname:port\" format, for instance \"hyperscale-1.mycompany.co:1765\""
        },
        "api_key": {
          "type": "string",
          "description": "API key to connect to the Hyperscale instance."
        },
        "data_type": {
          "type": "string",
          "description": "The data type designation for the hyperscale deployment."
        },
        "insecure_ssl": {
          "type": "boolean",
          "description": "Allow connections to the hyperscale instance over HTTPs without validating the TLS certificate. Even though\nthe connection to the hyperscale instance might be performed over HTTPs, setting this property eliminates\nthe protection against a man-in-the-middle attach for connections to this engine. Instead,\nconsider configuring DCT with Certificate Authority certificates.\n"
        },
        "unsafe_ssl_hostname_check": {
          "type": "boolean",
          "description": "Ignore validation of the name associated to the TLS certificate when connecting to the hyperscale instance over HTTPs.\nSetting this value must only be done if the TLS certificate of the hyperscale instance does not match the hostname,\nand the TLS configuration of the hyperscale instance cannot be fixed. Setting this property reduces the protection\nagainst a man-in-the-middle attack for connections to this engine.\nThis is ignored if insecure_ssl is set.\n"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_instance_tags",
    "description": "GET /hyperscale-instances/{hyperscaleInstanceId}/tags",
    "method": "get",
    "path": "/hyperscale-instances/{hyperscaleInstanceId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_hyperscale_instance_tags",
    "description": "POST /hyperscale-instances/{hyperscaleInstanceId}/tags",
    "method": "post",
    "path": "/hyperscale-instances/{hyperscaleInstanceId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_hyperscale_instance_tags",
    "description": "POST /hyperscale-instances/{hyperscaleInstanceId}/tags/delete",
    "method": "post",
    "path": "/hyperscale-instances/{hyperscaleInstanceId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "sync_engines_hyperscale_instance",
    "description": "POST /hyperscale-instances/{hyperscaleInstanceId}/sync-engines",
    "method": "post",
    "path": "/hyperscale-instances/{hyperscaleInstanceId}/sync-engines",
    "parameters": {
      "type": "object",
      "properties": {
        "source_engine_id": {
          "type": "string",
          "description": "The ID of the engine to copy the data from."
        },
        "target_engine_ids": {
          "type": "array",
          "description": "The IDs of the target engines to copy the data into."
        }
      },
      "required": [
        "source_engine_id",
        "target_engine_ids"
      ]
    }
  },
  {
    "name": "add_engine_to_hyperscale_instance",
    "description": "POST /hyperscale-instances/{hyperscaleInstanceId}/add-engine",
    "method": "post",
    "path": "/hyperscale-instances/{hyperscaleInstanceId}/add-engine",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "remove_engine_from_hyperscale_instance",
    "description": "POST /hyperscale-instances/{hyperscaleInstanceId}/remove-engine",
    "method": "post",
    "path": "/hyperscale-instances/{hyperscaleInstanceId}/remove-engine",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_mount_points",
    "description": "GET /hyperscale-mount-points",
    "method": "get",
    "path": "/hyperscale-mount-points",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_hyperscale_mount_point",
    "description": "POST /hyperscale-mount-points",
    "method": "post",
    "path": "/hyperscale-mount-points",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the Hyperscale Mount Point."
        },
        "hyperscale_instance_id": {
          "type": "string",
          "description": "The ID of the Hyperscale instance of this Mount Point."
        },
        "name": {
          "type": "string",
          "description": "Name of the mount, unique for a hyperscale instance. This name will be used as a directory name by the Hyperscale instance."
        },
        "hostname": {
          "type": "string",
          "description": "The host name of the server."
        },
        "mount_path": {
          "type": "string",
          "description": "The path to the directory on the filesystem to mount."
        },
        "mount_type": {
          "type": "string",
          "description": "The type of mount filesystem. Enum having values- CIFS, NFS3, NFS4."
        },
        "options": {
          "type": "string",
          "description": "The options for mount. The endpoint will return all default options and user specified options."
        },
        "staging_storage_type": {
          "type": "string",
          "description": "The type of staging storage."
        },
        "auth_mechanism": {
          "type": "string",
          "description": "The authentication mechanism for AWS_S3 storage."
        },
        "aws_bucket_name": {
          "type": "string",
          "description": "The aws bucket name for AWS_S3 storage."
        },
        "aws_bucket_region": {
          "type": "string",
          "description": "The aws bucket region for AWS_S3 storage."
        },
        "aws_bucket_prefix": {
          "type": "string",
          "description": "The aws bucket prefix for AWS_S3 storage."
        },
        "aws_bucket_delimiter": {
          "type": "string",
          "description": "The aws bucket delimiter for AWS_S3 storage."
        },
        "blob_auth_type": {
          "type": "string",
          "description": "The authentication type for Azure blob storage."
        },
        "blob_account_name": {
          "type": "string",
          "description": "The storage account name for Azure blob storage."
        },
        "blob_container_name": {
          "type": "string",
          "description": "The blob container name for Azure blob storage."
        },
        "blob_container_prefix": {
          "type": "string",
          "description": "The blob container prefix for Azure blob storage."
        },
        "blob_container_delimiter": {
          "type": "string",
          "description": "The blob container delimiter for Azure blob storage."
        }
      },
      "required": [
        "hyperscale_instance_id"
      ]
    }
  },
  {
    "name": "get_hyperscale_mount_point_by_id",
    "description": "GET /hyperscale-mount-points/{hyperscaleMountPointId}",
    "method": "get",
    "path": "/hyperscale-mount-points/{hyperscaleMountPointId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_hyperscale_mount_point",
    "description": "DELETE /hyperscale-mount-points/{hyperscaleMountPointId}",
    "method": "delete",
    "path": "/hyperscale-mount-points/{hyperscaleMountPointId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_hyperscale_mount_point_by_id",
    "description": "PATCH /hyperscale-mount-points/{hyperscaleMountPointId}",
    "method": "patch",
    "path": "/hyperscale-mount-points/{hyperscaleMountPointId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the mount, unique for a hyperscale instance."
        },
        "hostname": {
          "type": "string",
          "description": "The host name of the server."
        },
        "mount_path": {
          "type": "string",
          "description": "The path to the directory on the filesystem to mount."
        },
        "mount_type": {
          "type": "string",
          "description": "The type of filesystem."
        },
        "options": {
          "type": "string",
          "description": "The mount options."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_hyperscale_mount_points",
    "description": "POST /hyperscale-mount-points/search",
    "method": "post",
    "path": "/hyperscale-mount-points/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_connectors",
    "description": "GET /hyperscale-connectors",
    "method": "get",
    "path": "/hyperscale-connectors",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_hyperscale_connector",
    "description": "POST /hyperscale-connectors",
    "method": "post",
    "path": "/hyperscale-connectors",
    "parameters": {
      "type": "object",
      "properties": {
        "hyperscale_instance_id": {
          "type": "string",
          "description": "The ID of the Hyperscale instance of this Connector."
        },
        "data_type": {
          "type": "string",
          "description": "The data type designation for the hyperscale deployment."
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "source_username": {
          "type": "string",
          "description": "The username this Connector will use to connect to the source database."
        },
        "source_password": {
          "type": "string",
          "description": "The password this Connector will use to connect to the source database."
        },
        "source_jdbc_url": {
          "type": "string",
          "description": "The JDBC URL used to connect to the source database."
        },
        "source_mongo_url": {
          "type": "string",
          "description": "The MongoDB URL used to connect to the source database."
        },
        "source_filesystem_path": {
          "type": "string",
          "description": "The path on the filesystem where source files must be read (Delimited files Only)."
        },
        "source_connection_properties": {
          "type": "object",
          "description": ""
        },
        "target_username": {
          "type": "string",
          "description": "The username this Connector will use to connect to the target database."
        },
        "target_password": {
          "type": "string",
          "description": "The username this Connector will use to connect to the target database."
        },
        "target_jdbc_url": {
          "type": "string",
          "description": "The JDBC URL used to connect to the target database."
        },
        "target_mongo_url": {
          "type": "string",
          "description": "The MongoDB URL used to connect to the target database."
        },
        "target_filesystem_path": {
          "type": "string",
          "description": "The path on the filesystem where target files must be written (Delimited files Only)."
        },
        "target_connection_properties": {
          "type": "object",
          "description": ""
        },
        "tags": {
          "type": "array",
          "description": ""
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this Hyperscale Connector must be configured as owner of it."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_connector_by_id",
    "description": "GET /hyperscale-connectors/{hyperscaleConnectorId}",
    "method": "get",
    "path": "/hyperscale-connectors/{hyperscaleConnectorId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_hyperscale_connector",
    "description": "DELETE /hyperscale-connectors/{hyperscaleConnectorId}",
    "method": "delete",
    "path": "/hyperscale-connectors/{hyperscaleConnectorId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_hyperscale_connector_by_id",
    "description": "PATCH /hyperscale-connectors/{hyperscaleConnectorId}",
    "method": "patch",
    "path": "/hyperscale-connectors/{hyperscaleConnectorId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": ""
        },
        "source_username": {
          "type": "string",
          "description": "The username this Connector will use to connect to the source database."
        },
        "source_password": {
          "type": "string",
          "description": "The password this Connector will use to connect to the source database."
        },
        "source_jdbc_url": {
          "type": "string",
          "description": "The JDBC URL used to connect to the source database."
        },
        "source_mongo_url": {
          "type": "string",
          "description": "The MongoDB URL used to connect to the source database."
        },
        "source_filesystem_path": {
          "type": "string",
          "description": "The path on the filesystem where source files must be read (Delimited files Only)."
        },
        "source_connection_properties": {
          "type": "object",
          "description": ""
        },
        "target_username": {
          "type": "string",
          "description": "The username this Connector will use to connect to the target database."
        },
        "target_password": {
          "type": "string",
          "description": "The username this Connector will use to connect to the target database."
        },
        "target_jdbc_url": {
          "type": "string",
          "description": "The JDBC URL used to connect to the target database."
        },
        "target_mongo_url": {
          "type": "string",
          "description": "The MongoDB URL used to connect to the target database."
        },
        "target_filesystem_path": {
          "type": "string",
          "description": "The path on the filesystem where target files must be written (Delimited files Only)."
        },
        "target_connection_properties": {
          "type": "object",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_connector_tags",
    "description": "GET /hyperscale-connectors/{hyperscaleConnectorId}/tags",
    "method": "get",
    "path": "/hyperscale-connectors/{hyperscaleConnectorId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_hyperscale_connector_tags",
    "description": "POST /hyperscale-connectors/{hyperscaleConnectorId}/tags",
    "method": "post",
    "path": "/hyperscale-connectors/{hyperscaleConnectorId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_hyperscale_connector_tags",
    "description": "POST /hyperscale-connectors/{hyperscaleConnectorId}/tags/delete",
    "method": "post",
    "path": "/hyperscale-connectors/{hyperscaleConnectorId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "search_hyperscale_connectors",
    "description": "POST /hyperscale-connectors/search",
    "method": "post",
    "path": "/hyperscale-connectors/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_datasets",
    "description": "GET /hyperscale-datasets",
    "method": "get",
    "path": "/hyperscale-datasets",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_dataset_by_id",
    "description": "GET /hyperscale-datasets/{hyperscaleDatasetId}",
    "method": "get",
    "path": "/hyperscale-datasets/{hyperscaleDatasetId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_hyperscale_dataset_by_id",
    "description": "PATCH /hyperscale-datasets/{hyperscaleDatasetId}",
    "method": "patch",
    "path": "/hyperscale-datasets/{hyperscaleDatasetId}",
    "parameters": {
      "type": "object",
      "properties": {
        "mount_point_id": {
          "type": "string",
          "description": "The Id of the Hyperscale Mount Point used for this Dataset."
        },
        "connector_id": {
          "type": "string",
          "description": "Id the Hyperscale Connector used to read sensitive data and write masked data."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_dataset_tags",
    "description": "GET /hyperscale-datasets/{hyperscaleDatasetId}/tags",
    "method": "get",
    "path": "/hyperscale-datasets/{hyperscaleDatasetId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_hyperscale_dataset_tags",
    "description": "POST /hyperscale-datasets/{hyperscaleDatasetId}/tags",
    "method": "post",
    "path": "/hyperscale-datasets/{hyperscaleDatasetId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_hyperscale_dataset_tags",
    "description": "POST /hyperscale-datasets/{hyperscaleDatasetId}/tags/delete",
    "method": "post",
    "path": "/hyperscale-datasets/{hyperscaleDatasetId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_dataset_table_or_file_by_id",
    "description": "GET /hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files/{hyperscaleDatasetTableOrFileId}",
    "method": "get",
    "path": "/hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files/{hyperscaleDatasetTableOrFileId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_hyperscale_dataset_table_or_file_by_id",
    "description": "PATCH /hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files/{hyperscaleDatasetTableOrFileId}",
    "method": "patch",
    "path": "/hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files/{hyperscaleDatasetTableOrFileId}",
    "parameters": {
      "type": "object",
      "properties": {
        "filter_key": {
          "type": "string",
          "description": "The unique database column field to filter the source data. Set this property to an empty string to clear the value."
        },
        "column_array_rows": {
          "type": "integer",
          "description": "The number of column array rows to be used by the sqlldr oracle utility which determines the number of rows loaded before the stream buffer is built."
        },
        "unload_split": {
          "type": "integer",
          "description": "The number of unloaded files to be generated from the source database."
        },
        "stream_size": {
          "type": "integer",
          "description": "Long The stream size to be used by the sqlldr oracle utility which specifies the size (in bytes) of the data stream sent from the client to the server."
        },
        "end_of_record": {
          "type": "string",
          "description": "The end of line character. Support values are \\n, \\r  and \\r\\n (Delimited files only)."
        },
        "delimiter": {
          "type": "string",
          "description": "The single character length delimiter used in source files (Delimited files only)."
        },
        "enclosure": {
          "type": "string",
          "description": "The single character length quote character used in the source files (Delimited files only)."
        },
        "enclosure_escape_character": {
          "type": "string",
          "description": "The escape character used to escape quote characters (Delimited files only)."
        },
        "escape_enclosure_escape_character": {
          "type": "boolean",
          "description": "Whether to escape the enclosure escape character (Delimited files only)."
        },
        "has_headers": {
          "type": "boolean",
          "description": "Whether source files have header column names or not (Delimited files only). If set to true, format files with the same column names are created and the same can be used for the masking inventory. If set to false, the column names of pattern f0, f1, f2, and so on are used to create the format files for delimited file masking."
        },
        "unique_source_files_identifier": {
          "type": "string",
          "description": "This is the source key that maps the load-service and masking-service data sets with the unload-service data set (Delimited files only). Please ensure that this value is different for each HyperscaleDatasetTableOrFile."
        },
        "source_files": {
          "type": "array",
          "description": "List of all source files that need to be masked (Delimited files only). All files should have the same delimiter character and other helper characters. All files should have the same number of columns and same column names if it has a header line."
        },
        "perform_join": {
          "type": "boolean",
          "description": "Whether the split files must be joined (Delimited files only)."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_hyperscale_dataset_tables_or_files",
    "description": "GET /hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files",
    "method": "get",
    "path": "/hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "search_hyperscale_dataset_tables_or_files",
    "description": "POST /hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files/search",
    "method": "post",
    "path": "/hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files/search",
    "parameters": {
      "type": "object",
      "properties": {
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "search_hyperscale_datasets",
    "description": "POST /hyperscale-datasets/search",
    "method": "post",
    "path": "/hyperscale-datasets/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_masking_execution_metrics_report",
    "description": "GET /reporting/masking-execution-metrics",
    "method": "get",
    "path": "/reporting/masking-execution-metrics",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_masking_execution_metrics_report",
    "description": "POST /reporting/masking-execution-metrics/search",
    "method": "post",
    "path": "/reporting/masking-execution-metrics/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_engine_global_object_state_report",
    "description": "GET /reporting/engine-global-object-state-report",
    "method": "get",
    "path": "/reporting/engine-global-object-state-report",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_engine_global_object_state_report",
    "description": "POST /reporting/engine-global-object-state-report/search",
    "method": "post",
    "path": "/reporting/engine-global-object-state-report/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_data_risk_report",
    "description": "GET /reporting/data-risk-report",
    "method": "get",
    "path": "/reporting/data-risk-report",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_data_risk_report",
    "description": "POST /reporting/data-risk-report/search",
    "method": "post",
    "path": "/reporting/data-risk-report/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 10000."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_classifiers",
    "description": "GET /classifiers",
    "method": "get",
    "path": "/classifiers",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_classifiers",
    "description": "POST /classifiers/search",
    "method": "post",
    "path": "/classifiers/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_classifier_by_id",
    "description": "GET /classifiers/{classifierId}",
    "method": "get",
    "path": "/classifiers/{classifierId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_classifier_discovery_policies",
    "description": "GET /classifiers/{classifierId}/discovery-policies",
    "method": "get",
    "path": "/classifiers/{classifierId}/discovery-policies",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_classifier_discovery_policies",
    "description": "POST /classifiers/{classifierId}/discovery-policies/search",
    "method": "post",
    "path": "/classifiers/{classifierId}/discovery-policies/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_classifier_tags",
    "description": "GET /classifiers/{classifierId}/tags",
    "method": "get",
    "path": "/classifiers/{classifierId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_classifier_tags",
    "description": "POST /classifiers/{classifierId}/tags",
    "method": "post",
    "path": "/classifiers/{classifierId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_classifier_tags",
    "description": "POST /classifiers/{classifierId}/tags/delete",
    "method": "post",
    "path": "/classifiers/{classifierId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_connectors",
    "description": "GET /connectors",
    "method": "get",
    "path": "/connectors",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_connector",
    "description": "POST /connectors",
    "method": "post",
    "path": "/connectors",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The Connector name."
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "hostname": {
          "type": "string",
          "description": "The network hostname or IP address of the database server."
        },
        "port": {
          "type": "integer",
          "description": "The TCP port of the server."
        },
        "username": {
          "type": "string",
          "description": "The username this Connector will use to connect to the database."
        },
        "password": {
          "type": "string",
          "description": "The password this Connector will use to connect to the database."
        },
        "database_type": {
          "type": "string",
          "description": "The database variant, such as Oracle, Postgres, MSSQL Server, etc. Currently supports Oracle only."
        },
        "jdbc_url": {
          "type": "string",
          "description": "The jdbc URL for this connector"
        },
        "schema_name": {
          "type": "string",
          "description": "The schema name for this connector"
        },
        "sid": {
          "type": "string",
          "description": "The SID value for this connector. This field is specific to Oracle database connectors"
        },
        "tags": {
          "type": "array",
          "description": ""
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this connector must be configured as owner of it."
        }
      },
      "required": [
        "name",
        "type"
      ]
    }
  },
  {
    "name": "get_connector_by_id",
    "description": "GET /connectors/{connectorId}",
    "method": "get",
    "path": "/connectors/{connectorId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_connector",
    "description": "DELETE /connectors/{connectorId}",
    "method": "delete",
    "path": "/connectors/{connectorId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_connector_by_id",
    "description": "PATCH /connectors/{connectorId}",
    "method": "patch",
    "path": "/connectors/{connectorId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The Connector name."
        },
        "hostname": {
          "type": "string",
          "description": "The network hostname or IP address of the database server."
        },
        "port": {
          "type": "integer",
          "description": "The TCP port of the server."
        },
        "username": {
          "type": "string",
          "description": "The username this Connector will use to connect to the database."
        },
        "password": {
          "type": "string",
          "description": "The password this Connector will use to connect to the database."
        },
        "jdbc_url": {
          "type": "string",
          "description": "The jdbc URL for this connector"
        },
        "schema_name": {
          "type": "string",
          "description": "The schema name for this connector"
        },
        "sid": {
          "type": "string",
          "description": "The SID value for this connector. This field is specific to Oracle database connectors"
        }
      },
      "required": []
    }
  },
  {
    "name": "search_connector_jobs",
    "description": "POST /connectors/{connectorId}/masking-jobs/search",
    "method": "post",
    "path": "/connectors/{connectorId}/masking-jobs/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_connector_tags",
    "description": "GET /connectors/{connectorId}/tags",
    "method": "get",
    "path": "/connectors/{connectorId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_connector_tags",
    "description": "POST /connectors/{connectorId}/tags",
    "method": "post",
    "path": "/connectors/{connectorId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_connector_tag",
    "description": "POST /connectors/{connectorId}/tags/delete",
    "method": "post",
    "path": "/connectors/{connectorId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "search_connectors",
    "description": "POST /connectors/search",
    "method": "post",
    "path": "/connectors/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_data_classes",
    "description": "GET /data-classes",
    "method": "get",
    "path": "/data-classes",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_data_class",
    "description": "POST /data-classes",
    "method": "post",
    "path": "/data-classes",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this data class."
        },
        "default_algorithm_id": {
          "type": "string",
          "description": "The ID of the default masking algorithm for this data class."
        },
        "default_token_algorithm_id": {
          "type": "string",
          "description": "The ID of the default tokenization algorithm for this data class."
        },
        "algorithm_ids": {
          "type": "array",
          "description": "The list of algorithm IDs available for this data class."
        },
        "description": {
          "type": "string",
          "description": "A description of this data class."
        },
        "example": {
          "type": "string",
          "description": "An example data value for this data class."
        },
        "tags": {
          "type": "array",
          "description": "The tags for this data class."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this data class must be configured as owner of it."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_data_classes",
    "description": "POST /data-classes/search",
    "method": "post",
    "path": "/data-classes/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_data_class_by_id",
    "description": "GET /data-classes/{dataClassId}",
    "method": "get",
    "path": "/data-classes/{dataClassId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_data_class",
    "description": "DELETE /data-classes/{dataClassId}",
    "method": "delete",
    "path": "/data-classes/{dataClassId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_data_class",
    "description": "PATCH /data-classes/{dataClassId}",
    "method": "patch",
    "path": "/data-classes/{dataClassId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this data class."
        },
        "default_algorithm_id": {
          "type": "string",
          "description": "The ID of the default masking algorithm for this data class."
        },
        "default_token_algorithm_id": {
          "type": "string",
          "description": "The ID of the default tokenization algorithm for this data class."
        },
        "algorithm_ids": {
          "type": "array",
          "description": "The list of algorithm IDs available for this data class."
        },
        "description": {
          "type": "string",
          "description": "A description of this data class."
        },
        "example": {
          "type": "string",
          "description": "An example data value for this data class."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_data_class_algorithms",
    "description": "GET /data-classes/{dataClassId}/algorithms",
    "method": "get",
    "path": "/data-classes/{dataClassId}/algorithms",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_data_class_algorithms",
    "description": "POST /data-classes/{dataClassId}/algorithms/search",
    "method": "post",
    "path": "/data-classes/{dataClassId}/algorithms/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_data_class_tags",
    "description": "GET /data-classes/{dataClassId}/tags",
    "method": "get",
    "path": "/data-classes/{dataClassId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_data_class_tags",
    "description": "POST /data-classes/{dataClassId}/tags",
    "method": "post",
    "path": "/data-classes/{dataClassId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_data_class_tags",
    "description": "POST /data-classes/{dataClassId}/tags/delete",
    "method": "post",
    "path": "/data-classes/{dataClassId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_discovery_policies",
    "description": "GET /discovery-policies",
    "method": "get",
    "path": "/discovery-policies",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_discovery_policies",
    "description": "POST /discovery-policies/search",
    "method": "post",
    "path": "/discovery-policies/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_discovery_policy_by_id",
    "description": "GET /discovery-policies/{discoveryPolicyId}",
    "method": "get",
    "path": "/discovery-policies/{discoveryPolicyId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_discovery_policy_classifiers",
    "description": "GET /discovery-policies/{discoveryPolicyId}/classifiers",
    "method": "get",
    "path": "/discovery-policies/{discoveryPolicyId}/classifiers",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_discovery_policy_classifiers",
    "description": "POST /discovery-policies/{discoveryPolicyId}/classifiers/search",
    "method": "post",
    "path": "/discovery-policies/{discoveryPolicyId}/classifiers/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_discovery_policy_expressions",
    "description": "GET /discovery-policies/{discoveryPolicyId}/expressions",
    "method": "get",
    "path": "/discovery-policies/{discoveryPolicyId}/expressions",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The"
        }
      },
      "required": []
    }
  },
  {
    "name": "search_discovery_policy_expressions",
    "description": "POST /discovery-policies/{discoveryPolicyId}/expressions/search",
    "method": "post",
    "path": "/discovery-policies/{discoveryPolicyId}/expressions/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The"
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_discovery_policy_tags",
    "description": "GET /discovery-policies/{discoveryPolicyId}/tags",
    "method": "get",
    "path": "/discovery-policies/{discoveryPolicyId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_discovery_policy_tags",
    "description": "POST /discovery-policies/{discoveryPolicyId}/tags",
    "method": "post",
    "path": "/discovery-policies/{discoveryPolicyId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_discovery_policy_tags",
    "description": "POST /discovery-policies/{discoveryPolicyId}/tags/delete",
    "method": "post",
    "path": "/discovery-policies/{discoveryPolicyId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_executions",
    "description": "GET /executions",
    "method": "get",
    "path": "/executions",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_executions",
    "description": "POST /executions/search",
    "method": "post",
    "path": "/executions/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_execution_by_id",
    "description": "GET /executions/{executionId}",
    "method": "get",
    "path": "/executions/{executionId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "cancel_execution",
    "description": "POST /executions/{executionId}/cancel",
    "method": "post",
    "path": "/executions/{executionId}/cancel",
    "parameters": {
      "type": "object",
      "properties": {
        "expected_status": {
          "type": "string",
          "description": "The expected status of the execution to cancel to prevent cancelling a queued job that has transitioned to a running state since the request was issued (Standard Job only)."
        }
      },
      "required": []
    }
  },
  {
    "name": "restart_execution",
    "description": "POST /executions/{executionId}/restart",
    "method": "post",
    "path": "/executions/{executionId}/restart",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "cleanup_execution",
    "description": "POST /executions/{executionId}/cleanup",
    "method": "post",
    "path": "/executions/{executionId}/cleanup",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_execution_events",
    "description": "GET /executions/{executionId}/events",
    "method": "get",
    "path": "/executions/{executionId}/events",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_execution_events",
    "description": "POST /executions/{executionId}/events/search",
    "method": "post",
    "path": "/executions/{executionId}/events/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_execution_log",
    "description": "GET /executions/{executionId}/log",
    "method": "get",
    "path": "/executions/{executionId}/log",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_execution_components",
    "description": "GET /executions/{executionId}/execution-components",
    "method": "get",
    "path": "/executions/{executionId}/execution-components",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_execution_components",
    "description": "POST /executions/{executionId}/execution-components/search",
    "method": "post",
    "path": "/executions/{executionId}/execution-components/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_execution_component_by_id",
    "description": "GET /executions/{executionId}/execution-components/{executionComponentId}",
    "method": "get",
    "path": "/executions/{executionId}/execution-components/{executionComponentId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_execution_component_log",
    "description": "GET /executions/{executionId}/execution-components/{executionComponentId}/log",
    "method": "get",
    "path": "/executions/{executionId}/execution-components/{executionComponentId}/log",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_discovery_results",
    "description": "GET /executions/{executionId}/discovery-results",
    "method": "get",
    "path": "/executions/{executionId}/discovery-results",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_discovery_results",
    "description": "POST /executions/{executionId}/discovery-results/search",
    "method": "post",
    "path": "/executions/{executionId}/discovery-results/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_masking_files",
    "description": "GET /masking-file-uploads",
    "method": "get",
    "path": "/masking-file-uploads",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "upload_masking_file",
    "description": "POST /masking-file-uploads",
    "method": "post",
    "path": "/masking-file-uploads",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_masking_file_by_id",
    "description": "GET /masking-file-uploads/{maskingFileId}",
    "method": "get",
    "path": "/masking-file-uploads/{maskingFileId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_masking_file_upload_by_id",
    "description": "PATCH /masking-file-uploads/{maskingFileId}",
    "method": "patch",
    "path": "/masking-file-uploads/{maskingFileId}",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description for this masking file."
        }
      },
      "required": [
        "description"
      ]
    }
  },
  {
    "name": "search_masking_files",
    "description": "POST /masking-file-uploads/search",
    "method": "post",
    "path": "/masking-file-uploads/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_masking_file_tags",
    "description": "GET /masking-file-uploads/{maskingFileId}/tags",
    "method": "get",
    "path": "/masking-file-uploads/{maskingFileId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_masking_file_tags",
    "description": "POST /masking-file-uploads/{maskingFileId}/tags",
    "method": "post",
    "path": "/masking-file-uploads/{maskingFileId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "maskingFileId": {
          "type": "string",
          "description": "The ID or name of the masking file."
        },
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags",
        "maskingFileId"
      ]
    }
  },
  {
    "name": "delete_masking_file_tags",
    "description": "POST /masking-file-uploads/{maskingFileId}/tags/delete",
    "method": "post",
    "path": "/masking-file-uploads/{maskingFileId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_masking_file_consumers",
    "description": "GET /masking-file-uploads/{maskingFileId}/consumers",
    "method": "get",
    "path": "/masking-file-uploads/{maskingFileId}/consumers",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_masking_file_consumers",
    "description": "POST /masking-file-uploads/{maskingFileId}/consumers/search",
    "method": "post",
    "path": "/masking-file-uploads/{maskingFileId}/consumers/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_masking_jobs",
    "description": "GET /masking-jobs",
    "method": "get",
    "path": "/masking-jobs",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_masking_job",
    "description": "POST /masking-jobs",
    "method": "post",
    "path": "/masking-jobs",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name to give the Masking Job."
        },
        "description": {
          "type": "string",
          "description": "The description of the Job (Hyperscale Job only)."
        },
        "job_type": {
          "type": "string",
          "description": "The type of Job."
        },
        "hyperscale_instance_id": {
          "type": "string",
          "description": "The ID of the HyperscaleInstance to create this Job on (Hyperscale Job only)."
        },
        "source_masking_job_id": {
          "type": "string",
          "description": "The ID of the Masking Job to use as the source (Hyperscale Job only)."
        },
        "hyperscale_source_connector_username": {
          "type": "string",
          "description": "The username to set for the Source Connector that will be imported (Hyperscale Job only)."
        },
        "hyperscale_source_connector_password": {
          "type": "string",
          "description": "The password to set for the Source Connector that will be imported (Hyperscale Job only)."
        },
        "hyperscale_target_connector_username": {
          "type": "string",
          "description": "The username to set for the Target Connector that will be imported (Hyperscale Job only)."
        },
        "hyperscale_target_connector_password": {
          "type": "string",
          "description": "The password to set for the Target Connector that will be imported (Hyperscale Job only)."
        },
        "mount_point_id": {
          "type": "string",
          "description": "The ID of the MountPoint to use for the resulting dataset (Hyperscale Job only)."
        },
        "unload_split": {
          "type": "integer",
          "description": "The number of unloaded files to be generated from the source database (Hyperscale Job only)."
        },
        "stream_size": {
          "type": "integer",
          "description": "The stream size to be used by the sqlldr oracle utility which specifies the size (in bytes) of the data stream sent from the client to the server (Hyperscale Job only)."
        },
        "retain_execution_data": {
          "type": "string",
          "description": "Defines whether execution data will be stored after execution is complete (Hyperscale Job only)."
        },
        "max_memory": {
          "type": "integer",
          "description": "Maximum memory, in MB, to be allocated for each Masking job (Hyperscale Job only)."
        },
        "min_memory": {
          "type": "integer",
          "description": "Minimum memory, in MB, to be allocated for each Masking job (Hyperscale Job only)."
        },
        "feedback_size": {
          "type": "integer",
          "description": "The granularity with which the masking engine provides updates on the progress of the masking job. For instance, a feedbackSize of 50000 results in log updates whenever 50000 rows are processed during the masking phase (Hyperscale Job only)."
        },
        "stream_row_limit": {
          "type": "integer",
          "description": "The stream row limit constrains the total number of rows that may enter the job for each masking stream. Setting this value to 0 allows unlimited rows into each stream, while leaving it blank will select a default limit based on job type (Hyperscale Job only)."
        },
        "num_input_streams": {
          "type": "integer",
          "description": "Number of input streams to be configured for Masking Job (Hyperscale Job only)."
        },
        "max_concurrent_source_connections": {
          "type": "integer",
          "description": "Maximum number of parallel connection that the Hyperscale instance can have with the source datasource (Hyperscale Job only)."
        },
        "max_concurrent_target_connections": {
          "type": "integer",
          "description": "Maximum number of parallel connection that the Hyperscale instance can have with the target datasource (Hyperscale Job only)."
        },
        "parallelism_degree": {
          "type": "integer",
          "description": "The degree of parallelism (DOP) per Oracle job to recreate the index in the post-load process (Hyperscale Job only)."
        },
        "tags": {
          "type": "array",
          "description": ""
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this Masking job must be configured as owner of it (Hyperscale Job only)."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_masking_jobs",
    "description": "POST /masking-jobs/search",
    "method": "post",
    "path": "/masking-jobs/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_masking_job_source_engines",
    "description": "GET /masking-jobs/source-engines",
    "method": "get",
    "path": "/masking-jobs/source-engines",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_masking_job_source_engines",
    "description": "POST /masking-jobs/source-engines/search",
    "method": "post",
    "path": "/masking-jobs/source-engines/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_masking_job_by_id",
    "description": "GET /masking-jobs/{maskingJobId}",
    "method": "get",
    "path": "/masking-jobs/{maskingJobId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_masking_job",
    "description": "DELETE /masking-jobs/{maskingJobId}",
    "method": "delete",
    "path": "/masking-jobs/{maskingJobId}",
    "parameters": {
      "type": "object",
      "properties": {
        "force": {
          "type": "boolean",
          "description": "If true, ignores any failures to remove a masking job on an engine."
        }
      },
      "required": []
    }
  },
  {
    "name": "update_masking_job_by_id",
    "description": "PATCH /masking-jobs/{maskingJobId}",
    "method": "patch",
    "path": "/masking-jobs/{maskingJobId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the MaskingJob."
        },
        "connector_username": {
          "type": "string",
          "description": "The username of the Connector used by the MaskingJob. (Standard Job only)."
        },
        "connector_password": {
          "type": "string",
          "description": "The password of the Connector used by the MaskingJob. (Standard Job only)."
        },
        "on_the_fly_source_connector_username": {
          "type": "string",
          "description": "The username of the source Connector used by the on-the-fly MaskingJob. (Standard Job only)."
        },
        "on_the_fly_source_connector_password": {
          "type": "string",
          "description": "The password of the source Connector used by the on-the-fly MaskingJob. (Standard Job only)."
        },
        "description": {
          "type": "string",
          "description": "Description of the Job (Hyperscale Job only)."
        },
        "dataset_id": {
          "type": "string",
          "description": "Dataset of the Hyperscale Job (Hyperscale Job only)."
        },
        "retain_execution_data": {
          "type": "string",
          "description": "Defines whether execution data will be stored after execution is complete (Hyperscale Job only)."
        },
        "max_memory": {
          "type": "integer",
          "description": "Maximum memory to be allocated for each Masking job (Hyperscale Job only)."
        },
        "min_memory": {
          "type": "integer",
          "description": "Minimum memory to be allocated for each Masking job (Hyperscale Job only)."
        },
        "feedback_size": {
          "type": "integer",
          "description": "Feedback Size for each Masking job (Hyperscale Job only)."
        },
        "stream_row_limit": {
          "type": "integer",
          "description": "Stream Row Limit for each Masking job (Hyperscale Job only)."
        },
        "num_input_streams": {
          "type": "integer",
          "description": "Number of input streams to be configured for Masking Job (Hyperscale Job only)."
        },
        "max_concurrent_source_connections": {
          "type": "integer",
          "description": "Maximum number of parallel connection that the Hyperscale instance can have with the source datasource (Hyperscale Job only)."
        },
        "max_concurrent_target_connections": {
          "type": "integer",
          "description": "Maximum number of parallel connection that the Hyperscale instance can have with the target datasource (Hyperscale Job only)."
        },
        "parallelism_degree": {
          "type": "integer",
          "description": "The degree of parallelism (DOP) per Oracle job to recreate the index in the post-load process (Hyperscale Job only)."
        }
      },
      "required": []
    }
  },
  {
    "name": "copy_masking_job",
    "description": "POST /masking-jobs/{maskingJobId}/copy",
    "method": "post",
    "path": "/masking-jobs/{maskingJobId}/copy",
    "parameters": {
      "type": "object",
      "properties": {
        "target_engine_id": {
          "type": "string",
          "description": "The ID of the engine to copy the job to."
        },
        "source_environment_id": {
          "type": "string",
          "description": "The ID or name of the source environment on the target engine. This only applies to On-The-Fly jobs."
        },
        "target_environment_id": {
          "type": "string",
          "description": "The ID or name of the target environment on the target engine to copy the job into."
        },
        "force_overwrite": {
          "type": "boolean",
          "description": "Whether to overwrite objects that already exist on the target engine."
        }
      },
      "required": [
        "target_engine_id"
      ]
    }
  },
  {
    "name": "migrate_masking_job",
    "description": "POST /masking-jobs/{maskingJobId}/migrate",
    "method": "post",
    "path": "/masking-jobs/{maskingJobId}/migrate",
    "parameters": {
      "type": "object",
      "properties": {
        "target_engine_id": {
          "type": "string",
          "description": "The ID of the engine to migrate the job to."
        },
        "source_environment_id": {
          "type": "string",
          "description": "The ID or name of the source environment on the target engine. This only applies to On-The-Fly jobs."
        },
        "target_environment_id": {
          "type": "string",
          "description": "The ID or name of the target environment on the target engine to migrate the job into."
        },
        "force_overwrite": {
          "type": "boolean",
          "description": "Whether to overwrite objects that already exist on the target engine."
        }
      },
      "required": [
        "target_engine_id"
      ]
    }
  },
  {
    "name": "get_masking_job_connectors",
    "description": "GET /masking-jobs/{maskingJobId}/connectors",
    "method": "get",
    "path": "/masking-jobs/{maskingJobId}/connectors",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "execute_masking_job",
    "description": "POST /masking-jobs/{maskingJobId}/execute",
    "method": "post",
    "path": "/masking-jobs/{maskingJobId}/execute",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": "The ID of the Engine to execute this MaskingJob on (Standard job only)."
        }
      },
      "required": []
    }
  },
  {
    "name": "re_import_masking_job",
    "description": "POST /masking-jobs/{maskingJobId}/re-import",
    "method": "post",
    "path": "/masking-jobs/{maskingJobId}/re-import",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_masking_job_tag",
    "description": "GET /masking-jobs/{maskingJobId}/tags",
    "method": "get",
    "path": "/masking-jobs/{maskingJobId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_masking_job_tag",
    "description": "POST /masking-jobs/{maskingJobId}/tags",
    "method": "post",
    "path": "/masking-jobs/{maskingJobId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_masking_job_tag",
    "description": "POST /masking-jobs/{maskingJobId}/tags/delete",
    "method": "post",
    "path": "/masking-jobs/{maskingJobId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "add_engine_to_masking_job",
    "description": "POST /masking-jobs/{maskingJobId}/add-engine",
    "method": "post",
    "path": "/masking-jobs/{maskingJobId}/add-engine",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "remove_engine_from_masking_job",
    "description": "POST /masking-jobs/{maskingJobId}/remove-engine",
    "method": "post",
    "path": "/masking-jobs/{maskingJobId}/remove-engine",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_algorithms",
    "description": "GET /algorithms",
    "method": "get",
    "path": "/algorithms",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_algorithm",
    "description": "POST /algorithms",
    "method": "post",
    "path": "/algorithms",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this Algorithm."
        },
        "description": {
          "type": "string",
          "description": "A description of this algorithm."
        },
        "config": {
          "type": "object",
          "description": "The configuration of this algorithm."
        },
        "framework_id": {
          "type": "string",
          "description": "Id for the framework of this algorithm."
        },
        "data_class_ids": {
          "type": "array",
          "description": "The data classes this algorithm to be associated with."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this algorithm must be configured as owner of it."
        },
        "tags": {
          "type": "array",
          "description": "The tags of this algorithm."
        }
      },
      "required": [
        "config",
        "name",
        "framework_id"
      ]
    }
  },
  {
    "name": "get_algorithm_by_id",
    "description": "GET /algorithms/{algorithmId}",
    "method": "get",
    "path": "/algorithms/{algorithmId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_algorithm",
    "description": "DELETE /algorithms/{algorithmId}",
    "method": "delete",
    "path": "/algorithms/{algorithmId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_algorithm",
    "description": "PATCH /algorithms/{algorithmId}",
    "method": "patch",
    "path": "/algorithms/{algorithmId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this Algorithm."
        },
        "description": {
          "type": "string",
          "description": "A description of this algorithm."
        },
        "config": {
          "type": "object",
          "description": "The configuration of this algorithm."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_algorithms",
    "description": "POST /algorithms/search",
    "method": "post",
    "path": "/algorithms/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_algorithm_tags",
    "description": "GET /algorithms/{algorithmId}/tags",
    "method": "get",
    "path": "/algorithms/{algorithmId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_algorithm_tags",
    "description": "POST /algorithms/{algorithmId}/tags",
    "method": "post",
    "path": "/algorithms/{algorithmId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_algorithm_tags",
    "description": "POST /algorithms/{algorithmId}/tags/delete",
    "method": "post",
    "path": "/algorithms/{algorithmId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_algorithm_dependencies_by_id",
    "description": "GET /algorithms/{algorithmId}/dependencies",
    "method": "get",
    "path": "/algorithms/{algorithmId}/dependencies",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "search_algorithm_dependencies",
    "description": "POST /algorithms/{algorithmId}/dependencies/search",
    "method": "post",
    "path": "/algorithms/{algorithmId}/dependencies/search",
    "parameters": {
      "type": "object",
      "properties": {
        "algorithmId": {
          "type": "string",
          "description": "The ID of the Algorithm."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "algorithmId"
      ]
    }
  },
  {
    "name": "validate_algorithm_config",
    "description": "POST /algorithms/validate-config",
    "method": "post",
    "path": "/algorithms/validate-config",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this Algorithm."
        },
        "config": {
          "type": "object",
          "description": "The configuration of this algorithm."
        },
        "framework_id": {
          "type": "string",
          "description": "Id for the framework of this algorithm."
        }
      },
      "required": [
        "config",
        "name",
        "framework_id"
      ]
    }
  },
  {
    "name": "get_masking_environments",
    "description": "GET /masking-environments",
    "method": "get",
    "path": "/masking-environments",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_masking_environments",
    "description": "POST /masking-environments/search",
    "method": "post",
    "path": "/masking-environments/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_masking_environment_by_id",
    "description": "GET /masking-environments/{maskingEnvironmentId}",
    "method": "get",
    "path": "/masking-environments/{maskingEnvironmentId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_masking_plugins",
    "description": "GET /masking-plugins",
    "method": "get",
    "path": "/masking-plugins",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_masking_plugin_by_id",
    "description": "GET /masking-plugins/{maskingPluginId}",
    "method": "get",
    "path": "/masking-plugins/{maskingPluginId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "search_masking_plugins",
    "description": "POST /masking-plugins/search",
    "method": "post",
    "path": "/masking-plugins/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_algorithm_framework_by_id",
    "description": "GET /algorithm-frameworks/{algorithmFrameworkId}",
    "method": "get",
    "path": "/algorithm-frameworks/{algorithmFrameworkId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_rule_sets",
    "description": "GET /rule-sets",
    "method": "get",
    "path": "/rule-sets",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_rule_set",
    "description": "POST /rule-sets",
    "method": "post",
    "path": "/rule-sets",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this rule set."
        },
        "connector_id": {
          "type": "string",
          "description": "The ID of the connector this rule set uses."
        },
        "refresh_drops_tables": {
          "type": "boolean",
          "description": "This applies when table metadata exists in DCT, but the corresponding table no longer exists in the external database. In that event, true will cause the refresh operation to delete the invalid table metadata, whereas false will fail the refresh instead."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this rule set must be configured as owner of it."
        },
        "tags": {
          "type": "array",
          "description": "The tags for this rule set."
        }
      },
      "required": [
        "name",
        "connector_id"
      ]
    }
  },
  {
    "name": "search_rule_sets",
    "description": "POST /rule-sets/search",
    "method": "post",
    "path": "/rule-sets/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_rule_set_by_id",
    "description": "GET /rule-sets/{ruleSetId}",
    "method": "get",
    "path": "/rule-sets/{ruleSetId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_rule_set",
    "description": "DELETE /rule-sets/{ruleSetId}",
    "method": "delete",
    "path": "/rule-sets/{ruleSetId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_rule_set",
    "description": "PATCH /rule-sets/{ruleSetId}",
    "method": "patch",
    "path": "/rule-sets/{ruleSetId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this rule set."
        },
        "refresh_drops_tables": {
          "type": "boolean",
          "description": "This applies when table metadata exists in DCT, but the corresponding table no longer exists in the external database. In that event, true will cause the refresh operation to delete the invalid table metadata, whereas false will fail the refresh instead."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_rule_set_tags",
    "description": "GET /rule-sets/{ruleSetId}/tags",
    "method": "get",
    "path": "/rule-sets/{ruleSetId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_rule_set_tags",
    "description": "POST /rule-sets/{ruleSetId}/tags",
    "method": "post",
    "path": "/rule-sets/{ruleSetId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_rule_set_tags",
    "description": "POST /rule-sets/{ruleSetId}/tags/delete",
    "method": "post",
    "path": "/rule-sets/{ruleSetId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_database_table_metadata",
    "description": "GET /database-table-metadata",
    "method": "get",
    "path": "/database-table-metadata",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_database_table_metadata",
    "description": "POST /database-table-metadata/search",
    "method": "post",
    "path": "/database-table-metadata/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_database_column_metadata",
    "description": "GET /database-column-metadata",
    "method": "get",
    "path": "/database-column-metadata",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_database_column_metadata",
    "description": "POST /database-column-metadata/search",
    "method": "post",
    "path": "/database-column-metadata/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_discovery_expressions",
    "description": "GET /discovery-expressions",
    "method": "get",
    "path": "/discovery-expressions",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The"
        }
      },
      "required": []
    }
  },
  {
    "name": "search_discovery_expressions",
    "description": "POST /discovery-expressions/search",
    "method": "post",
    "path": "/discovery-expressions/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The"
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_discovery_expression_by_id",
    "description": "GET /discovery-expressions/{expressionId}",
    "method": "get",
    "path": "/discovery-expressions/{expressionId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_discovery_expression_tags",
    "description": "GET /discovery-expressions/{expressionId}/tags",
    "method": "get",
    "path": "/discovery-expressions/{expressionId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_discovery_expression_tags",
    "description": "POST /discovery-expressions/{expressionId}/tags",
    "method": "post",
    "path": "/discovery-expressions/{expressionId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_discovery_expression_tags",
    "description": "POST /discovery-expressions/{expressionId}/tags/delete",
    "method": "post",
    "path": "/discovery-expressions/{expressionId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_compliance_jobs",
    "description": "GET /compliance-jobs",
    "method": "get",
    "path": "/compliance-jobs",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_compliance_job",
    "description": "POST /compliance-jobs",
    "method": "post",
    "path": "/compliance-jobs",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this compliance job."
        },
        "description": {
          "type": "string",
          "description": "A description of the compliance job."
        },
        "rule_set_id": {
          "type": "string",
          "description": "The ID of the Rule Set used by this compliance job."
        },
        "max_memory": {
          "type": "integer",
          "description": "The maximum amount of memory, in MB, that the compliance job can consume during execution."
        },
        "min_memory": {
          "type": "integer",
          "description": "The minimum amount of memory, in MB, that the compliance job can consume during execution."
        },
        "feedback_size": {
          "type": "integer",
          "description": "The granularity with which the system provides updates on the progress of the compliance job. For instance, a feedback size of 50000 results in log updates whenever 50000 rows are processed during the masking phase."
        },
        "stream_row_limit": {
          "type": "integer",
          "description": "This value constrains the total number of rows that may enter the job for each masking stream. A setting of 0 means unlimited. A value of -1 selects the default value. The minimum explicit value allowed is 20."
        },
        "num_input_streams": {
          "type": "integer",
          "description": "This field controls the amount of parallelism that the masking job uses to extract out the data to be masked. For instance, when masking a database, specifying 5 input streams results in the compliance job reading up to 5 database tables in parallel and then masking those 5 streams of data in parallel. The higher the value of this field, the more potential parallelism there will be in the job, but the masking job will consume more memory. If the number of input streams exceeds the number of units being masked (e.g. tables or files), then the excess streams will do nothing."
        },
        "fail_immediately": {
          "type": "boolean",
          "description": "Whether to fail immediately or delay failure until job completion when a masking algorithm fails to mask its data."
        },
        "batch_update": {
          "type": "boolean",
          "description": "Whether the database load phase to output the masked data will be performed in batches. The size of the batches is determined by the field 'commit_size'."
        },
        "commit_size": {
          "type": "integer",
          "description": "The size of the database commits when performing batch updates."
        },
        "num_output_threads_per_stream": {
          "type": "integer",
          "description": "The amount of parallelism, per input stream, that the job uses to load back the masked data. For example, specifying 4 output threads per stream with 5 input streams results in a total of 20 output threads for the whole job."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this compliance job should be configured as its owner."
        },
        "tags": {
          "type": "array",
          "description": "The tags to set on the compliance job."
        }
      },
      "required": [
        "name",
        "rule_set_id"
      ]
    }
  },
  {
    "name": "search_compliance_jobs",
    "description": "POST /compliance-jobs/search",
    "method": "post",
    "path": "/compliance-jobs/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_compliance_job_by_id",
    "description": "GET /compliance-jobs/{complianceJobId}",
    "method": "get",
    "path": "/compliance-jobs/{complianceJobId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_compliance_job",
    "description": "DELETE /compliance-jobs/{complianceJobId}",
    "method": "delete",
    "path": "/compliance-jobs/{complianceJobId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_compliance_job",
    "description": "PATCH /compliance-jobs/{complianceJobId}",
    "method": "patch",
    "path": "/compliance-jobs/{complianceJobId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this compliance job."
        },
        "description": {
          "type": "string",
          "description": "A description of the compliance job."
        },
        "rule_set_id": {
          "type": "string",
          "description": "The ID of the Rule Set used by this compliance job."
        },
        "max_memory": {
          "type": "integer",
          "description": "The maximum amount of memory, in MB, that the compliance job can consume during execution."
        },
        "min_memory": {
          "type": "integer",
          "description": "The minimum amount of memory, in MB, that the compliance job can consume during execution."
        },
        "feedback_size": {
          "type": "integer",
          "description": "The granularity with which the system provides updates on the progress of the compliance job. For instance, a feedback size of 50000 results in log updates whenever 50000 rows are processed during the masking phase."
        },
        "stream_row_limit": {
          "type": "integer",
          "description": "This value constrains the total number of rows that may enter the job for each masking stream. A setting of 0 means unlimited. A value of -1 selects the default value. The minimum explicit value allowed is 20."
        },
        "num_input_streams": {
          "type": "integer",
          "description": "This field controls the amount of parallelism that the masking job uses to extract out the data to be masked. For instance, when masking a database, specifying 5 input streams results in the compliance job reading up to 5 database tables in parallel and then masking those 5 streams of data in parallel. The higher the value of this field, the more potential parallelism there will be in the job, but the masking job will consume more memory. If the number of input streams exceeds the number of units being masked (e.g. tables or files), then the excess streams will do nothing."
        },
        "fail_immediately": {
          "type": "boolean",
          "description": "Whether to fail immediately or delay failure until job completion when a masking algorithm fails to mask its data."
        },
        "batch_update": {
          "type": "boolean",
          "description": "Whether the database load phase to output the masked data will be performed in batches. The size of the batches is determined by the field 'commit_size'."
        },
        "commit_size": {
          "type": "integer",
          "description": "The size of the database commits when performing batch updates."
        },
        "num_output_threads_per_stream": {
          "type": "integer",
          "description": "The amount of parallelism, per input stream, that the job uses to load back the masked data. For example, specifying 4 output threads per stream with 5 input streams results in a total of 20 output threads for the whole job."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_compliance_job_connectors",
    "description": "GET /compliance-jobs/{complianceJobId}/connectors",
    "method": "get",
    "path": "/compliance-jobs/{complianceJobId}/connectors",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "get_compliance_job_tag",
    "description": "GET /compliance-jobs/{complianceJobId}/tags",
    "method": "get",
    "path": "/compliance-jobs/{complianceJobId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_compliance_job_tag",
    "description": "POST /compliance-jobs/{complianceJobId}/tags",
    "method": "post",
    "path": "/compliance-jobs/{complianceJobId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_compliance_job_tag",
    "description": "POST /compliance-jobs/{complianceJobId}/tags/delete",
    "method": "post",
    "path": "/compliance-jobs/{complianceJobId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "execute_compliance_job",
    "description": "POST /compliance-jobs/{complianceJobId}/execute",
    "method": "post",
    "path": "/compliance-jobs/{complianceJobId}/execute",
    "parameters": {
      "type": "object",
      "properties": {
        "_placeholder": {
          "type": "boolean",
          "description": "Internal property added to force the generator to generate model. This can be removed when actual properties are added."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_compliance_job_collections",
    "description": "GET /compliance-job-collections",
    "method": "get",
    "path": "/compliance-job-collections",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_compliance_job_collection",
    "description": "POST /compliance-job-collections",
    "method": "post",
    "path": "/compliance-job-collections",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the compliance job collection."
        },
        "description": {
          "type": "string",
          "description": "The description of the compliance job collection."
        },
        "failure_handling": {
          "type": "string",
          "description": ""
        },
        "members": {
          "type": "array",
          "description": "The list of compliance job IDs and their collection sequence to be included in the collection."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for this compliance job collection."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "search_compliance_job_collections",
    "description": "POST /compliance-job-collections/search",
    "method": "post",
    "path": "/compliance-job-collections/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_compliance_job_collection_by_id",
    "description": "GET /compliance-job-collections/{complianceJobCollectionId}",
    "method": "get",
    "path": "/compliance-job-collections/{complianceJobCollectionId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_compliance_job_collection",
    "description": "DELETE /compliance-job-collections/{complianceJobCollectionId}",
    "method": "delete",
    "path": "/compliance-job-collections/{complianceJobCollectionId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_compliance_job_collection",
    "description": "PATCH /compliance-job-collections/{complianceJobCollectionId}",
    "method": "patch",
    "path": "/compliance-job-collections/{complianceJobCollectionId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the compliance job collection."
        },
        "description": {
          "type": "string",
          "description": "The description of the compliance job collection."
        },
        "failure_handling": {
          "type": "string",
          "description": ""
        },
        "members": {
          "type": "array",
          "description": "The list of compliance job IDs and their collection sequence to be included in the collection."
        }
      },
      "required": []
    }
  },
  {
    "name": "execute_compliance_job_collection",
    "description": "POST /compliance-job-collections/{complianceJobCollectionId}/execute",
    "method": "post",
    "path": "/compliance-job-collections/{complianceJobCollectionId}/execute",
    "parameters": {
      "type": "object",
      "properties": {
        "_placeholder": {
          "type": "boolean",
          "description": "Internal property added to force the generator to generate model. This can be removed when actual properties are added."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_compliance_job_collection_jobs",
    "description": "GET /compliance-job-collections/{complianceJobCollectionId}/jobs",
    "method": "get",
    "path": "/compliance-job-collections/{complianceJobCollectionId}/jobs",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_compliance_job_collection_jobs",
    "description": "POST /compliance-job-collections/{complianceJobCollectionId}/jobs/search",
    "method": "post",
    "path": "/compliance-job-collections/{complianceJobCollectionId}/jobs/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_compliance_job_collection_tags",
    "description": "GET /compliance-job-collections/{complianceJobCollectionId}/tags",
    "method": "get",
    "path": "/compliance-job-collections/{complianceJobCollectionId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_compliance_job_collection_tags",
    "description": "POST /compliance-job-collections/{complianceJobCollectionId}/tags",
    "method": "post",
    "path": "/compliance-job-collections/{complianceJobCollectionId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_compliance_job_collection_tags",
    "description": "POST /compliance-job-collections/{complianceJobCollectionId}/tags/delete",
    "method": "post",
    "path": "/compliance-job-collections/{complianceJobCollectionId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "get_job_collection_executions",
    "description": "GET /job-collection-executions",
    "method": "get",
    "path": "/job-collection-executions",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "search_job_collection_executions",
    "description": "POST /job-collection-executions/search",
    "method": "post",
    "path": "/job-collection-executions/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_job_collection_execution_by_id",
    "description": "GET /job-collection-executions/{jobCollectionExecutionId}",
    "method": "get",
    "path": "/job-collection-executions/{jobCollectionExecutionId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "cancel_job_collection_execution",
    "description": "POST /job-collection-executions/{jobCollectionExecutionId}/cancel",
    "method": "post",
    "path": "/job-collection-executions/{jobCollectionExecutionId}/cancel",
    "parameters": {
      "type": "object",
      "properties": {
        "_placeholder": {
          "type": "boolean",
          "description": "Internal property added to force the generator to generate model. This can be removed when actual properties are added."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_job_orchestrators",
    "description": "GET /job-orchestrators",
    "method": "get",
    "path": "/job-orchestrators",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        }
      },
      "required": []
    }
  },
  {
    "name": "create_job_orchestrator",
    "description": "POST /job-orchestrators",
    "method": "post",
    "path": "/job-orchestrators",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the job orchestrator."
        },
        "description": {
          "type": "string",
          "description": "The description of the job orchestrator."
        },
        "tags": {
          "type": "array",
          "description": "The tags to be created for this compliance job collection."
        },
        "make_current_account_owner": {
          "type": "boolean",
          "description": "Whether the account creating this Job Orchestrator must be configured as its owner."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "search_job_orchestrators",
    "description": "POST /job-orchestrators/search",
    "method": "post",
    "path": "/job-orchestrators/search",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints."
        },
        "sort": {
          "type": "string",
          "description": "The field to sort results by. A property name with a prepended '-' signifies a descending order."
        },
        "filter_expression": {
          "type": "string",
          "description": ""
        }
      },
      "required": []
    }
  },
  {
    "name": "get_job_orchestrator_by_id",
    "description": "GET /job-orchestrators/{jobOrchestratorId}",
    "method": "get",
    "path": "/job-orchestrators/{jobOrchestratorId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "delete_job_orchestrator",
    "description": "DELETE /job-orchestrators/{jobOrchestratorId}",
    "method": "delete",
    "path": "/job-orchestrators/{jobOrchestratorId}",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "update_job_orchestrator",
    "description": "PATCH /job-orchestrators/{jobOrchestratorId}",
    "method": "patch",
    "path": "/job-orchestrators/{jobOrchestratorId}",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the job orchestrator."
        },
        "description": {
          "type": "string",
          "description": "The description of the job orchestrator."
        }
      },
      "required": []
    }
  },
  {
    "name": "get_job_orchestrator_tags",
    "description": "GET /job-orchestrators/{jobOrchestratorId}/tags",
    "method": "get",
    "path": "/job-orchestrators/{jobOrchestratorId}/tags",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  {
    "name": "create_job_orchestrator_tags",
    "description": "POST /job-orchestrators/{jobOrchestratorId}/tags",
    "method": "post",
    "path": "/job-orchestrators/{jobOrchestratorId}/tags",
    "parameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Array of tags with key value pairs"
        }
      },
      "required": [
        "tags"
      ]
    }
  },
  {
    "name": "delete_job_orchestrator_tags",
    "description": "POST /job-orchestrators/{jobOrchestratorId}/tags/delete",
    "method": "post",
    "path": "/job-orchestrators/{jobOrchestratorId}/tags/delete",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "tags": {
          "type": "array",
          "description": "List of tags to be deleted"
        }
      },
      "required": []
    }
  },
  {
    "name": "sync_export",
    "description": "POST /sync-export",
    "method": "post",
    "path": "/sync-export",
    "parameters": {
      "type": "object",
      "properties": {
        "engine_id": {
          "type": "string",
          "description": ""
        },
        "application_name": {
          "type": "string",
          "description": ""
        },
        "object_type": {
          "type": "string",
          "description": ""
        },
        "object_ids": {
          "type": "array",
          "description": ""
        }
      },
      "required": []
    }
  }
]